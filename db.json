{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/svm_model.png","path":"images/svm_model.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify.css","path":"css/prettify.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify.min.css","path":"css/prettify.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/MathJax.js","path":"js/MathJax.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/hanabi-browser-bundle.js","path":"js/hanabi-browser-bundle.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/lsloader.js","path":"js/lsloader.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/prettify.min.js","path":"js/prettify.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/queue.js","path":"js/queue.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/queue.min.js","path":"js/queue.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/material-icons.css","path":"css/material-icons.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-cave-dark.min.css","path":"css/prettify/atelier-cave-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-cave-light.min.css","path":"css/prettify/atelier-cave-light.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-dune-dark.min.css","path":"css/prettify/atelier-dune-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-dune-light.min.css","path":"css/prettify/atelier-dune-light.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-estuary-dark.min.css","path":"css/prettify/atelier-estuary-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-estuary-light.min.css","path":"css/prettify/atelier-estuary-light.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-forest-dark.min.css","path":"css/prettify/atelier-forest-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-forest-light.min.css","path":"css/prettify/atelier-forest-light.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-heath-dark.min.css","path":"css/prettify/atelier-heath-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-heath-light.min.css","path":"css/prettify/atelier-heath-light.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-lakeside-dark.min.css","path":"css/prettify/atelier-lakeside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-lakeside-light.min.css","path":"css/prettify/atelier-lakeside-light.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-plateau-dark.min.css","path":"css/prettify/atelier-plateau-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-plateau-light.min.css","path":"css/prettify/atelier-plateau-light.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-savanna-dark.min.css","path":"css/prettify/atelier-savanna-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-savanna-light.min.css","path":"css/prettify/atelier-savanna-light.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-seaside-dark.min.css","path":"css/prettify/atelier-seaside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-seaside-light.min.css","path":"css/prettify/atelier-seaside-light.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-sulphurpool-dark.min.css","path":"css/prettify/atelier-sulphurpool-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-sulphurpool-light.min.css","path":"css/prettify/atelier-sulphurpool-light.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/github-v2.min.css","path":"css/prettify/github-v2.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/github.min.css","path":"css/prettify/github.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/hemisu-dark.min.css","path":"css/prettify/hemisu-dark.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/hemisu-light.min.css","path":"css/prettify/hemisu-light.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night-blue.min.css","path":"css/prettify/tomorrow-night-blue.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night-bright.min.css","path":"css/prettify/tomorrow-night-bright.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night-eighties.min.css","path":"css/prettify/tomorrow-night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night.min.css","path":"css/prettify/tomorrow-night.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow.min.css","path":"css/prettify/tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/tranquil-heart.min.css","path":"css/prettify/tranquil-heart.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/css/prettify/vibrant-ink.min.css","path":"css/prettify/vibrant-ink.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-v2ex.svg","path":"img/footer/footer_ico-v2ex.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-material/CONTRIBUTING.md","hash":"148f555e47d4725fe1faac775107a4d7b03f7136","modified":1586697757778},{"_id":"themes/hexo-theme-material/CONTRIBUTING.zh-cn.md","hash":"ef3ccef0451d6ac616b3a35fbfedb6abd35e6b41","modified":1586697757778},{"_id":"themes/hexo-theme-material/LICENSE","hash":"12d81f50767d4e09aa7877da077ad9d1b915d75b","modified":1586697757778},{"_id":"themes/hexo-theme-material/README.md","hash":"408e36745a8aeb187a25f309752c5e7da66f7e67","modified":1586697757778},{"_id":"themes/hexo-theme-material/_config.yml","hash":"7f96e9961737baadc377bb4bc10c8b6016ce6a2d","modified":1586697757778},{"_id":"themes/hexo-theme-material/contributing.json","hash":"1bc0871b1c7822b82533b614090ac0ab7c55282c","modified":1586697757778},{"_id":"themes/hexo-theme-material/lint.sh","hash":"49c3a65f8ca65754ec7fefcd2dcb6adc187f3856","modified":1586697757782},{"_id":"themes/hexo-theme-material/package.json","hash":"070a61700cb2997efccce1986649a19e809e8fff","modified":1586697757782},{"_id":"source/_posts/svm优化问题的导出.md","hash":"a6e692ef8b68a60050af5f72c3453f915cd21c39","modified":1586697757774},{"_id":"source/_posts/在Qt中实现数字音频均衡器.md","hash":"09c0b95d8c8cf814ef09edecb353a1182b7daff5","modified":1586697757774},{"_id":"source/_posts/平均场变分推断：以混合高斯模型为例.md","hash":"5c2fd18bfa116cae8cf49ce7224034fe44f996b1","modified":1586697757774},{"_id":"source/_posts/拍卖与博弈-计算广告中的底价问题.md","hash":"c9ccd501129598e9fda6b09d36ce469a2d6d6b43","modified":1586697757774},{"_id":"source/_posts/策略梯度与A2C算法.md","hash":"ed8941685564fb4dceb3ec27027523888ea72847","modified":1586697757774},{"_id":"source/_posts/让机器读懂文章-pLSA模型推导及实现.md","hash":"af43a5380ef9f1bfd766deff671bb0817120c5b7","modified":1586697757778},{"_id":"source/images/svm_model.png","hash":"26a4914014238720238426dbfb0acb2397540bd5","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/post.ejs","hash":"4dd572a9e84f3a6baa5e3f16d270e58e3cd31a23","modified":1586697757782},{"_id":"themes/hexo-theme-material/languages/ar.yml","hash":"472d71f052e08f3c03b15dd67d11ad41f2eee7bf","modified":1586697757778},{"_id":"themes/hexo-theme-material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1586697757778},{"_id":"themes/hexo-theme-material/languages/en.yml","hash":"b59136a1b4d0a77e550b0e7e2e430cac44230dd3","modified":1586697757778},{"_id":"themes/hexo-theme-material/languages/es.yml","hash":"d35f5411bc87277cc2d3a58d9499ddb9cfd46f1b","modified":1586697757778},{"_id":"themes/hexo-theme-material/languages/fr.yml","hash":"f456cf31a72d97f2f18e3bb6cf735285d2b9d2c5","modified":1586697757778},{"_id":"themes/hexo-theme-material/languages/ja.yml","hash":"768b8330c9c73287efd475e68741ce4ebad29fd1","modified":1586697757778},{"_id":"themes/hexo-theme-material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1586697757778},{"_id":"themes/hexo-theme-material/languages/nl_NL.yml","hash":"b71e59807716185627d6b9b84e44a79401df639f","modified":1586697757778},{"_id":"themes/hexo-theme-material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1586697757778},{"_id":"themes/hexo-theme-material/languages/ru.yml","hash":"fbff2cf48dbde45adcad781e2fd6c30b523a4ac1","modified":1586697757778},{"_id":"themes/hexo-theme-material/languages/zh-CN.yml","hash":"c188cad1a16ab0651e2d2d03cb3fa79962cf65ff","modified":1586697757778},{"_id":"themes/hexo-theme-material/languages/zh-TW.yml","hash":"ec55953f0330f81bf1ffb37ff34de258dfda642a","modified":1586697757778},{"_id":"themes/hexo-theme-material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586697757778},{"_id":"themes/hexo-theme-material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586697757782},{"_id":"source/_posts/images/svm_model.png","hash":"26a4914014238720238426dbfb0acb2397540bd5","modified":1586697757774},{"_id":"source/_posts/在Qt中实现数字音频均衡器/filter.png","hash":"0276e71d8aa70fef0c51b4c95f13371ab98b51a7","modified":1586697757774},{"_id":"source/_posts/平均场变分推断：以混合高斯模型为例/1576379999606.png","hash":"22da6ee94b0322a60ba921a9b9c8d60f51b0fb7a","modified":1586697757774},{"_id":"source/_posts/平均场变分推断：以混合高斯模型为例/1576397186643.png","hash":"387cd0e6324cc16d7e11fda6c063f53d15fe7809","modified":1586697757774},{"_id":"source/_posts/平均场变分推断：以混合高斯模型为例/1576398403713.png","hash":"70435f432ac7e86d3934b98b483575f91f734a0f","modified":1586697757774},{"_id":"source/_posts/平均场变分推断：以混合高斯模型为例/1576417611798.png","hash":"e6bf317ca947ca4aa66a9fd8b88082be9980453a","modified":1586697757774},{"_id":"source/_posts/平均场变分推断：以混合高斯模型为例/1576417800040.png","hash":"31926a39b2c4d52d5f73cc5b04e1c3d2b1bc17a9","modified":1586697757774},{"_id":"source/_posts/策略梯度与A2C算法/1566648579995.png","hash":"f5eb08617bcc5161322720403eeb4f9fd1ed3c41","modified":1586697757774},{"_id":"source/_posts/策略梯度与A2C算法/1566661030761.png","hash":"d072854132272c580c96a9fc30a5b1d59ca9d591","modified":1586697757778},{"_id":"source/_posts/策略梯度与A2C算法/1566661134557.png","hash":"e48360c8df577aa41975bfb399fc5987be648e17","modified":1586697757778},{"_id":"source/_posts/策略梯度与A2C算法/1566661039603.png","hash":"d072854132272c580c96a9fc30a5b1d59ca9d591","modified":1586697757778},{"_id":"source/_posts/策略梯度与A2C算法/1566668496252.png","hash":"525db07a0e8ea44049a65bb6f8c4d1a1333119f2","modified":1586697757778},{"_id":"source/_posts/让机器读懂文章-pLSA模型推导及实现/plsa.png","hash":"c8d558f22cb9eaa0b0d6557e0796c3f3b609c7f0","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/dnsprefetch.ejs","hash":"5e4c5359d69a64042183db13f6dd771b1f7f6b31","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/mathjax.ejs","hash":"b68befe1fea84739c8429c344e570a8bc0357401","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/nprogress.ejs","hash":"901a64600854b312209287c702278183600e06b9","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/page-gallery.ejs","hash":"81b9410deef7a83ef5bc7cd18ad042df70d70b94","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/page-links.ejs","hash":"0ebe18e4326f921d6010df8479a08c2d403ba717","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/search-local-js.ejs","hash":"f42cc040adf47fc7d74f64b0be3c3230e8a3339e","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_partial/Isolation-post_entry.ejs","hash":"134dc82320b7aed7d4d78960be63e16c5c4a30fb","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/Paradox-post-info.ejs","hash":"125cfa5cd9e6e1ca5e958026fdd42f3c3141e34f","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"6f1e9a85c089ce98a36a2954839fb9ce3e53739e","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"4d740eba338517d4e10d011a157cdefad45a8e1f","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/Paradox-post_entry.ejs","hash":"5f4d67e5bd70f635203706cf344b036d891073e6","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/blog_info.ejs","hash":"5e95796e6f9a81163554ca4198573860f7328d4e","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/config_css.ejs","hash":"2b1e27faa0446a5e756e61ddf3e969e50948f1ce","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/config_font.ejs","hash":"730abeb681758ce288d5541930c46bc4b041a0b1","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/daily_pic.ejs","hash":"e780fbdb79b5e27091c408545cfd5b64892c9b01","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/footer-left.ejs","hash":"372cdf718e01fea2736b8e427e57bfcfaa8a557f","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/footer.ejs","hash":"fac1083f27fb4c3675b63df6fb96e16754144a1d","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/head.ejs","hash":"8167f995c7cc21a6a8ddbfbdd03f2f74a7bd904d","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/import_js.ejs","hash":"961b8a0059875e4044fe80bbe91ca6a225f113e5","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/post-content.ejs","hash":"ad626e3b60bc4a17bacff02cf9b0a8beaba2ad1e","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/post-header.ejs","hash":"b0b8973c48db6376a24d4b4b1d2eb15d18d6508c","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/post-info-share.ejs","hash":"9f28d62bf728c2bd89411688426a65d7ee55400c","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/post-nav.ejs","hash":"3b6d4568cc46f60c697ad9ec85a4aa5971f3eecc","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/sidebar-footer_image.ejs","hash":"b9157d2072028a1db3c3419f76bde6637e85cf0e","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/sidebar-header.ejs","hash":"06295e01092f55504d30a343c3fdc5091280e495","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_partial/toc_button.ejs","hash":"688c3fc12e2548ff27fe60688f79dcce2881fd50","modified":1586697757778},{"_id":"themes/hexo-theme-material/scripts/lib/css_lsload.js","hash":"179f5f5e3297a7fb7d90545ddd94eb468a11046e","modified":1586697757782},{"_id":"themes/hexo-theme-material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1586697757782},{"_id":"themes/hexo-theme-material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1586697757782},{"_id":"themes/hexo-theme-material/scripts/lib/js_lsload.js","hash":"72f885b13fe0028a0e2acb7168dcc66e39ea1592","modified":1586697757782},{"_id":"themes/hexo-theme-material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1586697757786},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1586697757786},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1586697757786},{"_id":"themes/hexo-theme-material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/favicon.ico","hash":"e502fbc644a8f5bde6724370697513899746666f","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1586697757814},{"_id":"themes/hexo-theme-material/source/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1586697757814},{"_id":"themes/hexo-theme-material/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1586697757814},{"_id":"themes/hexo-theme-material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1586697757814},{"_id":"themes/hexo-theme-material/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1586697757814},{"_id":"themes/hexo-theme-material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1586697757814},{"_id":"themes/hexo-theme-material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1586697757814},{"_id":"themes/hexo-theme-material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1586697757814},{"_id":"themes/hexo-theme-material/source/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/style.css","hash":"02ea82d87b95d6d89472624e9c23be551289a1d3","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/style.min.css","hash":"04f492093ea96e176438510c38d28f5450ebc7de","modified":1586697757786},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1586697757786},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1586697757814},{"_id":"source/_posts/策略梯度与A2C算法/1566647970040.png","hash":"6975b9e411c231ddebad6e5bd9a95051ef98c039","modified":1586697757774},{"_id":"themes/hexo-theme-material/layout/_widget/analytics/baidu-analytics.ejs","hash":"3866a7fead3c1f94a517f1f9d629f092670b1520","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"1765e3dcd92961292f40d1812e593186c77b17ef","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/analytics/google-analytics.ejs","hash":"3b10ebf524baf0c24b22dcd110b39d15c5acb9b5","modified":1586697757778},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1586697757786},{"_id":"themes/hexo-theme-material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1586697757786},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1586697757802},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1586697757810},{"_id":"themes/hexo-theme-material/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/comment/valine/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1586697757810},{"_id":"themes/hexo-theme-material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/disqus_click/main.ejs","hash":"f53de208ca46c669a868a1922488e39509c6fe3b","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitalk/common.ejs","hash":"f739897518011e1b3de7807c8c5d734984711282","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitalk/enter.ejs","hash":"4d70d76465469a57def29a221962a5520fb34ebe","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitalk/main.ejs","hash":"1ee7a7b2b9b5ae8c4fa8c4b09c7973b9e085bdf2","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitment/enter.ejs","hash":"46d904fde9233694b95c6a3d91b9a2b7a6805850","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/gitment/main.ejs","hash":"e622660eda38cda05847aadc2a3e31a228fc519b","modified":1586697757778},{"_id":"themes/hexo-theme-material/layout/_widget/comment/livere/enter.ejs","hash":"194b7bb581a3b8608a7ab135b6953d7908f51cc8","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/comment/livere/main.ejs","hash":"1c4be9ba104a8cbcc11d45f11bf8cfe7704b93a5","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/comment/valine/enter.ejs","hash":"ab528aad46237d9e7f1c5b4b2b310dd628b2de63","modified":1586697757782},{"_id":"themes/hexo-theme-material/layout/_widget/comment/valine/main.ejs","hash":"3d5d8559e6ad4ffb58a61d96439b2718eb9999b6","modified":1586697757782},{"_id":"themes/hexo-theme-material/source/img/avatar.jpg","hash":"ad463ca55f48284e30c654c49d0e64beac6ca004","modified":1586697757806},{"_id":"themes/hexo-theme-material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1586697757810},{"_id":"themes/hexo-theme-material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1586697757802},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1586697757802},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1586697757794},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1586697757798},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1586697757798},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1586697757790},{"_id":"themes/hexo-theme-material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1586697757790},{"_id":"public/atom.xml","hash":"6b01ab22e73f0381402188a93e0945f472e9fbac","modified":1586699680917},{"_id":"public/content.json","hash":"0edfc59d7e9f7899ff3806380e7c744a29789ee5","modified":1586699680920},{"_id":"public/search.xml","hash":"249bbc8bdce596e0ab05e4b316d3a24c33ef724e","modified":1586699680920},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1586699680936},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1586699680936},{"_id":"public/img/favicon.ico","hash":"e502fbc644a8f5bde6724370697513899746666f","modified":1586699680936},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1586699680936},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1586699680936},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1586699680936},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1586699680936},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1586699680936},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1586699680936},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1586699680937},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1586699680937},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1586699680937},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1586699680937},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1586699680937},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1586699680937},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1586699680937},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1586699680937},{"_id":"public/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1586699680937},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1586699680937},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1586699680937},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1586699680937},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1586699680938},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1586699680938},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1586699680938},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1586699680938},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1586699680938},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1586699680938},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1586699680938},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1586699680938},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1586699680938},{"_id":"public/2019/07/12/在Qt中实现数字音频均衡器/filter.png","hash":"0276e71d8aa70fef0c51b4c95f13371ab98b51a7","modified":1586699680939},{"_id":"public/2019/07/12/让机器读懂文章-pLSA模型推导及实现/plsa.png","hash":"c8d558f22cb9eaa0b0d6557e0796c3f3b609c7f0","modified":1586699680939},{"_id":"public/2019/12/15/平均场变分推断：以混合高斯模型为例/1576379999606.png","hash":"22da6ee94b0322a60ba921a9b9c8d60f51b0fb7a","modified":1586699680939},{"_id":"public/2019/12/15/平均场变分推断：以混合高斯模型为例/1576397186643.png","hash":"387cd0e6324cc16d7e11fda6c063f53d15fe7809","modified":1586699680939},{"_id":"public/2019/12/15/平均场变分推断：以混合高斯模型为例/1576398403713.png","hash":"70435f432ac7e86d3934b98b483575f91f734a0f","modified":1586699680939},{"_id":"public/2019/12/15/平均场变分推断：以混合高斯模型为例/1576417611798.png","hash":"e6bf317ca947ca4aa66a9fd8b88082be9980453a","modified":1586699680939},{"_id":"public/2019/12/15/平均场变分推断：以混合高斯模型为例/1576417800040.png","hash":"31926a39b2c4d52d5f73cc5b04e1c3d2b1bc17a9","modified":1586699680939},{"_id":"public/2019/08/24/策略梯度与A2C算法/1566648579995.png","hash":"f5eb08617bcc5161322720403eeb4f9fd1ed3c41","modified":1586699680939},{"_id":"public/2019/08/24/策略梯度与A2C算法/1566661030761.png","hash":"d072854132272c580c96a9fc30a5b1d59ca9d591","modified":1586699680939},{"_id":"public/2019/08/24/策略梯度与A2C算法/1566661134557.png","hash":"e48360c8df577aa41975bfb399fc5987be648e17","modified":1586699680939},{"_id":"public/2019/08/24/策略梯度与A2C算法/1566661039603.png","hash":"d072854132272c580c96a9fc30a5b1d59ca9d591","modified":1586699680939},{"_id":"public/2019/08/24/策略梯度与A2C算法/1566668496252.png","hash":"525db07a0e8ea44049a65bb6f8c4d1a1333119f2","modified":1586699680939},{"_id":"public/2019/12/15/平均场变分推断：以混合高斯模型为例/index.html","hash":"f4780a0060eadd334a4dd9b941f329670b073add","modified":1586699681371},{"_id":"public/2019/08/24/策略梯度与A2C算法/index.html","hash":"d496722b24fb7542b927e18370ce69a3f43065e6","modified":1586699681372},{"_id":"public/2019/07/21/拍卖与博弈-计算广告中的底价问题/index.html","hash":"ae07f8b971f3bc1da338594abd0bdca66af15e46","modified":1586699681372},{"_id":"public/2019/07/12/让机器读懂文章-pLSA模型推导及实现/index.html","hash":"9b80a63c79872937ab48c4cf278bb8f1880beab7","modified":1586699681372},{"_id":"public/2019/07/12/svm优化问题的导出/index.html","hash":"b4dd91e6906bb997ad45568d377b42f925364aab","modified":1586699681372},{"_id":"public/2019/07/12/在Qt中实现数字音频均衡器/index.html","hash":"2752ff0e9be182cbc99366464c02fe526350ea97","modified":1586699681372},{"_id":"public/archives/index.html","hash":"fa9870f52366b134d82862843c991c1a9552da11","modified":1586699681372},{"_id":"public/archives/2019/index.html","hash":"6d11e9818f3e09522198dc49b8ddd6577c087b00","modified":1586699681372},{"_id":"public/archives/2019/07/index.html","hash":"db8617a16122b861664ecbeccd7917e23d6a62c6","modified":1586699681372},{"_id":"public/archives/2019/08/index.html","hash":"8638870b1fc13ec0a4d416de0bde920bd349f5f7","modified":1586699681372},{"_id":"public/archives/2019/12/index.html","hash":"da9002e9d41855d5a7ce7205169b4a8d377a0d57","modified":1586699681373},{"_id":"public/categories/机器学习/index.html","hash":"8a19f20f9d56cf052ec0c036536e0ee3b02b93fd","modified":1586699681373},{"_id":"public/categories/Qt/index.html","hash":"423beba841488eb33572f5a8e3c8c6b3fcc4ece1","modified":1586699681373},{"_id":"public/categories/计算广告/index.html","hash":"2bff4b25e35512d05156dbe8821d5c70c4ab3568","modified":1586699681373},{"_id":"public/categories/强化学习/index.html","hash":"75b2646f91b13ff6b71d85842e90cc2d09ab9365","modified":1586699681373},{"_id":"public/categories/自然语言处理/index.html","hash":"f14dc1dbf3ba9a0937ea233c88be854d0d65543b","modified":1586699681373},{"_id":"public/index.html","hash":"8f1df43507fc67234b976ea4615c96a692734182","modified":1586699681373},{"_id":"public/tags/机器学习/index.html","hash":"9c06f50fc662956bfee76ac68ee576b813ff4e4d","modified":1586699681373},{"_id":"public/tags/算法/index.html","hash":"4570b556a8e3424f34a671ed0c03fb1465a7120e","modified":1586699681373},{"_id":"public/tags/C/index.html","hash":"57dfa1bb2f034b5e5ac2008ae8bad23f521cd07d","modified":1586699681374},{"_id":"public/tags/Qt/index.html","hash":"d3d6d8261c084b2a0cf02210e4fc1e1fca6c74a8","modified":1586699681374},{"_id":"public/tags/音频算法/index.html","hash":"921049912f686130742a251273e39ae229a7ff8c","modified":1586699681374},{"_id":"public/tags/计算广告/index.html","hash":"f36865cc3aa96df9db714c144b147f80d602d375","modified":1586699681374},{"_id":"public/tags/自然语言处理/index.html","hash":"bae936d2218289a02fa5ef9bf76650ebd729b203","modified":1586699681374},{"_id":"public/images/svm_model.png","hash":"26a4914014238720238426dbfb0acb2397540bd5","modified":1586699681374},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1586699681374},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1586699681374},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1586699681375},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1586699681375},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1586699681375},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1586699681375},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1586699681375},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1586699681375},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1586699681375},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1586699681375},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1586699681375},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1586699681376},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1586699681376},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1586699681376},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1586699681376},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1586699681376},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1586699681376},{"_id":"public/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1586699681383},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1586699681383},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1586699681383},{"_id":"public/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1586699681383},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1586699681383},{"_id":"public/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1586699681383},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1586699681383},{"_id":"public/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1586699681383},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1586699681383},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1586699681384},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1586699681384},{"_id":"public/css/duoshuo.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586699681384},{"_id":"public/css/duoshuo.min.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1586699681384},{"_id":"public/css/disqus-proxy.css","hash":"d0fffe4e26ffc4bc1d8f9a9b4d4154109d811815","modified":1586699681384},{"_id":"public/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1586699681384},{"_id":"public/css/disqus-proxy.min.css","hash":"295ec43fe86a033f6d228115881a37fd7955dac0","modified":1586699681384},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1586699681384},{"_id":"public/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1586699681384},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1586699681384},{"_id":"public/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1586699681384},{"_id":"public/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1586699681384},{"_id":"public/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1586699681384},{"_id":"public/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1586699681384},{"_id":"public/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1586699681385},{"_id":"public/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1586699681385},{"_id":"public/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1586699681385},{"_id":"public/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1586699681385},{"_id":"public/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1586699681385},{"_id":"public/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1586699681385},{"_id":"public/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1586699681385},{"_id":"public/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1586699681385},{"_id":"public/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1586699681385},{"_id":"public/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1586699681385},{"_id":"public/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1586699681385},{"_id":"public/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1586699681385},{"_id":"public/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1586699681386},{"_id":"public/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1586699681386},{"_id":"public/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1586699681386},{"_id":"public/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1586699681386},{"_id":"public/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1586699681386},{"_id":"public/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1586699681386},{"_id":"public/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1586699681386},{"_id":"public/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1586699681386},{"_id":"public/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1586699681386},{"_id":"public/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1586699681386},{"_id":"public/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1586699681386},{"_id":"public/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1586699681386},{"_id":"public/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1586699681386},{"_id":"public/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1586699681386},{"_id":"public/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1586699681387},{"_id":"public/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1586699681387},{"_id":"public/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1586699681387},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1586699681387},{"_id":"public/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1586699681387},{"_id":"public/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1586699681387},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1586699681387},{"_id":"public/css/gallery.min.css","hash":"3935e3bc7da10d75bc925f23e9163ec3b5141c79","modified":1586699681387},{"_id":"public/css/fontawesome.min.css","hash":"785df7889e1d82fe85ea67fd4cefce7af0f71bb5","modified":1586699681387},{"_id":"public/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1586699681387},{"_id":"public/css/material.css","hash":"e373991953ba6f776dac76c14c9ded9e6938f83a","modified":1586699681387},{"_id":"public/css/material.min.css","hash":"416ca4a98361583207e01303dabdd5bdbab90da6","modified":1586699681387},{"_id":"public/css/style.min.css","hash":"b128630ba4bdd713397287508f604f782c89c74e","modified":1586699681388},{"_id":"public/css/style.css","hash":"027673d6c0b0d01b2628589ec35a87ad2d66859c","modified":1586699681388},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1586699681388},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1586699681388},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1586699681388},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1586699681388},{"_id":"public/2019/08/24/策略梯度与A2C算法/1566647970040.png","hash":"6975b9e411c231ddebad6e5bd9a95051ef98c039","modified":1586699681388},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1586699681392},{"_id":"public/img/avatar.jpg","hash":"ad463ca55f48284e30c654c49d0e64beac6ca004","modified":1586699681422},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1586699681427},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1586699681427},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1586699681427},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1586699681431},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1586699681431},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1586699681432},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1586699681434}],"Category":[{"name":"机器学习","_id":"ck8x40sjj0006q69p29tkzv2d"},{"name":"Qt","_id":"ck8x40sjo0008q69p00tzjf7o"},{"name":"计算广告","_id":"ck8x40sjq000cq69p8s696jpr"},{"name":"强化学习","_id":"ck8x40sjr000eq69pkkvgeelo"},{"name":"自然语言处理","_id":"ck8x40sjr000gq69px10bvpz6"}],"Data":[],"Page":[],"Post":[{"title":"svm优化问题的导出","date":"2019-07-12T01:53:57.000Z","mathjax":true,"_content":"\n# SVM - 优化问题的导出\n\nsvm的想法其实非常朴素：\n\n- 寻找一个超平面来将所有样本正确分开 (条件1)\n- 并且保证超平面到两类样本的边界到超平面的距离和最大且相等 (条件2)\n\n条件一其实就是线性可分的条件，条件二是为了保证鲁棒性，保证两类样本到超平面的距离最大，就相当于保留了判断时的裕量，这样即使数据有噪声，只要噪声不是太过于离谱，都不会产生误判，而保证两类样本边界到超平面距离相等则是为了不偏向某一方。\n\n用图来直观地感受下上面两条约束，svm模型图示如下：\n\n![svm模型](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi83LzcyL1NWTV9tYXJnaW4ucG5nLzMwMHB4LVNWTV9tYXJnaW4ucG5n)\n\n现在我们可以用数学的方式来描述这两个想法。\n\n对于约束一，假设有一个超平面$w^Tx+b=0$可以将两类样本分开，那么对于正类样本$x_p$来说必然有$w^Tx_p+b > 0$；同样地，对于负类样本$x_n$来说也会有$w^Tx_n + b < 0$。如果我们让正类样本标签为$y_p=+1$而负类样本标签为$y_p=-1$，那么我们可以统一描述为\n\n$$y(w^Tx+b) > 0 \\tag{1}$$\n\n现在我们来看**条件2**。\n\n为了对条件2进行建模，我们首先要求空间中任意一点到超平面$w^Tx+b=0$的距离。现在我们假设有一点$x_1$，它到超平面的距离$\\gamma$可以写做\n\n$$\\gamma=|w^Tx_1+b| \\tag{2}$$\n\n这个公式怎么来的呢？我们可以假设点$x_1$在超平面上的投影为$x_0$,那么从$x_1$指向$x_0$的这个向量就等于$x_1 - x_0$，同时这个向量的方向与超平面的法向量是一致的，我们把超平面化为$\\frac{w^Tx+b}{||w||} = 0$,可以得到法向量$\\frac{w}{||w||}$,所以我们可以得出\n\n$$\\frac{\\gamma w}{||w||} = x_1 - x_0 \\tag{3}$$\n\n其中$\\gamma$就是点$x_1$到超平面的距离。式子(3)简单地做一下变形就可以得到式子(4)\n\n$$\\frac{\\gamma w^Tw}{||w||} = w^T(x_1 - x_0) + b - b = w^Tx_1 + b - (w^Tx_0 + b) \\tag{4}$$\n\n因为$x_0$是超平面$w^Tx + b = 0$上面的点，也就意味着$w^Tx_0 + b = 0$,这样如果只看距离的大小而不看方向的话，式子(4)就可以化为\n\n$$\\gamma  = \\frac{|w^Tx_1+b|}{||w||} $$\n\n好了，有了距离公式之后我们可以计算一下两类样本到超平面的边界距离之和了。假设有正类的边界样本$x_+$和负类边界样本$x_-$, 距离之和为\n\n$$\\gamma_+ + \\gamma_- = \\frac{w^T(x_+ - x_-)}{||w||} \\tag{5}$$\n\n我们观察一下式子(5)，在给定样本之后，由于分母$||w||$的存在，消除了参数向量$w$的*模长*的影响, $\\frac{w}{||w||}$相当于一个方向与$w$同向的单位向量。于是我们只需要关注参数向量$w$的方向，而不需要关注其长度，从另一个角度来说，我们可以对$w$进行任意倍数的缩放而不会影响超平面。于是我们可以随意地令：\n\n$$\n\t\\begin{cases}\n    \t\\quad w^T(x_+-x_-)=2 \\\\\n        \\quad w^Tx_+ + b = 1 \\\\\n        \\quad w^Tx_- + b = -1\n    \\end{cases}\n$$\n\n这并没有什么难以理解的，因为不管$w$和$b$的方向如何，我们总是可以对其进行缩放使得上述等式成立。这样由于正负类边界到超平面的距离都缩放到了$1$，式子(5)改写成\n\n$$\n\\gamma_+ + \\gamma_- = \\frac{2}{||w||} \\tag{6}\n$$\n\n于是约束(1)也需要改写成\n\n$$\ny(w^Tx+b) \\ge 1 \\tag{7}\n$$\n\n于是式子(6)和(7)构成了我们的优化目标与约束：\n\n又由于最大化$\\frac{2}{||w||}$与最小化$\\frac{||w||^2}{2}$是等价的，而后者可以得到一个更规整的导数，方便后续处理，所以我们把上述的优化问题重写为:\n\n$$\n\\begin{cases}\n    \\quad \\underset{w,b}{\\arg \\min} \\frac{||w||^2}{2} \\\\\n    \\quad s.t. \\quad y_i(w^Tx_i + b) \\ge 1, \\quad i = (1, 2, 3, ...m)\n\\end{cases} \\tag{8}\n$$\n\n其实我们重新审视一下式子(8), 约束条件未免太过严格，实际上大多数数据都很少存在这样完美的线性可分的条件，于是我们打算放宽一点限制: 不严格要求对每个样本都满足约束条件$y_i(w^Tx_i + b) \\ge 1$，而是允许一定程度地违反该约束，并且违反程度通过$max(0, 1 - y_i(w^Tx_i+b))$来量化并且作为一个正则化项加入到优化目标当中。于是式子(8)进一步写成\n\n$$\n\\underset{w,b}{\\arg \\min} \\frac{||w||^2}{2} + C\\sum_{i=1}^m{max(0, 1-y_i(w^Tx_i+b))} \\tag{9}\n$$\n\n现在看一看式子(9),很遗憾，由于含有非线性且不连续的部分，导致式子(9)也难以求解，于是我们只能寻求新的方法。好在这类问题前人们已经研究过了，解决的办法称之为:**松弛变量法**。在最优化领域，如果我们的约束函数全为'$\\ge$'或者'$\\le$'条件时，我们希望对满足约束的样本保持原有的约束，而对那些不满足约束的样本适当放松约束(边界变得松弛了)，并且将放松的程度作为一个惩罚量加入最优化目标函数中，这样我们就可以在更大的可行域中去最优化目标函数。在这里的做法是将约束$y_i(w^Tx_i+b) \\ge 1$放松到$y_i(w^Tx_i + b) \\ge 1-\\xi_i$并且将$\\xi_i$作为一个惩罚量加入目标函数中去，根据这个想法得到的优化目标与约束为\n\n$$\n\\begin{aligned}\n    & \\underset{w,b,\\xi_i}{\\arg \\min} \\frac{||w||^2}{2} + C\\sum_{i=0}^m\\xi_i \\\\\n    s.t.\n    & \\begin{cases}\n        y_i(w^Tx_i + b) \\ge 1-\\xi_i, \\quad i = (1, 2, 3...,m) \\\\\n        \\xi_i \\ge 0, \\quad i = (i, 2, 3...,m)\n    \\end{cases}\n\\end{aligned} \\tag{10}\n$$\n\n\n以上式子就是SVM的带约束优化目标了，解决式$(10)$的方式有很多，一般通用的做法是通过拉格朗日乘子法将带约束问题转换为无约束的最优化问题，从而能够利用梯度下降，坐标上升法等迭代算法来求解。","source":"_posts/svm优化问题的导出.md","raw":"---\ntitle: svm优化问题的导出\ndate: 2019-07-12 01:53:57\ntags: [机器学习, 算法]\nmathjax: true\ncategories: [机器学习]\n---\n\n# SVM - 优化问题的导出\n\nsvm的想法其实非常朴素：\n\n- 寻找一个超平面来将所有样本正确分开 (条件1)\n- 并且保证超平面到两类样本的边界到超平面的距离和最大且相等 (条件2)\n\n条件一其实就是线性可分的条件，条件二是为了保证鲁棒性，保证两类样本到超平面的距离最大，就相当于保留了判断时的裕量，这样即使数据有噪声，只要噪声不是太过于离谱，都不会产生误判，而保证两类样本边界到超平面距离相等则是为了不偏向某一方。\n\n用图来直观地感受下上面两条约束，svm模型图示如下：\n\n![svm模型](https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi83LzcyL1NWTV9tYXJnaW4ucG5nLzMwMHB4LVNWTV9tYXJnaW4ucG5n)\n\n现在我们可以用数学的方式来描述这两个想法。\n\n对于约束一，假设有一个超平面$w^Tx+b=0$可以将两类样本分开，那么对于正类样本$x_p$来说必然有$w^Tx_p+b > 0$；同样地，对于负类样本$x_n$来说也会有$w^Tx_n + b < 0$。如果我们让正类样本标签为$y_p=+1$而负类样本标签为$y_p=-1$，那么我们可以统一描述为\n\n$$y(w^Tx+b) > 0 \\tag{1}$$\n\n现在我们来看**条件2**。\n\n为了对条件2进行建模，我们首先要求空间中任意一点到超平面$w^Tx+b=0$的距离。现在我们假设有一点$x_1$，它到超平面的距离$\\gamma$可以写做\n\n$$\\gamma=|w^Tx_1+b| \\tag{2}$$\n\n这个公式怎么来的呢？我们可以假设点$x_1$在超平面上的投影为$x_0$,那么从$x_1$指向$x_0$的这个向量就等于$x_1 - x_0$，同时这个向量的方向与超平面的法向量是一致的，我们把超平面化为$\\frac{w^Tx+b}{||w||} = 0$,可以得到法向量$\\frac{w}{||w||}$,所以我们可以得出\n\n$$\\frac{\\gamma w}{||w||} = x_1 - x_0 \\tag{3}$$\n\n其中$\\gamma$就是点$x_1$到超平面的距离。式子(3)简单地做一下变形就可以得到式子(4)\n\n$$\\frac{\\gamma w^Tw}{||w||} = w^T(x_1 - x_0) + b - b = w^Tx_1 + b - (w^Tx_0 + b) \\tag{4}$$\n\n因为$x_0$是超平面$w^Tx + b = 0$上面的点，也就意味着$w^Tx_0 + b = 0$,这样如果只看距离的大小而不看方向的话，式子(4)就可以化为\n\n$$\\gamma  = \\frac{|w^Tx_1+b|}{||w||} $$\n\n好了，有了距离公式之后我们可以计算一下两类样本到超平面的边界距离之和了。假设有正类的边界样本$x_+$和负类边界样本$x_-$, 距离之和为\n\n$$\\gamma_+ + \\gamma_- = \\frac{w^T(x_+ - x_-)}{||w||} \\tag{5}$$\n\n我们观察一下式子(5)，在给定样本之后，由于分母$||w||$的存在，消除了参数向量$w$的*模长*的影响, $\\frac{w}{||w||}$相当于一个方向与$w$同向的单位向量。于是我们只需要关注参数向量$w$的方向，而不需要关注其长度，从另一个角度来说，我们可以对$w$进行任意倍数的缩放而不会影响超平面。于是我们可以随意地令：\n\n$$\n\t\\begin{cases}\n    \t\\quad w^T(x_+-x_-)=2 \\\\\n        \\quad w^Tx_+ + b = 1 \\\\\n        \\quad w^Tx_- + b = -1\n    \\end{cases}\n$$\n\n这并没有什么难以理解的，因为不管$w$和$b$的方向如何，我们总是可以对其进行缩放使得上述等式成立。这样由于正负类边界到超平面的距离都缩放到了$1$，式子(5)改写成\n\n$$\n\\gamma_+ + \\gamma_- = \\frac{2}{||w||} \\tag{6}\n$$\n\n于是约束(1)也需要改写成\n\n$$\ny(w^Tx+b) \\ge 1 \\tag{7}\n$$\n\n于是式子(6)和(7)构成了我们的优化目标与约束：\n\n又由于最大化$\\frac{2}{||w||}$与最小化$\\frac{||w||^2}{2}$是等价的，而后者可以得到一个更规整的导数，方便后续处理，所以我们把上述的优化问题重写为:\n\n$$\n\\begin{cases}\n    \\quad \\underset{w,b}{\\arg \\min} \\frac{||w||^2}{2} \\\\\n    \\quad s.t. \\quad y_i(w^Tx_i + b) \\ge 1, \\quad i = (1, 2, 3, ...m)\n\\end{cases} \\tag{8}\n$$\n\n其实我们重新审视一下式子(8), 约束条件未免太过严格，实际上大多数数据都很少存在这样完美的线性可分的条件，于是我们打算放宽一点限制: 不严格要求对每个样本都满足约束条件$y_i(w^Tx_i + b) \\ge 1$，而是允许一定程度地违反该约束，并且违反程度通过$max(0, 1 - y_i(w^Tx_i+b))$来量化并且作为一个正则化项加入到优化目标当中。于是式子(8)进一步写成\n\n$$\n\\underset{w,b}{\\arg \\min} \\frac{||w||^2}{2} + C\\sum_{i=1}^m{max(0, 1-y_i(w^Tx_i+b))} \\tag{9}\n$$\n\n现在看一看式子(9),很遗憾，由于含有非线性且不连续的部分，导致式子(9)也难以求解，于是我们只能寻求新的方法。好在这类问题前人们已经研究过了，解决的办法称之为:**松弛变量法**。在最优化领域，如果我们的约束函数全为'$\\ge$'或者'$\\le$'条件时，我们希望对满足约束的样本保持原有的约束，而对那些不满足约束的样本适当放松约束(边界变得松弛了)，并且将放松的程度作为一个惩罚量加入最优化目标函数中，这样我们就可以在更大的可行域中去最优化目标函数。在这里的做法是将约束$y_i(w^Tx_i+b) \\ge 1$放松到$y_i(w^Tx_i + b) \\ge 1-\\xi_i$并且将$\\xi_i$作为一个惩罚量加入目标函数中去，根据这个想法得到的优化目标与约束为\n\n$$\n\\begin{aligned}\n    & \\underset{w,b,\\xi_i}{\\arg \\min} \\frac{||w||^2}{2} + C\\sum_{i=0}^m\\xi_i \\\\\n    s.t.\n    & \\begin{cases}\n        y_i(w^Tx_i + b) \\ge 1-\\xi_i, \\quad i = (1, 2, 3...,m) \\\\\n        \\xi_i \\ge 0, \\quad i = (i, 2, 3...,m)\n    \\end{cases}\n\\end{aligned} \\tag{10}\n$$\n\n\n以上式子就是SVM的带约束优化目标了，解决式$(10)$的方式有很多，一般通用的做法是通过拉格朗日乘子法将带约束问题转换为无约束的最优化问题，从而能够利用梯度下降，坐标上升法等迭代算法来求解。","slug":"svm优化问题的导出","published":1,"updated":"2020-04-12T13:22:37.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8x40sin0000q69p7u79mph2","content":"<h1 id=\"SVM-优化问题的导出\"><a href=\"#SVM-优化问题的导出\" class=\"headerlink\" title=\"SVM - 优化问题的导出\"></a>SVM - 优化问题的导出</h1><p>svm的想法其实非常朴素：</p>\n<ul>\n<li>寻找一个超平面来将所有样本正确分开 (条件1)</li>\n<li>并且保证超平面到两类样本的边界到超平面的距离和最大且相等 (条件2)</li>\n</ul>\n<p>条件一其实就是线性可分的条件，条件二是为了保证鲁棒性，保证两类样本到超平面的距离最大，就相当于保留了判断时的裕量，这样即使数据有噪声，只要噪声不是太过于离谱，都不会产生误判，而保证两类样本边界到超平面距离相等则是为了不偏向某一方。</p>\n<p>用图来直观地感受下上面两条约束，svm模型图示如下：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi83LzcyL1NWTV9tYXJnaW4ucG5nLzMwMHB4LVNWTV9tYXJnaW4ucG5n\" alt=\"svm模型\"></p>\n<p>现在我们可以用数学的方式来描述这两个想法。</p>\n<p>对于约束一，假设有一个超平面$w^Tx+b=0$可以将两类样本分开，那么对于正类样本$x_p$来说必然有$w^Tx_p+b &gt; 0$；同样地，对于负类样本$x_n$来说也会有$w^Tx_n + b &lt; 0$。如果我们让正类样本标签为$y_p=+1$而负类样本标签为$y_p=-1$，那么我们可以统一描述为</p>\n<script type=\"math/tex; mode=display\">y(w^Tx+b) > 0 \\tag{1}</script><p>现在我们来看<strong>条件2</strong>。</p>\n<p>为了对条件2进行建模，我们首先要求空间中任意一点到超平面$w^Tx+b=0$的距离。现在我们假设有一点$x_1$，它到超平面的距离$\\gamma$可以写做</p>\n<script type=\"math/tex; mode=display\">\\gamma=|w^Tx_1+b| \\tag{2}</script><p>这个公式怎么来的呢？我们可以假设点$x_1$在超平面上的投影为$x_0$,那么从$x_1$指向$x_0$的这个向量就等于$x_1 - x_0$，同时这个向量的方向与超平面的法向量是一致的，我们把超平面化为$\\frac{w^Tx+b}{||w||} = 0$,可以得到法向量$\\frac{w}{||w||}$,所以我们可以得出</p>\n<script type=\"math/tex; mode=display\">\\frac{\\gamma w}{||w||} = x_1 - x_0 \\tag{3}</script><p>其中$\\gamma$就是点$x_1$到超平面的距离。式子(3)简单地做一下变形就可以得到式子(4)</p>\n<script type=\"math/tex; mode=display\">\\frac{\\gamma w^Tw}{||w||} = w^T(x_1 - x_0) + b - b = w^Tx_1 + b - (w^Tx_0 + b) \\tag{4}</script><p>因为$x_0$是超平面$w^Tx + b = 0$上面的点，也就意味着$w^Tx_0 + b = 0$,这样如果只看距离的大小而不看方向的话，式子(4)就可以化为</p>\n<script type=\"math/tex; mode=display\">\\gamma  = \\frac{|w^Tx_1+b|}{||w||}</script><p>好了，有了距离公式之后我们可以计算一下两类样本到超平面的边界距离之和了。假设有正类的边界样本$x_+$和负类边界样本$x_-$, 距离之和为</p>\n<script type=\"math/tex; mode=display\">\\gamma_+ + \\gamma_- = \\frac{w^T(x_+ - x_-)}{||w||} \\tag{5}</script><p>我们观察一下式子(5)，在给定样本之后，由于分母$||w||$的存在，消除了参数向量$w$的<em>模长</em>的影响, $\\frac{w}{||w||}$相当于一个方向与$w$同向的单位向量。于是我们只需要关注参数向量$w$的方向，而不需要关注其长度，从另一个角度来说，我们可以对$w$进行任意倍数的缩放而不会影响超平面。于是我们可以随意地令：</p>\n<script type=\"math/tex; mode=display\">\n    \\begin{cases}\n        \\quad w^T(x_+-x_-)=2 \\\\\n        \\quad w^Tx_+ + b = 1 \\\\\n        \\quad w^Tx_- + b = -1\n    \\end{cases}</script><p>这并没有什么难以理解的，因为不管$w$和$b$的方向如何，我们总是可以对其进行缩放使得上述等式成立。这样由于正负类边界到超平面的距离都缩放到了$1$，式子(5)改写成</p>\n<script type=\"math/tex; mode=display\">\n\\gamma_+ + \\gamma_- = \\frac{2}{||w||} \\tag{6}</script><p>于是约束(1)也需要改写成</p>\n<script type=\"math/tex; mode=display\">\ny(w^Tx+b) \\ge 1 \\tag{7}</script><p>于是式子(6)和(7)构成了我们的优化目标与约束：</p>\n<p>又由于最大化$\\frac{2}{||w||}$与最小化$\\frac{||w||^2}{2}$是等价的，而后者可以得到一个更规整的导数，方便后续处理，所以我们把上述的优化问题重写为:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{cases}\n    \\quad \\underset{w,b}{\\arg \\min} \\frac{||w||^2}{2} \\\\\n    \\quad s.t. \\quad y_i(w^Tx_i + b) \\ge 1, \\quad i = (1, 2, 3, ...m)\n\\end{cases} \\tag{8}</script><p>其实我们重新审视一下式子(8), 约束条件未免太过严格，实际上大多数数据都很少存在这样完美的线性可分的条件，于是我们打算放宽一点限制: 不严格要求对每个样本都满足约束条件$y_i(w^Tx_i + b) \\ge 1$，而是允许一定程度地违反该约束，并且违反程度通过$max(0, 1 - y_i(w^Tx_i+b))$来量化并且作为一个正则化项加入到优化目标当中。于是式子(8)进一步写成</p>\n<script type=\"math/tex; mode=display\">\n\\underset{w,b}{\\arg \\min} \\frac{||w||^2}{2} + C\\sum_{i=1}^m{max(0, 1-y_i(w^Tx_i+b))} \\tag{9}</script><p>现在看一看式子(9),很遗憾，由于含有非线性且不连续的部分，导致式子(9)也难以求解，于是我们只能寻求新的方法。好在这类问题前人们已经研究过了，解决的办法称之为:<strong>松弛变量法</strong>。在最优化领域，如果我们的约束函数全为’$\\ge$’或者’$\\le$’条件时，我们希望对满足约束的样本保持原有的约束，而对那些不满足约束的样本适当放松约束(边界变得松弛了)，并且将放松的程度作为一个惩罚量加入最优化目标函数中，这样我们就可以在更大的可行域中去最优化目标函数。在这里的做法是将约束$y_i(w^Tx_i+b) \\ge 1$放松到$y_i(w^Tx_i + b) \\ge 1-\\xi_i$并且将$\\xi_i$作为一个惩罚量加入目标函数中去，根据这个想法得到的优化目标与约束为</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n    & \\underset{w,b,\\xi_i}{\\arg \\min} \\frac{||w||^2}{2} + C\\sum_{i=0}^m\\xi_i \\\\\n    s.t.\n    & \\begin{cases}\n        y_i(w^Tx_i + b) \\ge 1-\\xi_i, \\quad i = (1, 2, 3...,m) \\\\\n        \\xi_i \\ge 0, \\quad i = (i, 2, 3...,m)\n    \\end{cases}\n\\end{aligned} \\tag{10}</script><p>以上式子就是SVM的带约束优化目标了，解决式$(10)$的方式有很多，一般通用的做法是通过拉格朗日乘子法将带约束问题转换为无约束的最优化问题，从而能够利用梯度下降，坐标上升法等迭代算法来求解。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SVM-优化问题的导出\"><a href=\"#SVM-优化问题的导出\" class=\"headerlink\" title=\"SVM - 优化问题的导出\"></a>SVM - 优化问题的导出</h1><p>svm的想法其实非常朴素：</p>\n<ul>\n<li>寻找一个超平面来将所有样本正确分开 (条件1)</li>\n<li>并且保证超平面到两类样本的边界到超平面的距离和最大且相等 (条件2)</li>\n</ul>\n<p>条件一其实就是线性可分的条件，条件二是为了保证鲁棒性，保证两类样本到超平面的距离最大，就相当于保留了判断时的裕量，这样即使数据有噪声，只要噪声不是太过于离谱，都不会产生误判，而保证两类样本边界到超平面距离相等则是为了不偏向某一方。</p>\n<p>用图来直观地感受下上面两条约束，svm模型图示如下：</p>\n<p><img src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQud2lraW1lZGlhLm9yZy93aWtpcGVkaWEvY29tbW9ucy90aHVtYi83LzcyL1NWTV9tYXJnaW4ucG5nLzMwMHB4LVNWTV9tYXJnaW4ucG5n\" alt=\"svm模型\"></p>\n<p>现在我们可以用数学的方式来描述这两个想法。</p>\n<p>对于约束一，假设有一个超平面$w^Tx+b=0$可以将两类样本分开，那么对于正类样本$x_p$来说必然有$w^Tx_p+b &gt; 0$；同样地，对于负类样本$x_n$来说也会有$w^Tx_n + b &lt; 0$。如果我们让正类样本标签为$y_p=+1$而负类样本标签为$y_p=-1$，那么我们可以统一描述为</p>\n<script type=\"math/tex; mode=display\">y(w^Tx+b) > 0 \\tag{1}</script><p>现在我们来看<strong>条件2</strong>。</p>\n<p>为了对条件2进行建模，我们首先要求空间中任意一点到超平面$w^Tx+b=0$的距离。现在我们假设有一点$x_1$，它到超平面的距离$\\gamma$可以写做</p>\n<script type=\"math/tex; mode=display\">\\gamma=|w^Tx_1+b| \\tag{2}</script><p>这个公式怎么来的呢？我们可以假设点$x_1$在超平面上的投影为$x_0$,那么从$x_1$指向$x_0$的这个向量就等于$x_1 - x_0$，同时这个向量的方向与超平面的法向量是一致的，我们把超平面化为$\\frac{w^Tx+b}{||w||} = 0$,可以得到法向量$\\frac{w}{||w||}$,所以我们可以得出</p>\n<script type=\"math/tex; mode=display\">\\frac{\\gamma w}{||w||} = x_1 - x_0 \\tag{3}</script><p>其中$\\gamma$就是点$x_1$到超平面的距离。式子(3)简单地做一下变形就可以得到式子(4)</p>\n<script type=\"math/tex; mode=display\">\\frac{\\gamma w^Tw}{||w||} = w^T(x_1 - x_0) + b - b = w^Tx_1 + b - (w^Tx_0 + b) \\tag{4}</script><p>因为$x_0$是超平面$w^Tx + b = 0$上面的点，也就意味着$w^Tx_0 + b = 0$,这样如果只看距离的大小而不看方向的话，式子(4)就可以化为</p>\n<script type=\"math/tex; mode=display\">\\gamma  = \\frac{|w^Tx_1+b|}{||w||}</script><p>好了，有了距离公式之后我们可以计算一下两类样本到超平面的边界距离之和了。假设有正类的边界样本$x_+$和负类边界样本$x_-$, 距离之和为</p>\n<script type=\"math/tex; mode=display\">\\gamma_+ + \\gamma_- = \\frac{w^T(x_+ - x_-)}{||w||} \\tag{5}</script><p>我们观察一下式子(5)，在给定样本之后，由于分母$||w||$的存在，消除了参数向量$w$的<em>模长</em>的影响, $\\frac{w}{||w||}$相当于一个方向与$w$同向的单位向量。于是我们只需要关注参数向量$w$的方向，而不需要关注其长度，从另一个角度来说，我们可以对$w$进行任意倍数的缩放而不会影响超平面。于是我们可以随意地令：</p>\n<script type=\"math/tex; mode=display\">\n    \\begin{cases}\n        \\quad w^T(x_+-x_-)=2 \\\\\n        \\quad w^Tx_+ + b = 1 \\\\\n        \\quad w^Tx_- + b = -1\n    \\end{cases}</script><p>这并没有什么难以理解的，因为不管$w$和$b$的方向如何，我们总是可以对其进行缩放使得上述等式成立。这样由于正负类边界到超平面的距离都缩放到了$1$，式子(5)改写成</p>\n<script type=\"math/tex; mode=display\">\n\\gamma_+ + \\gamma_- = \\frac{2}{||w||} \\tag{6}</script><p>于是约束(1)也需要改写成</p>\n<script type=\"math/tex; mode=display\">\ny(w^Tx+b) \\ge 1 \\tag{7}</script><p>于是式子(6)和(7)构成了我们的优化目标与约束：</p>\n<p>又由于最大化$\\frac{2}{||w||}$与最小化$\\frac{||w||^2}{2}$是等价的，而后者可以得到一个更规整的导数，方便后续处理，所以我们把上述的优化问题重写为:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{cases}\n    \\quad \\underset{w,b}{\\arg \\min} \\frac{||w||^2}{2} \\\\\n    \\quad s.t. \\quad y_i(w^Tx_i + b) \\ge 1, \\quad i = (1, 2, 3, ...m)\n\\end{cases} \\tag{8}</script><p>其实我们重新审视一下式子(8), 约束条件未免太过严格，实际上大多数数据都很少存在这样完美的线性可分的条件，于是我们打算放宽一点限制: 不严格要求对每个样本都满足约束条件$y_i(w^Tx_i + b) \\ge 1$，而是允许一定程度地违反该约束，并且违反程度通过$max(0, 1 - y_i(w^Tx_i+b))$来量化并且作为一个正则化项加入到优化目标当中。于是式子(8)进一步写成</p>\n<script type=\"math/tex; mode=display\">\n\\underset{w,b}{\\arg \\min} \\frac{||w||^2}{2} + C\\sum_{i=1}^m{max(0, 1-y_i(w^Tx_i+b))} \\tag{9}</script><p>现在看一看式子(9),很遗憾，由于含有非线性且不连续的部分，导致式子(9)也难以求解，于是我们只能寻求新的方法。好在这类问题前人们已经研究过了，解决的办法称之为:<strong>松弛变量法</strong>。在最优化领域，如果我们的约束函数全为’$\\ge$’或者’$\\le$’条件时，我们希望对满足约束的样本保持原有的约束，而对那些不满足约束的样本适当放松约束(边界变得松弛了)，并且将放松的程度作为一个惩罚量加入最优化目标函数中，这样我们就可以在更大的可行域中去最优化目标函数。在这里的做法是将约束$y_i(w^Tx_i+b) \\ge 1$放松到$y_i(w^Tx_i + b) \\ge 1-\\xi_i$并且将$\\xi_i$作为一个惩罚量加入目标函数中去，根据这个想法得到的优化目标与约束为</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n    & \\underset{w,b,\\xi_i}{\\arg \\min} \\frac{||w||^2}{2} + C\\sum_{i=0}^m\\xi_i \\\\\n    s.t.\n    & \\begin{cases}\n        y_i(w^Tx_i + b) \\ge 1-\\xi_i, \\quad i = (1, 2, 3...,m) \\\\\n        \\xi_i \\ge 0, \\quad i = (i, 2, 3...,m)\n    \\end{cases}\n\\end{aligned} \\tag{10}</script><p>以上式子就是SVM的带约束优化目标了，解决式$(10)$的方式有很多，一般通用的做法是通过拉格朗日乘子法将带约束问题转换为无约束的最优化问题，从而能够利用梯度下降，坐标上升法等迭代算法来求解。</p>\n"},{"title":"在Qt中实现数字音频均衡器","date":"2019-07-12T01:06:56.000Z","mathjax":true,"_content":"\n# Qt实现数字音频均衡器\n\n在实现音频播放器的时候，我们常常需要一个均衡器来调节各个频段的增益，就是我们平常说的调**重低音**。一个数字均衡器的架构通常都如图所示：\n![数字均衡器](filter.png)\n\n从图中可以看到，这里的数字均衡器实际上就是三个滤波器，各个滤波器分别负责不同频段的音频调节，这三个滤波器叫做滤波器组。当然一个数字滤波器组也不一定只有三个滤波器，理论上来说可以有任意多个滤波器，而且滤波器越多，能调整的也就越精细。\n\n从物理上来说人类听觉的频率范围在0~20kHZ这个范围，于是我们定义三个频段：[0,Hz 400Hz], [400, 2000HZ], [2000Hz, 无穷]，分别为低音，中音和高音。于是我们只需要设计出来一个[0, 400Hz]的低通滤波器，一个[400, 2000Hz]的带通滤波器，以及一个[2000Hz，无穷]的高通滤波器就可以组成一个均衡器了。当然本文并不是讨论如何设计滤波器的，这是一个复杂的数学推导过程，有兴趣的可以来信探讨。另外，我已经设计好了这三个滤波器，文末会附上代码。\n\n好了，现在我们有了思路了，来看看如何在Qt中实现这个想法。首先最重要的是提供这个滤波器组，一个滤波器组大概长这样：\n```cpp\nclass EQFilterGroup\n{\npublic:\n    /*参数： 低音增益， 中音增益， 高音增益*/\n    EQFilterGroup(float const lowGain, float const midGain, float const highGain);\n    /*setter and getter here*/\t\n    virtual QBuffer* filter(QAudioBuffer const& buffer);\n}\n```\n这个类提供一个接口，这个接口输入一个音频帧(`QBuffer`)，然后输出滤波后的音频帧。\n\n然后我们看一下Qt中如何播放一个音频流：\n\n```cpp\n\t  QFile sourceFile;\n      QAudioOutput *audio = new QAudioOutput(this);\n      sourceFile.setFileName(\"/tmp/test.raw\");\n      sourceFile.open(QIODevice::ReadOnly);\n\n      QAudioFormat format;\n      format.setSampleRate(8000);\n      format.setChannelCount(1);\n      format.setSampleSize(8);\n      format.setCodec(\"audio/pcm\");\n      format.setByteOrder(QAudioFormat::LittleEndian);\n      format.setSampleType(QAudioFormat::UnSignedInt);\n\n      QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());\n      if (!info.isFormatSupported(format)) {\n          qWarning() << \"Raw audio format not supported by backend, cannot play audio.\";\n          return;\n      }\n\n      audio = new QAudioOutput(format, this);\n      audio->start(&sourceFile);  \n```\n\n其实非常简单，只需要给`QAudioOutput`这个组件设置好播放的音频格式参数，然后提供一个音频流就可以播放这个音频流了，在Qt里面所有的数据流都被抽象称为了`QIODevice`, 当然音频流也不例外，代码片段中的`sourceFile`就是一个音频文件数据流，它是`QIODevice`的子类。\n于是现在的问题是： 我们如何将`EQFilterGroup`整合到上述代码当中？如果我们能把滤波器组伪装成一个像上面代码里`sourceFile`的文件一样就好了，那么`QAudioOutput`就可以直接读取滤波器组滤波后的数据流了。这里我们可以使用[适配器模式](https://mp.csdn.net/mdeditor/50808990#)来帮助我们完成这一个伪装。根据适配器模式的做法，我们只需要继承`QIODevice`然后实现对应的接口并且集成`EQFilterGroup`的滤波功能就可以实现一个**可以滤波的`QIODevice` 了**。大概代码如下：\n\n```cpp\nclass AudioBufferDevice : public QIODevice\n{\n    Q_OBJECT\npublic:\n    explicit AudioBufferDevice(QAudioDecoder *decoder, EQFilterGroup* filter, QObject *parent = nullptr);\n    virtual bool atEnd() const override;\n    virtual qint64 bytesAvailable() const override;\n\nprotected:\n    virtual qint64 readData(char* data, qint64 size) override;\n    virtual qint64 writeData(const char *data, qint64 maxSize);\n    \nprivate:\n    QAudioDecoder* _decoder;\n    QQueue<QBuffer*> _queue;\n    QQueue<QAudioBuffer*> _abuffer_queue;\n    EQFilterGroup* _filter;\n    bool _isFinished;\n};\n```\n\n由于我们需要播放的是mp3文件，所以我们首先要通过`QAudioDecoder`来将mp3文件解码成音频帧，然后将音频帧输入滤波器组，滤波器组将滤波后的音频帧写入一个FIFO缓冲区内，并且通过`QIODevice::readData`接口向外界提供这些滤波后音频帧的数据流。当然，出于性能考虑，从`QAudioDecoder`解码到`EQFilterGroup`将滤波后数据写入缓冲池这一个过程也可以放入另一个线程中进行。\n\n这样完成了上述的类之后，我们就可以实现一个**低音炮**播放器了：\n\n```cpp\n\t  EQFilterGroup* filter = new EQFilterGroup(2.0, 0.5, 0.5); //放大低音2倍, 中音高音弱化为1/2\n\t  QAudioDecoder* decoder = new QAudioDecoder(this);\n      decoder->setSourceFilename(\"/tmp/test.raw\");\n      QAudioFormat format;\n      format.setSampleRate(8000);\n      format.setChannelCount(1);\n      format.setSampleSize(8);\n      format.setCodec(\"audio/pcm\");\n      format.setByteOrder(QAudioFormat::LittleEndian);\n      format.setSampleType(QAudioFormat::UnSignedInt);\n      decoder->setAudioFormat(format);\n\n\t  QIODevice *device = new AudioBufferDevice(decoder, filter);\n\t  device->open(QIODevice::ReadOnly);\n\t  \n      QAudioOutput *audio = new QAudioOutput(this);\n      QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());\n      if (!info.isFormatSupported(format)) {\n          qWarning() << \"Raw audio format not supported by backend, cannot play audio.\";\n          return;\n      }\n\n      audio = new QAudioOutput(format, this);\n      audio->start(device);  \n```\n\n以上就是在Qt中实现数字音频均衡器的全部啦，完整的代码在这里[Qt实现数字音频均衡器](https://github.com/EmbolismSoil/EQFilterGroup)","source":"_posts/在Qt中实现数字音频均衡器.md","raw":"---\ntitle: 在Qt中实现数字音频均衡器\ndate: 2019-07-12 01:06:56\ntags: [C++, Qt, 音频算法]\nmathjax: true\ncategories: [Qt]\n---\n\n# Qt实现数字音频均衡器\n\n在实现音频播放器的时候，我们常常需要一个均衡器来调节各个频段的增益，就是我们平常说的调**重低音**。一个数字均衡器的架构通常都如图所示：\n![数字均衡器](filter.png)\n\n从图中可以看到，这里的数字均衡器实际上就是三个滤波器，各个滤波器分别负责不同频段的音频调节，这三个滤波器叫做滤波器组。当然一个数字滤波器组也不一定只有三个滤波器，理论上来说可以有任意多个滤波器，而且滤波器越多，能调整的也就越精细。\n\n从物理上来说人类听觉的频率范围在0~20kHZ这个范围，于是我们定义三个频段：[0,Hz 400Hz], [400, 2000HZ], [2000Hz, 无穷]，分别为低音，中音和高音。于是我们只需要设计出来一个[0, 400Hz]的低通滤波器，一个[400, 2000Hz]的带通滤波器，以及一个[2000Hz，无穷]的高通滤波器就可以组成一个均衡器了。当然本文并不是讨论如何设计滤波器的，这是一个复杂的数学推导过程，有兴趣的可以来信探讨。另外，我已经设计好了这三个滤波器，文末会附上代码。\n\n好了，现在我们有了思路了，来看看如何在Qt中实现这个想法。首先最重要的是提供这个滤波器组，一个滤波器组大概长这样：\n```cpp\nclass EQFilterGroup\n{\npublic:\n    /*参数： 低音增益， 中音增益， 高音增益*/\n    EQFilterGroup(float const lowGain, float const midGain, float const highGain);\n    /*setter and getter here*/\t\n    virtual QBuffer* filter(QAudioBuffer const& buffer);\n}\n```\n这个类提供一个接口，这个接口输入一个音频帧(`QBuffer`)，然后输出滤波后的音频帧。\n\n然后我们看一下Qt中如何播放一个音频流：\n\n```cpp\n\t  QFile sourceFile;\n      QAudioOutput *audio = new QAudioOutput(this);\n      sourceFile.setFileName(\"/tmp/test.raw\");\n      sourceFile.open(QIODevice::ReadOnly);\n\n      QAudioFormat format;\n      format.setSampleRate(8000);\n      format.setChannelCount(1);\n      format.setSampleSize(8);\n      format.setCodec(\"audio/pcm\");\n      format.setByteOrder(QAudioFormat::LittleEndian);\n      format.setSampleType(QAudioFormat::UnSignedInt);\n\n      QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());\n      if (!info.isFormatSupported(format)) {\n          qWarning() << \"Raw audio format not supported by backend, cannot play audio.\";\n          return;\n      }\n\n      audio = new QAudioOutput(format, this);\n      audio->start(&sourceFile);  \n```\n\n其实非常简单，只需要给`QAudioOutput`这个组件设置好播放的音频格式参数，然后提供一个音频流就可以播放这个音频流了，在Qt里面所有的数据流都被抽象称为了`QIODevice`, 当然音频流也不例外，代码片段中的`sourceFile`就是一个音频文件数据流，它是`QIODevice`的子类。\n于是现在的问题是： 我们如何将`EQFilterGroup`整合到上述代码当中？如果我们能把滤波器组伪装成一个像上面代码里`sourceFile`的文件一样就好了，那么`QAudioOutput`就可以直接读取滤波器组滤波后的数据流了。这里我们可以使用[适配器模式](https://mp.csdn.net/mdeditor/50808990#)来帮助我们完成这一个伪装。根据适配器模式的做法，我们只需要继承`QIODevice`然后实现对应的接口并且集成`EQFilterGroup`的滤波功能就可以实现一个**可以滤波的`QIODevice` 了**。大概代码如下：\n\n```cpp\nclass AudioBufferDevice : public QIODevice\n{\n    Q_OBJECT\npublic:\n    explicit AudioBufferDevice(QAudioDecoder *decoder, EQFilterGroup* filter, QObject *parent = nullptr);\n    virtual bool atEnd() const override;\n    virtual qint64 bytesAvailable() const override;\n\nprotected:\n    virtual qint64 readData(char* data, qint64 size) override;\n    virtual qint64 writeData(const char *data, qint64 maxSize);\n    \nprivate:\n    QAudioDecoder* _decoder;\n    QQueue<QBuffer*> _queue;\n    QQueue<QAudioBuffer*> _abuffer_queue;\n    EQFilterGroup* _filter;\n    bool _isFinished;\n};\n```\n\n由于我们需要播放的是mp3文件，所以我们首先要通过`QAudioDecoder`来将mp3文件解码成音频帧，然后将音频帧输入滤波器组，滤波器组将滤波后的音频帧写入一个FIFO缓冲区内，并且通过`QIODevice::readData`接口向外界提供这些滤波后音频帧的数据流。当然，出于性能考虑，从`QAudioDecoder`解码到`EQFilterGroup`将滤波后数据写入缓冲池这一个过程也可以放入另一个线程中进行。\n\n这样完成了上述的类之后，我们就可以实现一个**低音炮**播放器了：\n\n```cpp\n\t  EQFilterGroup* filter = new EQFilterGroup(2.0, 0.5, 0.5); //放大低音2倍, 中音高音弱化为1/2\n\t  QAudioDecoder* decoder = new QAudioDecoder(this);\n      decoder->setSourceFilename(\"/tmp/test.raw\");\n      QAudioFormat format;\n      format.setSampleRate(8000);\n      format.setChannelCount(1);\n      format.setSampleSize(8);\n      format.setCodec(\"audio/pcm\");\n      format.setByteOrder(QAudioFormat::LittleEndian);\n      format.setSampleType(QAudioFormat::UnSignedInt);\n      decoder->setAudioFormat(format);\n\n\t  QIODevice *device = new AudioBufferDevice(decoder, filter);\n\t  device->open(QIODevice::ReadOnly);\n\t  \n      QAudioOutput *audio = new QAudioOutput(this);\n      QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());\n      if (!info.isFormatSupported(format)) {\n          qWarning() << \"Raw audio format not supported by backend, cannot play audio.\";\n          return;\n      }\n\n      audio = new QAudioOutput(format, this);\n      audio->start(device);  \n```\n\n以上就是在Qt中实现数字音频均衡器的全部啦，完整的代码在这里[Qt实现数字音频均衡器](https://github.com/EmbolismSoil/EQFilterGroup)","slug":"在Qt中实现数字音频均衡器","published":1,"updated":"2020-04-12T13:22:37.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8x40siq0001q69pe2nhfv6k","content":"<h1 id=\"Qt实现数字音频均衡器\"><a href=\"#Qt实现数字音频均衡器\" class=\"headerlink\" title=\"Qt实现数字音频均衡器\"></a>Qt实现数字音频均衡器</h1><p>在实现音频播放器的时候，我们常常需要一个均衡器来调节各个频段的增益，就是我们平常说的调<strong>重低音</strong>。一个数字均衡器的架构通常都如图所示：<br><img src=\"filter.png\" alt=\"数字均衡器\"></p>\n<p>从图中可以看到，这里的数字均衡器实际上就是三个滤波器，各个滤波器分别负责不同频段的音频调节，这三个滤波器叫做滤波器组。当然一个数字滤波器组也不一定只有三个滤波器，理论上来说可以有任意多个滤波器，而且滤波器越多，能调整的也就越精细。</p>\n<p>从物理上来说人类听觉的频率范围在0~20kHZ这个范围，于是我们定义三个频段：[0,Hz 400Hz], [400, 2000HZ], [2000Hz, 无穷]，分别为低音，中音和高音。于是我们只需要设计出来一个[0, 400Hz]的低通滤波器，一个[400, 2000Hz]的带通滤波器，以及一个[2000Hz，无穷]的高通滤波器就可以组成一个均衡器了。当然本文并不是讨论如何设计滤波器的，这是一个复杂的数学推导过程，有兴趣的可以来信探讨。另外，我已经设计好了这三个滤波器，文末会附上代码。</p>\n<p>好了，现在我们有了思路了，来看看如何在Qt中实现这个想法。首先最重要的是提供这个滤波器组，一个滤波器组大概长这样：</p>\n<pre><code class=\"lang-cpp\">class EQFilterGroup\n{\npublic:\n    /*参数： 低音增益， 中音增益， 高音增益*/\n    EQFilterGroup(float const lowGain, float const midGain, float const highGain);\n    /*setter and getter here*/    \n    virtual QBuffer* filter(QAudioBuffer const&amp; buffer);\n}\n</code></pre>\n<p>这个类提供一个接口，这个接口输入一个音频帧(<code>QBuffer</code>)，然后输出滤波后的音频帧。</p>\n<p>然后我们看一下Qt中如何播放一个音频流：</p>\n<pre><code class=\"lang-cpp\">      QFile sourceFile;\n      QAudioOutput *audio = new QAudioOutput(this);\n      sourceFile.setFileName(&quot;/tmp/test.raw&quot;);\n      sourceFile.open(QIODevice::ReadOnly);\n\n      QAudioFormat format;\n      format.setSampleRate(8000);\n      format.setChannelCount(1);\n      format.setSampleSize(8);\n      format.setCodec(&quot;audio/pcm&quot;);\n      format.setByteOrder(QAudioFormat::LittleEndian);\n      format.setSampleType(QAudioFormat::UnSignedInt);\n\n      QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());\n      if (!info.isFormatSupported(format)) {\n          qWarning() &lt;&lt; &quot;Raw audio format not supported by backend, cannot play audio.&quot;;\n          return;\n      }\n\n      audio = new QAudioOutput(format, this);\n      audio-&gt;start(&amp;sourceFile);\n</code></pre>\n<p>其实非常简单，只需要给<code>QAudioOutput</code>这个组件设置好播放的音频格式参数，然后提供一个音频流就可以播放这个音频流了，在Qt里面所有的数据流都被抽象称为了<code>QIODevice</code>, 当然音频流也不例外，代码片段中的<code>sourceFile</code>就是一个音频文件数据流，它是<code>QIODevice</code>的子类。<br>于是现在的问题是： 我们如何将<code>EQFilterGroup</code>整合到上述代码当中？如果我们能把滤波器组伪装成一个像上面代码里<code>sourceFile</code>的文件一样就好了，那么<code>QAudioOutput</code>就可以直接读取滤波器组滤波后的数据流了。这里我们可以使用<a href=\"https://mp.csdn.net/mdeditor/50808990#\" target=\"_blank\" rel=\"noopener\">适配器模式</a>来帮助我们完成这一个伪装。根据适配器模式的做法，我们只需要继承<code>QIODevice</code>然后实现对应的接口并且集成<code>EQFilterGroup</code>的滤波功能就可以实现一个<strong>可以滤波的<code>QIODevice</code> 了</strong>。大概代码如下：</p>\n<pre><code class=\"lang-cpp\">class AudioBufferDevice : public QIODevice\n{\n    Q_OBJECT\npublic:\n    explicit AudioBufferDevice(QAudioDecoder *decoder, EQFilterGroup* filter, QObject *parent = nullptr);\n    virtual bool atEnd() const override;\n    virtual qint64 bytesAvailable() const override;\n\nprotected:\n    virtual qint64 readData(char* data, qint64 size) override;\n    virtual qint64 writeData(const char *data, qint64 maxSize);\n\nprivate:\n    QAudioDecoder* _decoder;\n    QQueue&lt;QBuffer*&gt; _queue;\n    QQueue&lt;QAudioBuffer*&gt; _abuffer_queue;\n    EQFilterGroup* _filter;\n    bool _isFinished;\n};\n</code></pre>\n<p>由于我们需要播放的是mp3文件，所以我们首先要通过<code>QAudioDecoder</code>来将mp3文件解码成音频帧，然后将音频帧输入滤波器组，滤波器组将滤波后的音频帧写入一个FIFO缓冲区内，并且通过<code>QIODevice::readData</code>接口向外界提供这些滤波后音频帧的数据流。当然，出于性能考虑，从<code>QAudioDecoder</code>解码到<code>EQFilterGroup</code>将滤波后数据写入缓冲池这一个过程也可以放入另一个线程中进行。</p>\n<p>这样完成了上述的类之后，我们就可以实现一个<strong>低音炮</strong>播放器了：</p>\n<pre><code class=\"lang-cpp\">      EQFilterGroup* filter = new EQFilterGroup(2.0, 0.5, 0.5); //放大低音2倍, 中音高音弱化为1/2\n      QAudioDecoder* decoder = new QAudioDecoder(this);\n      decoder-&gt;setSourceFilename(&quot;/tmp/test.raw&quot;);\n      QAudioFormat format;\n      format.setSampleRate(8000);\n      format.setChannelCount(1);\n      format.setSampleSize(8);\n      format.setCodec(&quot;audio/pcm&quot;);\n      format.setByteOrder(QAudioFormat::LittleEndian);\n      format.setSampleType(QAudioFormat::UnSignedInt);\n      decoder-&gt;setAudioFormat(format);\n\n      QIODevice *device = new AudioBufferDevice(decoder, filter);\n      device-&gt;open(QIODevice::ReadOnly);\n\n      QAudioOutput *audio = new QAudioOutput(this);\n      QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());\n      if (!info.isFormatSupported(format)) {\n          qWarning() &lt;&lt; &quot;Raw audio format not supported by backend, cannot play audio.&quot;;\n          return;\n      }\n\n      audio = new QAudioOutput(format, this);\n      audio-&gt;start(device);\n</code></pre>\n<p>以上就是在Qt中实现数字音频均衡器的全部啦，完整的代码在这里<a href=\"https://github.com/EmbolismSoil/EQFilterGroup\" target=\"_blank\" rel=\"noopener\">Qt实现数字音频均衡器</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Qt实现数字音频均衡器\"><a href=\"#Qt实现数字音频均衡器\" class=\"headerlink\" title=\"Qt实现数字音频均衡器\"></a>Qt实现数字音频均衡器</h1><p>在实现音频播放器的时候，我们常常需要一个均衡器来调节各个频段的增益，就是我们平常说的调<strong>重低音</strong>。一个数字均衡器的架构通常都如图所示：<br><img src=\"filter.png\" alt=\"数字均衡器\"></p>\n<p>从图中可以看到，这里的数字均衡器实际上就是三个滤波器，各个滤波器分别负责不同频段的音频调节，这三个滤波器叫做滤波器组。当然一个数字滤波器组也不一定只有三个滤波器，理论上来说可以有任意多个滤波器，而且滤波器越多，能调整的也就越精细。</p>\n<p>从物理上来说人类听觉的频率范围在0~20kHZ这个范围，于是我们定义三个频段：[0,Hz 400Hz], [400, 2000HZ], [2000Hz, 无穷]，分别为低音，中音和高音。于是我们只需要设计出来一个[0, 400Hz]的低通滤波器，一个[400, 2000Hz]的带通滤波器，以及一个[2000Hz，无穷]的高通滤波器就可以组成一个均衡器了。当然本文并不是讨论如何设计滤波器的，这是一个复杂的数学推导过程，有兴趣的可以来信探讨。另外，我已经设计好了这三个滤波器，文末会附上代码。</p>\n<p>好了，现在我们有了思路了，来看看如何在Qt中实现这个想法。首先最重要的是提供这个滤波器组，一个滤波器组大概长这样：</p>\n<pre><code class=\"lang-cpp\">class EQFilterGroup\n{\npublic:\n    /*参数： 低音增益， 中音增益， 高音增益*/\n    EQFilterGroup(float const lowGain, float const midGain, float const highGain);\n    /*setter and getter here*/    \n    virtual QBuffer* filter(QAudioBuffer const&amp; buffer);\n}\n</code></pre>\n<p>这个类提供一个接口，这个接口输入一个音频帧(<code>QBuffer</code>)，然后输出滤波后的音频帧。</p>\n<p>然后我们看一下Qt中如何播放一个音频流：</p>\n<pre><code class=\"lang-cpp\">      QFile sourceFile;\n      QAudioOutput *audio = new QAudioOutput(this);\n      sourceFile.setFileName(&quot;/tmp/test.raw&quot;);\n      sourceFile.open(QIODevice::ReadOnly);\n\n      QAudioFormat format;\n      format.setSampleRate(8000);\n      format.setChannelCount(1);\n      format.setSampleSize(8);\n      format.setCodec(&quot;audio/pcm&quot;);\n      format.setByteOrder(QAudioFormat::LittleEndian);\n      format.setSampleType(QAudioFormat::UnSignedInt);\n\n      QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());\n      if (!info.isFormatSupported(format)) {\n          qWarning() &lt;&lt; &quot;Raw audio format not supported by backend, cannot play audio.&quot;;\n          return;\n      }\n\n      audio = new QAudioOutput(format, this);\n      audio-&gt;start(&amp;sourceFile);\n</code></pre>\n<p>其实非常简单，只需要给<code>QAudioOutput</code>这个组件设置好播放的音频格式参数，然后提供一个音频流就可以播放这个音频流了，在Qt里面所有的数据流都被抽象称为了<code>QIODevice</code>, 当然音频流也不例外，代码片段中的<code>sourceFile</code>就是一个音频文件数据流，它是<code>QIODevice</code>的子类。<br>于是现在的问题是： 我们如何将<code>EQFilterGroup</code>整合到上述代码当中？如果我们能把滤波器组伪装成一个像上面代码里<code>sourceFile</code>的文件一样就好了，那么<code>QAudioOutput</code>就可以直接读取滤波器组滤波后的数据流了。这里我们可以使用<a href=\"https://mp.csdn.net/mdeditor/50808990#\" target=\"_blank\" rel=\"noopener\">适配器模式</a>来帮助我们完成这一个伪装。根据适配器模式的做法，我们只需要继承<code>QIODevice</code>然后实现对应的接口并且集成<code>EQFilterGroup</code>的滤波功能就可以实现一个<strong>可以滤波的<code>QIODevice</code> 了</strong>。大概代码如下：</p>\n<pre><code class=\"lang-cpp\">class AudioBufferDevice : public QIODevice\n{\n    Q_OBJECT\npublic:\n    explicit AudioBufferDevice(QAudioDecoder *decoder, EQFilterGroup* filter, QObject *parent = nullptr);\n    virtual bool atEnd() const override;\n    virtual qint64 bytesAvailable() const override;\n\nprotected:\n    virtual qint64 readData(char* data, qint64 size) override;\n    virtual qint64 writeData(const char *data, qint64 maxSize);\n\nprivate:\n    QAudioDecoder* _decoder;\n    QQueue&lt;QBuffer*&gt; _queue;\n    QQueue&lt;QAudioBuffer*&gt; _abuffer_queue;\n    EQFilterGroup* _filter;\n    bool _isFinished;\n};\n</code></pre>\n<p>由于我们需要播放的是mp3文件，所以我们首先要通过<code>QAudioDecoder</code>来将mp3文件解码成音频帧，然后将音频帧输入滤波器组，滤波器组将滤波后的音频帧写入一个FIFO缓冲区内，并且通过<code>QIODevice::readData</code>接口向外界提供这些滤波后音频帧的数据流。当然，出于性能考虑，从<code>QAudioDecoder</code>解码到<code>EQFilterGroup</code>将滤波后数据写入缓冲池这一个过程也可以放入另一个线程中进行。</p>\n<p>这样完成了上述的类之后，我们就可以实现一个<strong>低音炮</strong>播放器了：</p>\n<pre><code class=\"lang-cpp\">      EQFilterGroup* filter = new EQFilterGroup(2.0, 0.5, 0.5); //放大低音2倍, 中音高音弱化为1/2\n      QAudioDecoder* decoder = new QAudioDecoder(this);\n      decoder-&gt;setSourceFilename(&quot;/tmp/test.raw&quot;);\n      QAudioFormat format;\n      format.setSampleRate(8000);\n      format.setChannelCount(1);\n      format.setSampleSize(8);\n      format.setCodec(&quot;audio/pcm&quot;);\n      format.setByteOrder(QAudioFormat::LittleEndian);\n      format.setSampleType(QAudioFormat::UnSignedInt);\n      decoder-&gt;setAudioFormat(format);\n\n      QIODevice *device = new AudioBufferDevice(decoder, filter);\n      device-&gt;open(QIODevice::ReadOnly);\n\n      QAudioOutput *audio = new QAudioOutput(this);\n      QAudioDeviceInfo info(QAudioDeviceInfo::defaultOutputDevice());\n      if (!info.isFormatSupported(format)) {\n          qWarning() &lt;&lt; &quot;Raw audio format not supported by backend, cannot play audio.&quot;;\n          return;\n      }\n\n      audio = new QAudioOutput(format, this);\n      audio-&gt;start(device);\n</code></pre>\n<p>以上就是在Qt中实现数字音频均衡器的全部啦，完整的代码在这里<a href=\"https://github.com/EmbolismSoil/EQFilterGroup\" target=\"_blank\" rel=\"noopener\">Qt实现数字音频均衡器</a></p>\n"},{"title":"平均场变分推断：以混合高斯模型为例","date":"2019-12-15T11:15:29.000Z","mathjax":true,"_content":"\n[TOC]\n\n## 一、贝叶斯推断的工作流\n\n在贝叶斯推断方法中，工作流可以总结为：\n\n1. 根据观察者的知识，做出合理假设，假设数据是如何被生成的\n2. 将数据的生成模型转化为数学模型\n3. 根据数据通过数学方法，求解模型参数\n4. 对新的数据做出预测\n\n![1576379999606](1576379999606.png)\n\n在整个pipeline中，第1点数据的生成过程，这是业务相关的，需要丰富的领域知识。第二点是连接业务领域和数学领域的桥梁，一般称之为数学建模，第3点是存粹的数学步骤，使用数学工具求解模型参数。第4步为业务应用，为业务做出预测和推断结果。\n\n## 二、一个业务例子\n\n下面以一个业务例子来实践这个pipeline。假设在我们的app中总用户数为k，并且在app的数据库中记录了用户每日使用时长的增长量，假设我们没有任何关于用户的唯一id，能观测到的只有增量值: `[-6.04231708, -1.64784446, ..., 1.63898137, -4.29063685, -0.87892713]` ，我们需要做的是为每个用户赋予一个用户id，并且在未来时刻给定某个用户使用时长增量，将这个时长增量归属到其用户id上，如此便可以建立每个用户的使用时长记录，以便在商业上分析用户行为。\n\n首先，于是我们根据业务知识，知道用户产生时长增量记录的过程为：\n\n1. 某个用户$c_k$ 登录系统 \n2. 用户产生一条使用时长增量记录$x_i$,\n\n然后，我们将这个过程建模为数学问题：假设登录到系统上的用户为$k'$的概率是均匀分布的，概率都为$\\frac{1}{k}$，并且用户$k'$生的时长增量为一个随机变量，其符合均值为$u_k$, 标准差为$1$的分布，并且$u_{k}$自身也是符合均值为0，方差为$\\sigma$的高斯分布，特别注意的是$\\sigma$是一个人工设定的超参数，为领域专家根据先验知识调整的。数学化的表述如下:\n$$\n\\begin{aligned} \\mu_{k} & \\sim \\mathcal{N}\\left(0, \\sigma^{2}\\right), & k &=1, \\ldots, K \\\\ c_{i} & \\sim \\operatorname{Categorical}(1 / K, \\ldots, 1 / K), & & i=1, \\ldots, n \\\\ x_{i} | c_{i}, \\mu & \\sim \\mathcal{N}\\left(c_{i}^{\\top} \\mu, 1\\right) & & i=1, \\ldots, n \\end{aligned}\n$$\n其中$c_i$为指示向量，它指明了当前这条数据$x_i$是由哪个用户产生的，假如由用户1产生的，那么对应的指示向量为$c_i=[0,1,0,...,0,0]$，$u$为k维向量，每一维度为$u_k$, 即$u=[u_1, u_2, ..., u_k]$根据上面的描述，我们可以用python代码写出整个数据产生的过程:\n\n```python\ndef gen_data(sigma, k, n):\n    #获取u_k\n    u_k = np.random.normal(0, sigma, k)\n    print(u_k)\n    x = []\n    c = []\n    for i in range(n):\n        ci = random.choice(range(k))\n        c.append(ci)\n        u = u_k[ci]\n        x.append(np.random.normal(u, 1))\n    return x, u_k, c\n```\n\n我们使用这个函数产生$(\\sigma=10, k=10)$实验室数据，采样得到的$u=[-34.59, -30.27, -20.69, -19.65, -8.04, 3.0, 13.79, 14.6, 15.65, 26.56]$, 数据x分布如下图:\n\n![1576417611798](1576417611798.png)\n\n于是我们的目标是根据数据x，去计算得出$u$，然后未来有数据$x'$到来时查看数据与$u_{i\\in k}$的距离，选择距离最近的$i=argmin_{i} dis(u_{i \\in k}, x')$赋予该条数据作为其用户id即可。\n\n## 三、变分推断\n\n上述问题的思路很直接，就是根据条件概率公式，计算$u, c$的后验分布，选择后验概率最大的$u, c$即可\n$$\np(u, c|x)=\\frac{p(u, c, x)}{p(x)} \n$$\nOK， 说干就干，首先根据第二节的数学模型，写出分子部分:\n$$\np(\\mathbf \\mu, \\mathbf{c}, \\mathbf{x})=p(\\mu) \\prod_{i=1}^{n} p\\left(c_{i}\\right) p\\left(x_{i} | c_{i}, \\mu\\right) \\tag{1}\n$$\n然后写出分母部分:\n$$\np(\\mathbf{x})=\\int p(\\boldsymbol{\\mu}) \\prod_{i=1}^{n} \\sum_{c_{i}} p\\left(c_{i}\\right) p\\left(x_{i} | c_{i}, \\mu\\right) \\mathrm{d} \\mu\n$$\n这个问题在于计算$p(x)$存在一个对$u$的多维积分，在这个例子中，有10个用户即意味着10维积分，计算复杂度随着$u$的维度指数增长，在现实世界里$u$的维度小则几千几万，大则千万上亿，计算$p(x)$是现有计算机的计算能力无法完成的，变分推断的出现就是为了解决这个难题。\n\n变分推断的思路是将该问题转换为一个最优化问题，并通过现有高效的最优化方法来进行求解。首先我们将无法观测到的隐藏变量聚拢为$z=(u, c)$，然后使用一个分布$q(z)$来逼近$p(z|x)$，两个分布之间的逼近程度用KL散度来衡量，于是我们的问题被转化成为了一个最小化$KL(q(z)||p(z|x))$的最优化问题，形式化地表述为:\n$$\nq(z)^*=\\mathop{\\arg \\min}_{q(z)} KL(q(z)||p(z|x))\n$$\n我们将KL散度展开为:\n$$\n\\begin {aligned}\n\\operatorname{KL}(q(\\mathbf{z}) \\| p(\\mathbf{z} | \\mathbf{x})) &= \\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z} | \\mathbf{x})] \\\\\n&= \\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z,x})] +\\log p(x)\n\\end {aligned}\n$$\n在最小化的过程中由于$\\log p(x)$难以计算，于是退而求其次，稍作变换最小化目标为$\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z,x})]$, 等同于最大化其取负后的结果，形式化地表述如下:\n$$\nq(z)^*=\\mathop{\\arg \\max}_{q(z)} \\mathbb{E}_{q(z)}[\\log p(\\mathbf{z}, \\mathbf{x})]-\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]\n$$\n上述地优化目标被称之为evidence lower bound ，即ELBO, 国内有翻译为“证据下界”，也有翻译为“变分下界”。换个角度来看ELBO，其实$ELBO(q(z))=\\log p(x) - KL(q(z)||p(z|x))$，因为KL散度的非负性，于是有:\n$$\n\\log p(x) \\ge ELBO(q(z))\n$$\n所以本质上最大化ELBO就是在最大化$\\log p(x)$，这一点在最大似然估计和最大后验估计上思路都是相似的。最后，只要我们最后选择一个参数化的$q(z)$，然后使用最优化算法即可求解原问题。\n\n\n\n## 四、平均场理论\n\n选取合适的参数化$q(z)$可以使得求解原问题变得简单易行，当我们取$q(z)=q(z|x; \\theta_t)$时，就得到了EM算法，具体展开ELBO并且迭代求解即可。但这里介绍另一种求解方法: 平均场。平均场理论并不假设具体$q(z)$的函数形式，但它假设隐变量之间相互独立:\n$$\nq(\\mathbf{z})=\\prod_{j=1}^{m} q_{j}\\left(z_{j}\\right)\n$$\n这在很多场合下是符合直觉的，例如在上述场景中，用户使用时长的增量分布大都由自身兴趣爱好决定，两个用户之间对app的使用的时长程度并不相关。\n\n为了求解模型，我们将平均场假设带入ELBO，首先处理第一部分:\n$$\n\\begin {aligned}\n\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z}, \\mathbf{x})] &= \\int q(\\mathbf{z}) \\log p(\\mathbf{z}, \\mathbf{x}) d\\mathbf{z} \\\\\n&= \\int \\prod_{i} q(z_i) \\log p(\\mathbf{z}, \\mathbf{x}) dz_i \\\\\n&= \\int q(z_j) \\left[ \\int \\prod_{i \\neq j} q(z_i) \\log p(\\mathbf{z}, \\mathbf{x}) dz_i \\right ] dz_j \\\\\n&= \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j\n\\end {aligned}\n$$\n接着处理第二部分:\n$$\n\\begin {aligned}\n\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})] &=\n\\underset{q\\left(z_{j}\\right)}{\\mathbb{E}}\\left[\\log q_{j}\\left(z_{j}\\right)\\right]-\\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right] \\\\\n&= \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] - \\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]\n\\end {aligned}\n$$\n两部分合起来得到:\n$$\nELBO(q(\\mathbf z))=\\left[ \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + \\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]\n$$\n这里利用坐标上升法进行优化在每一轮迭代时，将$q(z_{i \\neq j})$固定，然后优化$q(z_j)$。于是我们能把注意力集中到$q(z_j)$上来，在上面式子中$q(z_{i \\neq j})$已经固定，这时候$\\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]=c$为常数，于是上面式子可以简化一下:\n$$\nELBO(q(z_j))=\\left[ \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + c\n$$\n最后我们令$\\log D=\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]$, 于是得到:\n$$\n\\begin {aligned}\nELBO(q(z_j)) &= \\left[ \\int q(z_j) \\log D dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + c \\\\\n&= -KL(q(z_j)||D) + c\n\\end {aligned}\n$$\n由KL散度可以知道当取$q(z_j)=D$即:\n$$\nq(z_j)=e^{\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]} \\tag{2}\n$$\n\n\n时KL散度最小为0，有$EBLO(q(z_j))=c$最大。于是我们得到了平均场变分推断算法:\n\n1. 迭代计算每一个$q(z_j)=e^{\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]}$\n2. 计算$ELBO(q(\\mathbf z))$，如果ELBO收敛，则结束，否则返回第一步\n\n## 五、业务CASE的平均场变分推断求解\n\n为了求解第三节中的问题，根据平均场变分推断的思路，我们先假设隐变量$u_k$的分布满足均值为$m_k$, 方差为$s_k$，而隐变量$c_i$由参数$\\varphi_i$决定, 参数也是k维向量，每一维度指定了$c_i$对应维度为1的概率，即:\n$$\nq(c_i;\\varphi_i)=\\sum_k c_{ik}\\varphi_{ik} \\tag{3}\n$$\n\n\n于是根据平均场假设有:\n$$\np(\\mathbf \\mu, \\mathbf c)=\\prod_{k}q(\\mu_k;m_k,s_k)\\prod_iq(c_i;\\varphi_i)\n$$\n式子(1)被重写为:\n$$\np(\\mathbf \\mu, \\mathbf c, \\mathbf x) = \\prod_k p(\\mu_k;m_k,s_k) \\prod_i p(c_i;\\varphi_i) p(x_i|c_i,\\mathbf \\mu)\n$$\n于是ELBO为:\n$$\n\\begin {aligned}\nELBO(\\mathbf m, \\mathbf s,\\mathbf \\varphi) &= \\sum_k \\mathbb E_{q(\\mu_k;m_k,s_k)} \\left[ \\log p(u_k;m_k,s_k) \\right] \\\\ \n&+ \\sum_i \\left( \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log p(c_i; \\varphi_i) \\right] + \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right]  \\right) \\\\\n& - \\sum_k \\mathbb E_{q(\\mu_k;m_k,s_k)}\\left[ \\log q(\\mu_k;m_k, s_k) \\right] \\\\\n& - \\sum_i \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log q(c_i; \\varphi_i) \\right]\n\\end {aligned} \\tag{4}\n$$\n在算法运行的每一轮迭代中，先求解$q(c_i; \\varphi_i)$：\n$$\n\\begin {aligned}\n\\log q(c_i; \\varphi_i) &= \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(\\mathbf c,  \\mathbf{\\mu}, \\mathbf{x}) \\right] \\\\\n&= \\log p(c_i) +  \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right]\n\\end {aligned}\n$$\n根据业务上的定义$\\log p(c_i)=-\\log k$为常数，并且根据$c_i$的定义有$p(x_i|c_i, \\mathbf \\mu)=\\prod_k p(x|\\mu_k)^{c_{ik}}$, 其中$c_{ik}$为$c_i$的第k维值，于是\n$$\n\\begin{aligned}\n\\log q(c_i; \\varphi_i) &= \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right] + const\\\\\n&= \\sum_k c_{ik}\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\log p(x_i|\\mathbf \\mu_k; m_k, s_k) \\right] + const \\\\\n&= \\sum_k c_{ik}\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\frac{-(x_i-\\mu_k)^2}{2}; m_k, s_k \\right] + const \\\\\n&= \\sum_k c_{ik} \\left( \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i - \\frac{1}{2} \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right] \\right) + const\n\\end{aligned} \\tag{5}\n$$\n对比式子(3)和(5), 很显然有:\n$$\n\\varphi_{ik} = e^{\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i - \\frac{1}{2} \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right]}\n$$\n在这里根据$q(\\mu_k;m_k,s_k)$的定义，可以知道$\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i=m_kx_i$而$\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right]=s_k^2+m_k^2$于是:\n$$\n\\varphi_{ik}=m_k-\\frac{1}{2}(s_k^2+m_k^2) \\tag{6}\n$$\n\n\n接下来 继续来求解$q(\\mu_k;m_k,s_k)$\n$$\n\\begin {aligned}\n\\log q(\\mu_k;m_k,s_k) &= \\log p(\\mu_k) + \\sum_i \\mathbb E_{q(c_i,\\mathbf \\mu_{k})}\\left[  \\log p(x_i|c_i, \\mathbf \\mu_k; \\varphi_i, \\mathbf m_{-k}, \\mathbf s_{-k}) \\right] \\\\\n&= -\\frac{\\mu_k^2}{2\\sigma^2} + \\sum_i \\varphi_{ik} \\left(\\frac{-(x_i-u_k)^2}{2} \\right) + const \\\\\n&= \\mu_k \\left( \\sum_i\\varphi_{ik}x_i \\right) - \\mu_k^2 \\left( \\frac{1}{2\\sigma^2} + \\sum_i \\frac{\\varphi_{ik}}{2} \\right) + const\n\\end {aligned} \\tag{7}\n$$\n观察高斯分布的形式$p(x)=\\frac{1}{\\sqrt{2\\pi}s}e^{\\frac{-(x-\\mu)^2}{2s^2}}$于是有:\n$$\n\\begin{aligned}\n\\log p(x) &= -\\log (\\sqrt{2\\pi}s) - \\frac{(x-\\mu)^2}{2s^2} \\\\\n&= -\\log (\\sqrt{2\\pi}s) -  \\frac{x^2}{2s^2}-\\frac{\\mu^2}{2s^2} + \\frac{x\\mu}{s^2}\n\\end{aligned} \\tag{8}\n$$\n对比(7)和(8)式，可见实际上$q(u_k;m_k, s_k)$是一个高斯分布，于是可以令:\n$$\n\\frac{1}{2s_k^2}=\\frac{1}{2\\sigma^2} + \\sum_i \\frac{\\varphi_{ik}}{2}\n$$\n可以解出来:\n$$\ns_k= \\frac{1}{\\sqrt{\\frac{1}{\\sigma^2}+\\sum_i \\varphi_{ik}}} \\tag{9}\n$$\n同理可以令:\n$$\n\\frac{m_k}{s_k^2}=\\sum_i \\varphi_{ik}x_i \\tag{10}\n$$\n把（9）带入即可解得:\n$$\nm_k=\\frac{\\sum_i \\varphi_{ik}x_i}{\\frac{1}{\\sigma^2}+\\sum_i \\varphi_{1k}} \\tag{11}\n$$\n最后我们得到了所有参数的更新公式，总结求解过程为:\n\n1. 随机初始化所有参数$\\mathbf \\varphi,  \\mathbf m, \\mathbf s$\n2. 按照(6)式子更新每一个参数参数$\\varphi_i$\n3. 按照(9)式更新每一个参数$s_k$\n4. 按照(10)式更新每一个参数$m_k$\n5. 按照(4)式计算ELBO,  如果ELBO收敛则结束，否则返回第1步\n\n## 六、代码实现\n\n根据上述算法的描述，可以写出实现代码，但第5步可以不需要计算ELBO, 直接迭代n步之后结束即可，具体代码如下：\n\n```python\ndef solve(x, k, sigma, ephco=20):\n    \"\"\"\n    x: 输入数据\n    k: 超参数k，c_i的维度，在业务CASE中等于用户数\n    sigma: 超参数，需要人工调整\n    \"\"\"\n    n = len(x)\n    phis = np.random.random([n, k])\n    mk = np.random.random([k])\n    sk = np.random.random([k])\n    for _ in range(epoch):\n        for i in range(n):\n            phi_i_k = []\n            for _k in range(k):\n                #根据公式(6)更新参数phi_ik\n                phi_i_k.append(np.exp(mk[_k]*x[i] - (sk[_k]**2 + mk[_k]**2)/2))\n            sum_phi = sum(phi_i_k)\n            phi_i_k = [phi/sum_phi for phi in phi_i_k]\n            phis[i] = phi_i_k\n        den = np.sum(phis, axis=0) + 1/(sigma**2)\n        #根据公式(10)更新m_k\n        mk = np.matmul(x, phis)/den\n        #根据公式(11)更新s_k\n        sk = np.sqrt(1/den)\n    return mk, sk, phis\n```\n\n输入第二节中生成的数据x和超参数后，求解得到$m=[-32.44, -20.15, -8.14, -7.89, 2.79, 3.15, 13.78, 14.72, 15.65, 26.58]$, 对比第二节的真实参数$u$十分接近。从图像上， 根据求解出来的参数$\\mathbf m, \\mathbf s, \\mathbf \\varphi$模拟采样数据，得到的数据分布也与真实数据分布十分接近(蓝色为真实数据，橙色为模拟采样数据)\n\n![1576417800040](1576417800040.png)\n\n","source":"_posts/平均场变分推断：以混合高斯模型为例.md","raw":"---\ntitle: 平均场变分推断：以混合高斯模型为例\ndate: 2019-12-15 11:15:29\ntags: [算法, 机器学习]\nmathjax: true\ncategories: [机器学习]\n---\n\n[TOC]\n\n## 一、贝叶斯推断的工作流\n\n在贝叶斯推断方法中，工作流可以总结为：\n\n1. 根据观察者的知识，做出合理假设，假设数据是如何被生成的\n2. 将数据的生成模型转化为数学模型\n3. 根据数据通过数学方法，求解模型参数\n4. 对新的数据做出预测\n\n![1576379999606](1576379999606.png)\n\n在整个pipeline中，第1点数据的生成过程，这是业务相关的，需要丰富的领域知识。第二点是连接业务领域和数学领域的桥梁，一般称之为数学建模，第3点是存粹的数学步骤，使用数学工具求解模型参数。第4步为业务应用，为业务做出预测和推断结果。\n\n## 二、一个业务例子\n\n下面以一个业务例子来实践这个pipeline。假设在我们的app中总用户数为k，并且在app的数据库中记录了用户每日使用时长的增长量，假设我们没有任何关于用户的唯一id，能观测到的只有增量值: `[-6.04231708, -1.64784446, ..., 1.63898137, -4.29063685, -0.87892713]` ，我们需要做的是为每个用户赋予一个用户id，并且在未来时刻给定某个用户使用时长增量，将这个时长增量归属到其用户id上，如此便可以建立每个用户的使用时长记录，以便在商业上分析用户行为。\n\n首先，于是我们根据业务知识，知道用户产生时长增量记录的过程为：\n\n1. 某个用户$c_k$ 登录系统 \n2. 用户产生一条使用时长增量记录$x_i$,\n\n然后，我们将这个过程建模为数学问题：假设登录到系统上的用户为$k'$的概率是均匀分布的，概率都为$\\frac{1}{k}$，并且用户$k'$生的时长增量为一个随机变量，其符合均值为$u_k$, 标准差为$1$的分布，并且$u_{k}$自身也是符合均值为0，方差为$\\sigma$的高斯分布，特别注意的是$\\sigma$是一个人工设定的超参数，为领域专家根据先验知识调整的。数学化的表述如下:\n$$\n\\begin{aligned} \\mu_{k} & \\sim \\mathcal{N}\\left(0, \\sigma^{2}\\right), & k &=1, \\ldots, K \\\\ c_{i} & \\sim \\operatorname{Categorical}(1 / K, \\ldots, 1 / K), & & i=1, \\ldots, n \\\\ x_{i} | c_{i}, \\mu & \\sim \\mathcal{N}\\left(c_{i}^{\\top} \\mu, 1\\right) & & i=1, \\ldots, n \\end{aligned}\n$$\n其中$c_i$为指示向量，它指明了当前这条数据$x_i$是由哪个用户产生的，假如由用户1产生的，那么对应的指示向量为$c_i=[0,1,0,...,0,0]$，$u$为k维向量，每一维度为$u_k$, 即$u=[u_1, u_2, ..., u_k]$根据上面的描述，我们可以用python代码写出整个数据产生的过程:\n\n```python\ndef gen_data(sigma, k, n):\n    #获取u_k\n    u_k = np.random.normal(0, sigma, k)\n    print(u_k)\n    x = []\n    c = []\n    for i in range(n):\n        ci = random.choice(range(k))\n        c.append(ci)\n        u = u_k[ci]\n        x.append(np.random.normal(u, 1))\n    return x, u_k, c\n```\n\n我们使用这个函数产生$(\\sigma=10, k=10)$实验室数据，采样得到的$u=[-34.59, -30.27, -20.69, -19.65, -8.04, 3.0, 13.79, 14.6, 15.65, 26.56]$, 数据x分布如下图:\n\n![1576417611798](1576417611798.png)\n\n于是我们的目标是根据数据x，去计算得出$u$，然后未来有数据$x'$到来时查看数据与$u_{i\\in k}$的距离，选择距离最近的$i=argmin_{i} dis(u_{i \\in k}, x')$赋予该条数据作为其用户id即可。\n\n## 三、变分推断\n\n上述问题的思路很直接，就是根据条件概率公式，计算$u, c$的后验分布，选择后验概率最大的$u, c$即可\n$$\np(u, c|x)=\\frac{p(u, c, x)}{p(x)} \n$$\nOK， 说干就干，首先根据第二节的数学模型，写出分子部分:\n$$\np(\\mathbf \\mu, \\mathbf{c}, \\mathbf{x})=p(\\mu) \\prod_{i=1}^{n} p\\left(c_{i}\\right) p\\left(x_{i} | c_{i}, \\mu\\right) \\tag{1}\n$$\n然后写出分母部分:\n$$\np(\\mathbf{x})=\\int p(\\boldsymbol{\\mu}) \\prod_{i=1}^{n} \\sum_{c_{i}} p\\left(c_{i}\\right) p\\left(x_{i} | c_{i}, \\mu\\right) \\mathrm{d} \\mu\n$$\n这个问题在于计算$p(x)$存在一个对$u$的多维积分，在这个例子中，有10个用户即意味着10维积分，计算复杂度随着$u$的维度指数增长，在现实世界里$u$的维度小则几千几万，大则千万上亿，计算$p(x)$是现有计算机的计算能力无法完成的，变分推断的出现就是为了解决这个难题。\n\n变分推断的思路是将该问题转换为一个最优化问题，并通过现有高效的最优化方法来进行求解。首先我们将无法观测到的隐藏变量聚拢为$z=(u, c)$，然后使用一个分布$q(z)$来逼近$p(z|x)$，两个分布之间的逼近程度用KL散度来衡量，于是我们的问题被转化成为了一个最小化$KL(q(z)||p(z|x))$的最优化问题，形式化地表述为:\n$$\nq(z)^*=\\mathop{\\arg \\min}_{q(z)} KL(q(z)||p(z|x))\n$$\n我们将KL散度展开为:\n$$\n\\begin {aligned}\n\\operatorname{KL}(q(\\mathbf{z}) \\| p(\\mathbf{z} | \\mathbf{x})) &= \\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z} | \\mathbf{x})] \\\\\n&= \\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z,x})] +\\log p(x)\n\\end {aligned}\n$$\n在最小化的过程中由于$\\log p(x)$难以计算，于是退而求其次，稍作变换最小化目标为$\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z,x})]$, 等同于最大化其取负后的结果，形式化地表述如下:\n$$\nq(z)^*=\\mathop{\\arg \\max}_{q(z)} \\mathbb{E}_{q(z)}[\\log p(\\mathbf{z}, \\mathbf{x})]-\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]\n$$\n上述地优化目标被称之为evidence lower bound ，即ELBO, 国内有翻译为“证据下界”，也有翻译为“变分下界”。换个角度来看ELBO，其实$ELBO(q(z))=\\log p(x) - KL(q(z)||p(z|x))$，因为KL散度的非负性，于是有:\n$$\n\\log p(x) \\ge ELBO(q(z))\n$$\n所以本质上最大化ELBO就是在最大化$\\log p(x)$，这一点在最大似然估计和最大后验估计上思路都是相似的。最后，只要我们最后选择一个参数化的$q(z)$，然后使用最优化算法即可求解原问题。\n\n\n\n## 四、平均场理论\n\n选取合适的参数化$q(z)$可以使得求解原问题变得简单易行，当我们取$q(z)=q(z|x; \\theta_t)$时，就得到了EM算法，具体展开ELBO并且迭代求解即可。但这里介绍另一种求解方法: 平均场。平均场理论并不假设具体$q(z)$的函数形式，但它假设隐变量之间相互独立:\n$$\nq(\\mathbf{z})=\\prod_{j=1}^{m} q_{j}\\left(z_{j}\\right)\n$$\n这在很多场合下是符合直觉的，例如在上述场景中，用户使用时长的增量分布大都由自身兴趣爱好决定，两个用户之间对app的使用的时长程度并不相关。\n\n为了求解模型，我们将平均场假设带入ELBO，首先处理第一部分:\n$$\n\\begin {aligned}\n\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z}, \\mathbf{x})] &= \\int q(\\mathbf{z}) \\log p(\\mathbf{z}, \\mathbf{x}) d\\mathbf{z} \\\\\n&= \\int \\prod_{i} q(z_i) \\log p(\\mathbf{z}, \\mathbf{x}) dz_i \\\\\n&= \\int q(z_j) \\left[ \\int \\prod_{i \\neq j} q(z_i) \\log p(\\mathbf{z}, \\mathbf{x}) dz_i \\right ] dz_j \\\\\n&= \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j\n\\end {aligned}\n$$\n接着处理第二部分:\n$$\n\\begin {aligned}\n\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})] &=\n\\underset{q\\left(z_{j}\\right)}{\\mathbb{E}}\\left[\\log q_{j}\\left(z_{j}\\right)\\right]-\\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right] \\\\\n&= \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] - \\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]\n\\end {aligned}\n$$\n两部分合起来得到:\n$$\nELBO(q(\\mathbf z))=\\left[ \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + \\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]\n$$\n这里利用坐标上升法进行优化在每一轮迭代时，将$q(z_{i \\neq j})$固定，然后优化$q(z_j)$。于是我们能把注意力集中到$q(z_j)$上来，在上面式子中$q(z_{i \\neq j})$已经固定，这时候$\\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]=c$为常数，于是上面式子可以简化一下:\n$$\nELBO(q(z_j))=\\left[ \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + c\n$$\n最后我们令$\\log D=\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]$, 于是得到:\n$$\n\\begin {aligned}\nELBO(q(z_j)) &= \\left[ \\int q(z_j) \\log D dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + c \\\\\n&= -KL(q(z_j)||D) + c\n\\end {aligned}\n$$\n由KL散度可以知道当取$q(z_j)=D$即:\n$$\nq(z_j)=e^{\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]} \\tag{2}\n$$\n\n\n时KL散度最小为0，有$EBLO(q(z_j))=c$最大。于是我们得到了平均场变分推断算法:\n\n1. 迭代计算每一个$q(z_j)=e^{\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]}$\n2. 计算$ELBO(q(\\mathbf z))$，如果ELBO收敛，则结束，否则返回第一步\n\n## 五、业务CASE的平均场变分推断求解\n\n为了求解第三节中的问题，根据平均场变分推断的思路，我们先假设隐变量$u_k$的分布满足均值为$m_k$, 方差为$s_k$，而隐变量$c_i$由参数$\\varphi_i$决定, 参数也是k维向量，每一维度指定了$c_i$对应维度为1的概率，即:\n$$\nq(c_i;\\varphi_i)=\\sum_k c_{ik}\\varphi_{ik} \\tag{3}\n$$\n\n\n于是根据平均场假设有:\n$$\np(\\mathbf \\mu, \\mathbf c)=\\prod_{k}q(\\mu_k;m_k,s_k)\\prod_iq(c_i;\\varphi_i)\n$$\n式子(1)被重写为:\n$$\np(\\mathbf \\mu, \\mathbf c, \\mathbf x) = \\prod_k p(\\mu_k;m_k,s_k) \\prod_i p(c_i;\\varphi_i) p(x_i|c_i,\\mathbf \\mu)\n$$\n于是ELBO为:\n$$\n\\begin {aligned}\nELBO(\\mathbf m, \\mathbf s,\\mathbf \\varphi) &= \\sum_k \\mathbb E_{q(\\mu_k;m_k,s_k)} \\left[ \\log p(u_k;m_k,s_k) \\right] \\\\ \n&+ \\sum_i \\left( \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log p(c_i; \\varphi_i) \\right] + \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right]  \\right) \\\\\n& - \\sum_k \\mathbb E_{q(\\mu_k;m_k,s_k)}\\left[ \\log q(\\mu_k;m_k, s_k) \\right] \\\\\n& - \\sum_i \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log q(c_i; \\varphi_i) \\right]\n\\end {aligned} \\tag{4}\n$$\n在算法运行的每一轮迭代中，先求解$q(c_i; \\varphi_i)$：\n$$\n\\begin {aligned}\n\\log q(c_i; \\varphi_i) &= \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(\\mathbf c,  \\mathbf{\\mu}, \\mathbf{x}) \\right] \\\\\n&= \\log p(c_i) +  \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right]\n\\end {aligned}\n$$\n根据业务上的定义$\\log p(c_i)=-\\log k$为常数，并且根据$c_i$的定义有$p(x_i|c_i, \\mathbf \\mu)=\\prod_k p(x|\\mu_k)^{c_{ik}}$, 其中$c_{ik}$为$c_i$的第k维值，于是\n$$\n\\begin{aligned}\n\\log q(c_i; \\varphi_i) &= \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right] + const\\\\\n&= \\sum_k c_{ik}\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\log p(x_i|\\mathbf \\mu_k; m_k, s_k) \\right] + const \\\\\n&= \\sum_k c_{ik}\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\frac{-(x_i-\\mu_k)^2}{2}; m_k, s_k \\right] + const \\\\\n&= \\sum_k c_{ik} \\left( \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i - \\frac{1}{2} \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right] \\right) + const\n\\end{aligned} \\tag{5}\n$$\n对比式子(3)和(5), 很显然有:\n$$\n\\varphi_{ik} = e^{\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i - \\frac{1}{2} \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right]}\n$$\n在这里根据$q(\\mu_k;m_k,s_k)$的定义，可以知道$\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i=m_kx_i$而$\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right]=s_k^2+m_k^2$于是:\n$$\n\\varphi_{ik}=m_k-\\frac{1}{2}(s_k^2+m_k^2) \\tag{6}\n$$\n\n\n接下来 继续来求解$q(\\mu_k;m_k,s_k)$\n$$\n\\begin {aligned}\n\\log q(\\mu_k;m_k,s_k) &= \\log p(\\mu_k) + \\sum_i \\mathbb E_{q(c_i,\\mathbf \\mu_{k})}\\left[  \\log p(x_i|c_i, \\mathbf \\mu_k; \\varphi_i, \\mathbf m_{-k}, \\mathbf s_{-k}) \\right] \\\\\n&= -\\frac{\\mu_k^2}{2\\sigma^2} + \\sum_i \\varphi_{ik} \\left(\\frac{-(x_i-u_k)^2}{2} \\right) + const \\\\\n&= \\mu_k \\left( \\sum_i\\varphi_{ik}x_i \\right) - \\mu_k^2 \\left( \\frac{1}{2\\sigma^2} + \\sum_i \\frac{\\varphi_{ik}}{2} \\right) + const\n\\end {aligned} \\tag{7}\n$$\n观察高斯分布的形式$p(x)=\\frac{1}{\\sqrt{2\\pi}s}e^{\\frac{-(x-\\mu)^2}{2s^2}}$于是有:\n$$\n\\begin{aligned}\n\\log p(x) &= -\\log (\\sqrt{2\\pi}s) - \\frac{(x-\\mu)^2}{2s^2} \\\\\n&= -\\log (\\sqrt{2\\pi}s) -  \\frac{x^2}{2s^2}-\\frac{\\mu^2}{2s^2} + \\frac{x\\mu}{s^2}\n\\end{aligned} \\tag{8}\n$$\n对比(7)和(8)式，可见实际上$q(u_k;m_k, s_k)$是一个高斯分布，于是可以令:\n$$\n\\frac{1}{2s_k^2}=\\frac{1}{2\\sigma^2} + \\sum_i \\frac{\\varphi_{ik}}{2}\n$$\n可以解出来:\n$$\ns_k= \\frac{1}{\\sqrt{\\frac{1}{\\sigma^2}+\\sum_i \\varphi_{ik}}} \\tag{9}\n$$\n同理可以令:\n$$\n\\frac{m_k}{s_k^2}=\\sum_i \\varphi_{ik}x_i \\tag{10}\n$$\n把（9）带入即可解得:\n$$\nm_k=\\frac{\\sum_i \\varphi_{ik}x_i}{\\frac{1}{\\sigma^2}+\\sum_i \\varphi_{1k}} \\tag{11}\n$$\n最后我们得到了所有参数的更新公式，总结求解过程为:\n\n1. 随机初始化所有参数$\\mathbf \\varphi,  \\mathbf m, \\mathbf s$\n2. 按照(6)式子更新每一个参数参数$\\varphi_i$\n3. 按照(9)式更新每一个参数$s_k$\n4. 按照(10)式更新每一个参数$m_k$\n5. 按照(4)式计算ELBO,  如果ELBO收敛则结束，否则返回第1步\n\n## 六、代码实现\n\n根据上述算法的描述，可以写出实现代码，但第5步可以不需要计算ELBO, 直接迭代n步之后结束即可，具体代码如下：\n\n```python\ndef solve(x, k, sigma, ephco=20):\n    \"\"\"\n    x: 输入数据\n    k: 超参数k，c_i的维度，在业务CASE中等于用户数\n    sigma: 超参数，需要人工调整\n    \"\"\"\n    n = len(x)\n    phis = np.random.random([n, k])\n    mk = np.random.random([k])\n    sk = np.random.random([k])\n    for _ in range(epoch):\n        for i in range(n):\n            phi_i_k = []\n            for _k in range(k):\n                #根据公式(6)更新参数phi_ik\n                phi_i_k.append(np.exp(mk[_k]*x[i] - (sk[_k]**2 + mk[_k]**2)/2))\n            sum_phi = sum(phi_i_k)\n            phi_i_k = [phi/sum_phi for phi in phi_i_k]\n            phis[i] = phi_i_k\n        den = np.sum(phis, axis=0) + 1/(sigma**2)\n        #根据公式(10)更新m_k\n        mk = np.matmul(x, phis)/den\n        #根据公式(11)更新s_k\n        sk = np.sqrt(1/den)\n    return mk, sk, phis\n```\n\n输入第二节中生成的数据x和超参数后，求解得到$m=[-32.44, -20.15, -8.14, -7.89, 2.79, 3.15, 13.78, 14.72, 15.65, 26.58]$, 对比第二节的真实参数$u$十分接近。从图像上， 根据求解出来的参数$\\mathbf m, \\mathbf s, \\mathbf \\varphi$模拟采样数据，得到的数据分布也与真实数据分布十分接近(蓝色为真实数据，橙色为模拟采样数据)\n\n![1576417800040](1576417800040.png)\n\n","slug":"平均场变分推断：以混合高斯模型为例","published":1,"updated":"2020-04-12T13:22:37.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8x40sir0002q69pfofxgv6d","content":"<p>[TOC]</p>\n<h2 id=\"一、贝叶斯推断的工作流\"><a href=\"#一、贝叶斯推断的工作流\" class=\"headerlink\" title=\"一、贝叶斯推断的工作流\"></a>一、贝叶斯推断的工作流</h2><p>在贝叶斯推断方法中，工作流可以总结为：</p>\n<ol>\n<li>根据观察者的知识，做出合理假设，假设数据是如何被生成的</li>\n<li>将数据的生成模型转化为数学模型</li>\n<li>根据数据通过数学方法，求解模型参数</li>\n<li>对新的数据做出预测</li>\n</ol>\n<p><img src=\"1576379999606.png\" alt=\"1576379999606\"></p>\n<p>在整个pipeline中，第1点数据的生成过程，这是业务相关的，需要丰富的领域知识。第二点是连接业务领域和数学领域的桥梁，一般称之为数学建模，第3点是存粹的数学步骤，使用数学工具求解模型参数。第4步为业务应用，为业务做出预测和推断结果。</p>\n<h2 id=\"二、一个业务例子\"><a href=\"#二、一个业务例子\" class=\"headerlink\" title=\"二、一个业务例子\"></a>二、一个业务例子</h2><p>下面以一个业务例子来实践这个pipeline。假设在我们的app中总用户数为k，并且在app的数据库中记录了用户每日使用时长的增长量，假设我们没有任何关于用户的唯一id，能观测到的只有增量值: <code>[-6.04231708, -1.64784446, ..., 1.63898137, -4.29063685, -0.87892713]</code> ，我们需要做的是为每个用户赋予一个用户id，并且在未来时刻给定某个用户使用时长增量，将这个时长增量归属到其用户id上，如此便可以建立每个用户的使用时长记录，以便在商业上分析用户行为。</p>\n<p>首先，于是我们根据业务知识，知道用户产生时长增量记录的过程为：</p>\n<ol>\n<li>某个用户$c_k$ 登录系统 </li>\n<li>用户产生一条使用时长增量记录$x_i$,</li>\n</ol>\n<p>然后，我们将这个过程建模为数学问题：假设登录到系统上的用户为$k’$的概率是均匀分布的，概率都为$\\frac{1}{k}$，并且用户$k’$生的时长增量为一个随机变量，其符合均值为$u_k$, 标准差为$1$的分布，并且$u_{k}$自身也是符合均值为0，方差为$\\sigma$的高斯分布，特别注意的是$\\sigma$是一个人工设定的超参数，为领域专家根据先验知识调整的。数学化的表述如下:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned} \\mu_{k} & \\sim \\mathcal{N}\\left(0, \\sigma^{2}\\right), & k &=1, \\ldots, K \\\\ c_{i} & \\sim \\operatorname{Categorical}(1 / K, \\ldots, 1 / K), & & i=1, \\ldots, n \\\\ x_{i} | c_{i}, \\mu & \\sim \\mathcal{N}\\left(c_{i}^{\\top} \\mu, 1\\right) & & i=1, \\ldots, n \\end{aligned}</script><p>其中$c_i$为指示向量，它指明了当前这条数据$x_i$是由哪个用户产生的，假如由用户1产生的，那么对应的指示向量为$c_i=[0,1,0,…,0,0]$，$u$为k维向量，每一维度为$u_k$, 即$u=[u_1, u_2, …, u_k]$根据上面的描述，我们可以用python代码写出整个数据产生的过程:</p>\n<pre><code class=\"lang-python\">def gen_data(sigma, k, n):\n    #获取u_k\n    u_k = np.random.normal(0, sigma, k)\n    print(u_k)\n    x = []\n    c = []\n    for i in range(n):\n        ci = random.choice(range(k))\n        c.append(ci)\n        u = u_k[ci]\n        x.append(np.random.normal(u, 1))\n    return x, u_k, c\n</code></pre>\n<p>我们使用这个函数产生$(\\sigma=10, k=10)$实验室数据，采样得到的$u=[-34.59, -30.27, -20.69, -19.65, -8.04, 3.0, 13.79, 14.6, 15.65, 26.56]$, 数据x分布如下图:</p>\n<p><img src=\"1576417611798.png\" alt=\"1576417611798\"></p>\n<p>于是我们的目标是根据数据x，去计算得出$u$，然后未来有数据$x’$到来时查看数据与$u_{i\\in k}$的距离，选择距离最近的$i=argmin_{i} dis(u_{i \\in k}, x’)$赋予该条数据作为其用户id即可。</p>\n<h2 id=\"三、变分推断\"><a href=\"#三、变分推断\" class=\"headerlink\" title=\"三、变分推断\"></a>三、变分推断</h2><p>上述问题的思路很直接，就是根据条件概率公式，计算$u, c$的后验分布，选择后验概率最大的$u, c$即可</p>\n<script type=\"math/tex; mode=display\">\np(u, c|x)=\\frac{p(u, c, x)}{p(x)}</script><p>OK， 说干就干，首先根据第二节的数学模型，写出分子部分:</p>\n<script type=\"math/tex; mode=display\">\np(\\mathbf \\mu, \\mathbf{c}, \\mathbf{x})=p(\\mu) \\prod_{i=1}^{n} p\\left(c_{i}\\right) p\\left(x_{i} | c_{i}, \\mu\\right) \\tag{1}</script><p>然后写出分母部分:</p>\n<script type=\"math/tex; mode=display\">\np(\\mathbf{x})=\\int p(\\boldsymbol{\\mu}) \\prod_{i=1}^{n} \\sum_{c_{i}} p\\left(c_{i}\\right) p\\left(x_{i} | c_{i}, \\mu\\right) \\mathrm{d} \\mu</script><p>这个问题在于计算$p(x)$存在一个对$u$的多维积分，在这个例子中，有10个用户即意味着10维积分，计算复杂度随着$u$的维度指数增长，在现实世界里$u$的维度小则几千几万，大则千万上亿，计算$p(x)$是现有计算机的计算能力无法完成的，变分推断的出现就是为了解决这个难题。</p>\n<p>变分推断的思路是将该问题转换为一个最优化问题，并通过现有高效的最优化方法来进行求解。首先我们将无法观测到的隐藏变量聚拢为$z=(u, c)$，然后使用一个分布$q(z)$来逼近$p(z|x)$，两个分布之间的逼近程度用KL散度来衡量，于是我们的问题被转化成为了一个最小化$KL(q(z)||p(z|x))$的最优化问题，形式化地表述为:</p>\n<script type=\"math/tex; mode=display\">\nq(z)^*=\\mathop{\\arg \\min}_{q(z)} KL(q(z)||p(z|x))</script><p>我们将KL散度展开为:</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\n\\operatorname{KL}(q(\\mathbf{z}) \\| p(\\mathbf{z} | \\mathbf{x})) &= \\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z} | \\mathbf{x})] \\\\\n&= \\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z,x})] +\\log p(x)\n\\end {aligned}</script><p>在最小化的过程中由于$\\log p(x)$难以计算，于是退而求其次，稍作变换最小化目标为$\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z,x})]$, 等同于最大化其取负后的结果，形式化地表述如下:</p>\n<script type=\"math/tex; mode=display\">\nq(z)^*=\\mathop{\\arg \\max}_{q(z)} \\mathbb{E}_{q(z)}[\\log p(\\mathbf{z}, \\mathbf{x})]-\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]</script><p>上述地优化目标被称之为evidence lower bound ，即ELBO, 国内有翻译为“证据下界”，也有翻译为“变分下界”。换个角度来看ELBO，其实$ELBO(q(z))=\\log p(x) - KL(q(z)||p(z|x))$，因为KL散度的非负性，于是有:</p>\n<script type=\"math/tex; mode=display\">\n\\log p(x) \\ge ELBO(q(z))</script><p>所以本质上最大化ELBO就是在最大化$\\log p(x)$，这一点在最大似然估计和最大后验估计上思路都是相似的。最后，只要我们最后选择一个参数化的$q(z)$，然后使用最优化算法即可求解原问题。</p>\n<h2 id=\"四、平均场理论\"><a href=\"#四、平均场理论\" class=\"headerlink\" title=\"四、平均场理论\"></a>四、平均场理论</h2><p>选取合适的参数化$q(z)$可以使得求解原问题变得简单易行，当我们取$q(z)=q(z|x; \\theta_t)$时，就得到了EM算法，具体展开ELBO并且迭代求解即可。但这里介绍另一种求解方法: 平均场。平均场理论并不假设具体$q(z)$的函数形式，但它假设隐变量之间相互独立:</p>\n<script type=\"math/tex; mode=display\">\nq(\\mathbf{z})=\\prod_{j=1}^{m} q_{j}\\left(z_{j}\\right)</script><p>这在很多场合下是符合直觉的，例如在上述场景中，用户使用时长的增量分布大都由自身兴趣爱好决定，两个用户之间对app的使用的时长程度并不相关。</p>\n<p>为了求解模型，我们将平均场假设带入ELBO，首先处理第一部分:</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\n\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z}, \\mathbf{x})] &= \\int q(\\mathbf{z}) \\log p(\\mathbf{z}, \\mathbf{x}) d\\mathbf{z} \\\\\n&= \\int \\prod_{i} q(z_i) \\log p(\\mathbf{z}, \\mathbf{x}) dz_i \\\\\n&= \\int q(z_j) \\left[ \\int \\prod_{i \\neq j} q(z_i) \\log p(\\mathbf{z}, \\mathbf{x}) dz_i \\right ] dz_j \\\\\n&= \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j\n\\end {aligned}</script><p>接着处理第二部分:</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\n\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})] &=\n\\underset{q\\left(z_{j}\\right)}{\\mathbb{E}}\\left[\\log q_{j}\\left(z_{j}\\right)\\right]-\\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right] \\\\\n&= \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] - \\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]\n\\end {aligned}</script><p>两部分合起来得到:</p>\n<script type=\"math/tex; mode=display\">\nELBO(q(\\mathbf z))=\\left[ \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + \\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]</script><p>这里利用坐标上升法进行优化在每一轮迭代时，将$q(z_{i \\neq j})$固定，然后优化$q(z_j)$。于是我们能把注意力集中到$q(z_j)$上来，在上面式子中$q(z_{i \\neq j})$已经固定，这时候$\\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]=c$为常数，于是上面式子可以简化一下:</p>\n<script type=\"math/tex; mode=display\">\nELBO(q(z_j))=\\left[ \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + c</script><p>最后我们令$\\log D=\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]$, 于是得到:</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\nELBO(q(z_j)) &= \\left[ \\int q(z_j) \\log D dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + c \\\\\n&= -KL(q(z_j)||D) + c\n\\end {aligned}</script><p>由KL散度可以知道当取$q(z_j)=D$即:</p>\n<script type=\"math/tex; mode=display\">\nq(z_j)=e^{\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]} \\tag{2}</script><p>时KL散度最小为0，有$EBLO(q(z_j))=c$最大。于是我们得到了平均场变分推断算法:</p>\n<ol>\n<li>迭代计算每一个$q(z_j)=e^{\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]}$</li>\n<li>计算$ELBO(q(\\mathbf z))$，如果ELBO收敛，则结束，否则返回第一步</li>\n</ol>\n<h2 id=\"五、业务CASE的平均场变分推断求解\"><a href=\"#五、业务CASE的平均场变分推断求解\" class=\"headerlink\" title=\"五、业务CASE的平均场变分推断求解\"></a>五、业务CASE的平均场变分推断求解</h2><p>为了求解第三节中的问题，根据平均场变分推断的思路，我们先假设隐变量$u_k$的分布满足均值为$m_k$, 方差为$s_k$，而隐变量$c_i$由参数$\\varphi_i$决定, 参数也是k维向量，每一维度指定了$c_i$对应维度为1的概率，即:</p>\n<script type=\"math/tex; mode=display\">\nq(c_i;\\varphi_i)=\\sum_k c_{ik}\\varphi_{ik} \\tag{3}</script><p>于是根据平均场假设有:</p>\n<script type=\"math/tex; mode=display\">\np(\\mathbf \\mu, \\mathbf c)=\\prod_{k}q(\\mu_k;m_k,s_k)\\prod_iq(c_i;\\varphi_i)</script><p>式子(1)被重写为:</p>\n<script type=\"math/tex; mode=display\">\np(\\mathbf \\mu, \\mathbf c, \\mathbf x) = \\prod_k p(\\mu_k;m_k,s_k) \\prod_i p(c_i;\\varphi_i) p(x_i|c_i,\\mathbf \\mu)</script><p>于是ELBO为:</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\nELBO(\\mathbf m, \\mathbf s,\\mathbf \\varphi) &= \\sum_k \\mathbb E_{q(\\mu_k;m_k,s_k)} \\left[ \\log p(u_k;m_k,s_k) \\right] \\\\ \n&+ \\sum_i \\left( \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log p(c_i; \\varphi_i) \\right] + \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right]  \\right) \\\\\n& - \\sum_k \\mathbb E_{q(\\mu_k;m_k,s_k)}\\left[ \\log q(\\mu_k;m_k, s_k) \\right] \\\\\n& - \\sum_i \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log q(c_i; \\varphi_i) \\right]\n\\end {aligned} \\tag{4}</script><p>在算法运行的每一轮迭代中，先求解$q(c_i; \\varphi_i)$：</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\n\\log q(c_i; \\varphi_i) &= \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(\\mathbf c,  \\mathbf{\\mu}, \\mathbf{x}) \\right] \\\\\n&= \\log p(c_i) +  \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right]\n\\end {aligned}</script><p>根据业务上的定义$\\log p(c_i)=-\\log k$为常数，并且根据$c_i$的定义有$p(x_i|c_i, \\mathbf \\mu)=\\prod_k p(x|\\mu_k)^{c_{ik}}$, 其中$c_{ik}$为$c_i$的第k维值，于是</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\log q(c_i; \\varphi_i) &= \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right] + const\\\\\n&= \\sum_k c_{ik}\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\log p(x_i|\\mathbf \\mu_k; m_k, s_k) \\right] + const \\\\\n&= \\sum_k c_{ik}\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\frac{-(x_i-\\mu_k)^2}{2}; m_k, s_k \\right] + const \\\\\n&= \\sum_k c_{ik} \\left( \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i - \\frac{1}{2} \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right] \\right) + const\n\\end{aligned} \\tag{5}</script><p>对比式子(3)和(5), 很显然有:</p>\n<script type=\"math/tex; mode=display\">\n\\varphi_{ik} = e^{\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i - \\frac{1}{2} \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right]}</script><p>在这里根据$q(\\mu_k;m_k,s_k)$的定义，可以知道$\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i=m_kx_i$而$\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right]=s_k^2+m_k^2$于是:</p>\n<script type=\"math/tex; mode=display\">\n\\varphi_{ik}=m_k-\\frac{1}{2}(s_k^2+m_k^2) \\tag{6}</script><p>接下来 继续来求解$q(\\mu_k;m_k,s_k)$</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\n\\log q(\\mu_k;m_k,s_k) &= \\log p(\\mu_k) + \\sum_i \\mathbb E_{q(c_i,\\mathbf \\mu_{k})}\\left[  \\log p(x_i|c_i, \\mathbf \\mu_k; \\varphi_i, \\mathbf m_{-k}, \\mathbf s_{-k}) \\right] \\\\\n&= -\\frac{\\mu_k^2}{2\\sigma^2} + \\sum_i \\varphi_{ik} \\left(\\frac{-(x_i-u_k)^2}{2} \\right) + const \\\\\n&= \\mu_k \\left( \\sum_i\\varphi_{ik}x_i \\right) - \\mu_k^2 \\left( \\frac{1}{2\\sigma^2} + \\sum_i \\frac{\\varphi_{ik}}{2} \\right) + const\n\\end {aligned} \\tag{7}</script><p>观察高斯分布的形式$p(x)=\\frac{1}{\\sqrt{2\\pi}s}e^{\\frac{-(x-\\mu)^2}{2s^2}}$于是有:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\log p(x) &= -\\log (\\sqrt{2\\pi}s) - \\frac{(x-\\mu)^2}{2s^2} \\\\\n&= -\\log (\\sqrt{2\\pi}s) -  \\frac{x^2}{2s^2}-\\frac{\\mu^2}{2s^2} + \\frac{x\\mu}{s^2}\n\\end{aligned} \\tag{8}</script><p>对比(7)和(8)式，可见实际上$q(u_k;m_k, s_k)$是一个高斯分布，于是可以令:</p>\n<script type=\"math/tex; mode=display\">\n\\frac{1}{2s_k^2}=\\frac{1}{2\\sigma^2} + \\sum_i \\frac{\\varphi_{ik}}{2}</script><p>可以解出来:</p>\n<script type=\"math/tex; mode=display\">\ns_k= \\frac{1}{\\sqrt{\\frac{1}{\\sigma^2}+\\sum_i \\varphi_{ik}}} \\tag{9}</script><p>同理可以令:</p>\n<script type=\"math/tex; mode=display\">\n\\frac{m_k}{s_k^2}=\\sum_i \\varphi_{ik}x_i \\tag{10}</script><p>把（9）带入即可解得:</p>\n<script type=\"math/tex; mode=display\">\nm_k=\\frac{\\sum_i \\varphi_{ik}x_i}{\\frac{1}{\\sigma^2}+\\sum_i \\varphi_{1k}} \\tag{11}</script><p>最后我们得到了所有参数的更新公式，总结求解过程为:</p>\n<ol>\n<li>随机初始化所有参数$\\mathbf \\varphi,  \\mathbf m, \\mathbf s$</li>\n<li>按照(6)式子更新每一个参数参数$\\varphi_i$</li>\n<li>按照(9)式更新每一个参数$s_k$</li>\n<li>按照(10)式更新每一个参数$m_k$</li>\n<li>按照(4)式计算ELBO,  如果ELBO收敛则结束，否则返回第1步</li>\n</ol>\n<h2 id=\"六、代码实现\"><a href=\"#六、代码实现\" class=\"headerlink\" title=\"六、代码实现\"></a>六、代码实现</h2><p>根据上述算法的描述，可以写出实现代码，但第5步可以不需要计算ELBO, 直接迭代n步之后结束即可，具体代码如下：</p>\n<pre><code class=\"lang-python\">def solve(x, k, sigma, ephco=20):\n    &quot;&quot;&quot;\n    x: 输入数据\n    k: 超参数k，c_i的维度，在业务CASE中等于用户数\n    sigma: 超参数，需要人工调整\n    &quot;&quot;&quot;\n    n = len(x)\n    phis = np.random.random([n, k])\n    mk = np.random.random([k])\n    sk = np.random.random([k])\n    for _ in range(epoch):\n        for i in range(n):\n            phi_i_k = []\n            for _k in range(k):\n                #根据公式(6)更新参数phi_ik\n                phi_i_k.append(np.exp(mk[_k]*x[i] - (sk[_k]**2 + mk[_k]**2)/2))\n            sum_phi = sum(phi_i_k)\n            phi_i_k = [phi/sum_phi for phi in phi_i_k]\n            phis[i] = phi_i_k\n        den = np.sum(phis, axis=0) + 1/(sigma**2)\n        #根据公式(10)更新m_k\n        mk = np.matmul(x, phis)/den\n        #根据公式(11)更新s_k\n        sk = np.sqrt(1/den)\n    return mk, sk, phis\n</code></pre>\n<p>输入第二节中生成的数据x和超参数后，求解得到$m=[-32.44, -20.15, -8.14, -7.89, 2.79, 3.15, 13.78, 14.72, 15.65, 26.58]$, 对比第二节的真实参数$u$十分接近。从图像上， 根据求解出来的参数$\\mathbf m, \\mathbf s, \\mathbf \\varphi$模拟采样数据，得到的数据分布也与真实数据分布十分接近(蓝色为真实数据，橙色为模拟采样数据)</p>\n<p><img src=\"1576417800040.png\" alt=\"1576417800040\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>[TOC]</p>\n<h2 id=\"一、贝叶斯推断的工作流\"><a href=\"#一、贝叶斯推断的工作流\" class=\"headerlink\" title=\"一、贝叶斯推断的工作流\"></a>一、贝叶斯推断的工作流</h2><p>在贝叶斯推断方法中，工作流可以总结为：</p>\n<ol>\n<li>根据观察者的知识，做出合理假设，假设数据是如何被生成的</li>\n<li>将数据的生成模型转化为数学模型</li>\n<li>根据数据通过数学方法，求解模型参数</li>\n<li>对新的数据做出预测</li>\n</ol>\n<p><img src=\"1576379999606.png\" alt=\"1576379999606\"></p>\n<p>在整个pipeline中，第1点数据的生成过程，这是业务相关的，需要丰富的领域知识。第二点是连接业务领域和数学领域的桥梁，一般称之为数学建模，第3点是存粹的数学步骤，使用数学工具求解模型参数。第4步为业务应用，为业务做出预测和推断结果。</p>\n<h2 id=\"二、一个业务例子\"><a href=\"#二、一个业务例子\" class=\"headerlink\" title=\"二、一个业务例子\"></a>二、一个业务例子</h2><p>下面以一个业务例子来实践这个pipeline。假设在我们的app中总用户数为k，并且在app的数据库中记录了用户每日使用时长的增长量，假设我们没有任何关于用户的唯一id，能观测到的只有增量值: <code>[-6.04231708, -1.64784446, ..., 1.63898137, -4.29063685, -0.87892713]</code> ，我们需要做的是为每个用户赋予一个用户id，并且在未来时刻给定某个用户使用时长增量，将这个时长增量归属到其用户id上，如此便可以建立每个用户的使用时长记录，以便在商业上分析用户行为。</p>\n<p>首先，于是我们根据业务知识，知道用户产生时长增量记录的过程为：</p>\n<ol>\n<li>某个用户$c_k$ 登录系统 </li>\n<li>用户产生一条使用时长增量记录$x_i$,</li>\n</ol>\n<p>然后，我们将这个过程建模为数学问题：假设登录到系统上的用户为$k’$的概率是均匀分布的，概率都为$\\frac{1}{k}$，并且用户$k’$生的时长增量为一个随机变量，其符合均值为$u_k$, 标准差为$1$的分布，并且$u_{k}$自身也是符合均值为0，方差为$\\sigma$的高斯分布，特别注意的是$\\sigma$是一个人工设定的超参数，为领域专家根据先验知识调整的。数学化的表述如下:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned} \\mu_{k} & \\sim \\mathcal{N}\\left(0, \\sigma^{2}\\right), & k &=1, \\ldots, K \\\\ c_{i} & \\sim \\operatorname{Categorical}(1 / K, \\ldots, 1 / K), & & i=1, \\ldots, n \\\\ x_{i} | c_{i}, \\mu & \\sim \\mathcal{N}\\left(c_{i}^{\\top} \\mu, 1\\right) & & i=1, \\ldots, n \\end{aligned}</script><p>其中$c_i$为指示向量，它指明了当前这条数据$x_i$是由哪个用户产生的，假如由用户1产生的，那么对应的指示向量为$c_i=[0,1,0,…,0,0]$，$u$为k维向量，每一维度为$u_k$, 即$u=[u_1, u_2, …, u_k]$根据上面的描述，我们可以用python代码写出整个数据产生的过程:</p>\n<pre><code class=\"lang-python\">def gen_data(sigma, k, n):\n    #获取u_k\n    u_k = np.random.normal(0, sigma, k)\n    print(u_k)\n    x = []\n    c = []\n    for i in range(n):\n        ci = random.choice(range(k))\n        c.append(ci)\n        u = u_k[ci]\n        x.append(np.random.normal(u, 1))\n    return x, u_k, c\n</code></pre>\n<p>我们使用这个函数产生$(\\sigma=10, k=10)$实验室数据，采样得到的$u=[-34.59, -30.27, -20.69, -19.65, -8.04, 3.0, 13.79, 14.6, 15.65, 26.56]$, 数据x分布如下图:</p>\n<p><img src=\"1576417611798.png\" alt=\"1576417611798\"></p>\n<p>于是我们的目标是根据数据x，去计算得出$u$，然后未来有数据$x’$到来时查看数据与$u_{i\\in k}$的距离，选择距离最近的$i=argmin_{i} dis(u_{i \\in k}, x’)$赋予该条数据作为其用户id即可。</p>\n<h2 id=\"三、变分推断\"><a href=\"#三、变分推断\" class=\"headerlink\" title=\"三、变分推断\"></a>三、变分推断</h2><p>上述问题的思路很直接，就是根据条件概率公式，计算$u, c$的后验分布，选择后验概率最大的$u, c$即可</p>\n<script type=\"math/tex; mode=display\">\np(u, c|x)=\\frac{p(u, c, x)}{p(x)}</script><p>OK， 说干就干，首先根据第二节的数学模型，写出分子部分:</p>\n<script type=\"math/tex; mode=display\">\np(\\mathbf \\mu, \\mathbf{c}, \\mathbf{x})=p(\\mu) \\prod_{i=1}^{n} p\\left(c_{i}\\right) p\\left(x_{i} | c_{i}, \\mu\\right) \\tag{1}</script><p>然后写出分母部分:</p>\n<script type=\"math/tex; mode=display\">\np(\\mathbf{x})=\\int p(\\boldsymbol{\\mu}) \\prod_{i=1}^{n} \\sum_{c_{i}} p\\left(c_{i}\\right) p\\left(x_{i} | c_{i}, \\mu\\right) \\mathrm{d} \\mu</script><p>这个问题在于计算$p(x)$存在一个对$u$的多维积分，在这个例子中，有10个用户即意味着10维积分，计算复杂度随着$u$的维度指数增长，在现实世界里$u$的维度小则几千几万，大则千万上亿，计算$p(x)$是现有计算机的计算能力无法完成的，变分推断的出现就是为了解决这个难题。</p>\n<p>变分推断的思路是将该问题转换为一个最优化问题，并通过现有高效的最优化方法来进行求解。首先我们将无法观测到的隐藏变量聚拢为$z=(u, c)$，然后使用一个分布$q(z)$来逼近$p(z|x)$，两个分布之间的逼近程度用KL散度来衡量，于是我们的问题被转化成为了一个最小化$KL(q(z)||p(z|x))$的最优化问题，形式化地表述为:</p>\n<script type=\"math/tex; mode=display\">\nq(z)^*=\\mathop{\\arg \\min}_{q(z)} KL(q(z)||p(z|x))</script><p>我们将KL散度展开为:</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\n\\operatorname{KL}(q(\\mathbf{z}) \\| p(\\mathbf{z} | \\mathbf{x})) &= \\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z} | \\mathbf{x})] \\\\\n&= \\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z,x})] +\\log p(x)\n\\end {aligned}</script><p>在最小化的过程中由于$\\log p(x)$难以计算，于是退而求其次，稍作变换最小化目标为$\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]-\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z,x})]$, 等同于最大化其取负后的结果，形式化地表述如下:</p>\n<script type=\"math/tex; mode=display\">\nq(z)^*=\\mathop{\\arg \\max}_{q(z)} \\mathbb{E}_{q(z)}[\\log p(\\mathbf{z}, \\mathbf{x})]-\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})]</script><p>上述地优化目标被称之为evidence lower bound ，即ELBO, 国内有翻译为“证据下界”，也有翻译为“变分下界”。换个角度来看ELBO，其实$ELBO(q(z))=\\log p(x) - KL(q(z)||p(z|x))$，因为KL散度的非负性，于是有:</p>\n<script type=\"math/tex; mode=display\">\n\\log p(x) \\ge ELBO(q(z))</script><p>所以本质上最大化ELBO就是在最大化$\\log p(x)$，这一点在最大似然估计和最大后验估计上思路都是相似的。最后，只要我们最后选择一个参数化的$q(z)$，然后使用最优化算法即可求解原问题。</p>\n<h2 id=\"四、平均场理论\"><a href=\"#四、平均场理论\" class=\"headerlink\" title=\"四、平均场理论\"></a>四、平均场理论</h2><p>选取合适的参数化$q(z)$可以使得求解原问题变得简单易行，当我们取$q(z)=q(z|x; \\theta_t)$时，就得到了EM算法，具体展开ELBO并且迭代求解即可。但这里介绍另一种求解方法: 平均场。平均场理论并不假设具体$q(z)$的函数形式，但它假设隐变量之间相互独立:</p>\n<script type=\"math/tex; mode=display\">\nq(\\mathbf{z})=\\prod_{j=1}^{m} q_{j}\\left(z_{j}\\right)</script><p>这在很多场合下是符合直觉的，例如在上述场景中，用户使用时长的增量分布大都由自身兴趣爱好决定，两个用户之间对app的使用的时长程度并不相关。</p>\n<p>为了求解模型，我们将平均场假设带入ELBO，首先处理第一部分:</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\n\\mathbb{E}_{q(z)}[\\log p(\\mathbf{z}, \\mathbf{x})] &= \\int q(\\mathbf{z}) \\log p(\\mathbf{z}, \\mathbf{x}) d\\mathbf{z} \\\\\n&= \\int \\prod_{i} q(z_i) \\log p(\\mathbf{z}, \\mathbf{x}) dz_i \\\\\n&= \\int q(z_j) \\left[ \\int \\prod_{i \\neq j} q(z_i) \\log p(\\mathbf{z}, \\mathbf{x}) dz_i \\right ] dz_j \\\\\n&= \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j\n\\end {aligned}</script><p>接着处理第二部分:</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\n\\mathbb{E}_{q(z)}[\\log q(\\mathbf{z})] &=\n\\underset{q\\left(z_{j}\\right)}{\\mathbb{E}}\\left[\\log q_{j}\\left(z_{j}\\right)\\right]-\\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right] \\\\\n&= \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] - \\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]\n\\end {aligned}</script><p>两部分合起来得到:</p>\n<script type=\"math/tex; mode=display\">\nELBO(q(\\mathbf z))=\\left[ \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + \\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]</script><p>这里利用坐标上升法进行优化在每一轮迭代时，将$q(z_{i \\neq j})$固定，然后优化$q(z_j)$。于是我们能把注意力集中到$q(z_j)$上来，在上面式子中$q(z_{i \\neq j})$已经固定，这时候$\\underset{q_{i\\neq j}\\left(z_{i}\\right)}{\\mathbb{E}}\\left[\\sum_{i \\neq j} \\log q_{i}\\left(z_{i}\\right)\\right]=c$为常数，于是上面式子可以简化一下:</p>\n<script type=\"math/tex; mode=display\">\nELBO(q(z_j))=\\left[ \\int q(z_j) \\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + c</script><p>最后我们令$\\log D=\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]$, 于是得到:</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\nELBO(q(z_j)) &= \\left[ \\int q(z_j) \\log D dz_j \\right]  - \\left[ \\int q(z_j) \\log q(z_j) dz_j \\right] + c \\\\\n&= -KL(q(z_j)||D) + c\n\\end {aligned}</script><p>由KL散度可以知道当取$q(z_j)=D$即:</p>\n<script type=\"math/tex; mode=display\">\nq(z_j)=e^{\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]} \\tag{2}</script><p>时KL散度最小为0，有$EBLO(q(z_j))=c$最大。于是我们得到了平均场变分推断算法:</p>\n<ol>\n<li>迭代计算每一个$q(z_j)=e^{\\mathbb{E}_{q(z_{i\\neq j})} \\left[ \\log p(\\mathbf{z}, \\mathbf{x}) \\right]}$</li>\n<li>计算$ELBO(q(\\mathbf z))$，如果ELBO收敛，则结束，否则返回第一步</li>\n</ol>\n<h2 id=\"五、业务CASE的平均场变分推断求解\"><a href=\"#五、业务CASE的平均场变分推断求解\" class=\"headerlink\" title=\"五、业务CASE的平均场变分推断求解\"></a>五、业务CASE的平均场变分推断求解</h2><p>为了求解第三节中的问题，根据平均场变分推断的思路，我们先假设隐变量$u_k$的分布满足均值为$m_k$, 方差为$s_k$，而隐变量$c_i$由参数$\\varphi_i$决定, 参数也是k维向量，每一维度指定了$c_i$对应维度为1的概率，即:</p>\n<script type=\"math/tex; mode=display\">\nq(c_i;\\varphi_i)=\\sum_k c_{ik}\\varphi_{ik} \\tag{3}</script><p>于是根据平均场假设有:</p>\n<script type=\"math/tex; mode=display\">\np(\\mathbf \\mu, \\mathbf c)=\\prod_{k}q(\\mu_k;m_k,s_k)\\prod_iq(c_i;\\varphi_i)</script><p>式子(1)被重写为:</p>\n<script type=\"math/tex; mode=display\">\np(\\mathbf \\mu, \\mathbf c, \\mathbf x) = \\prod_k p(\\mu_k;m_k,s_k) \\prod_i p(c_i;\\varphi_i) p(x_i|c_i,\\mathbf \\mu)</script><p>于是ELBO为:</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\nELBO(\\mathbf m, \\mathbf s,\\mathbf \\varphi) &= \\sum_k \\mathbb E_{q(\\mu_k;m_k,s_k)} \\left[ \\log p(u_k;m_k,s_k) \\right] \\\\ \n&+ \\sum_i \\left( \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log p(c_i; \\varphi_i) \\right] + \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right]  \\right) \\\\\n& - \\sum_k \\mathbb E_{q(\\mu_k;m_k,s_k)}\\left[ \\log q(\\mu_k;m_k, s_k) \\right] \\\\\n& - \\sum_i \\mathbb E_{q(c_i;\\varphi_i)} \\left[ \\log q(c_i; \\varphi_i) \\right]\n\\end {aligned} \\tag{4}</script><p>在算法运行的每一轮迭代中，先求解$q(c_i; \\varphi_i)$：</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\n\\log q(c_i; \\varphi_i) &= \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(\\mathbf c,  \\mathbf{\\mu}, \\mathbf{x}) \\right] \\\\\n&= \\log p(c_i) +  \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right]\n\\end {aligned}</script><p>根据业务上的定义$\\log p(c_i)=-\\log k$为常数，并且根据$c_i$的定义有$p(x_i|c_i, \\mathbf \\mu)=\\prod_k p(x|\\mu_k)^{c_{ik}}$, 其中$c_{ik}$为$c_i$的第k维值，于是</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\log q(c_i; \\varphi_i) &= \\mathbb{E}_{q(\\mathbf \\mu;\\mathbf m,\\mathbf s)} \\left[ \\log p(x_i|c_i,\\mathbf \\mu; \\mathbf m, \\mathbf s, \\varphi_i) \\right] + const\\\\\n&= \\sum_k c_{ik}\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\log p(x_i|\\mathbf \\mu_k; m_k, s_k) \\right] + const \\\\\n&= \\sum_k c_{ik}\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\frac{-(x_i-\\mu_k)^2}{2}; m_k, s_k \\right] + const \\\\\n&= \\sum_k c_{ik} \\left( \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i - \\frac{1}{2} \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right] \\right) + const\n\\end{aligned} \\tag{5}</script><p>对比式子(3)和(5), 很显然有:</p>\n<script type=\"math/tex; mode=display\">\n\\varphi_{ik} = e^{\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i - \\frac{1}{2} \\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right]}</script><p>在这里根据$q(\\mu_k;m_k,s_k)$的定义，可以知道$\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[ \\mu_k;m_k, s_k \\right]x_i=m_kx_i$而$\\mathbb{E}_{q(\\mathbf \\mu_k;m_k,s_k)} \\left[\\mu_k^2;m_k,s_k\\right]=s_k^2+m_k^2$于是:</p>\n<script type=\"math/tex; mode=display\">\n\\varphi_{ik}=m_k-\\frac{1}{2}(s_k^2+m_k^2) \\tag{6}</script><p>接下来 继续来求解$q(\\mu_k;m_k,s_k)$</p>\n<script type=\"math/tex; mode=display\">\n\\begin {aligned}\n\\log q(\\mu_k;m_k,s_k) &= \\log p(\\mu_k) + \\sum_i \\mathbb E_{q(c_i,\\mathbf \\mu_{k})}\\left[  \\log p(x_i|c_i, \\mathbf \\mu_k; \\varphi_i, \\mathbf m_{-k}, \\mathbf s_{-k}) \\right] \\\\\n&= -\\frac{\\mu_k^2}{2\\sigma^2} + \\sum_i \\varphi_{ik} \\left(\\frac{-(x_i-u_k)^2}{2} \\right) + const \\\\\n&= \\mu_k \\left( \\sum_i\\varphi_{ik}x_i \\right) - \\mu_k^2 \\left( \\frac{1}{2\\sigma^2} + \\sum_i \\frac{\\varphi_{ik}}{2} \\right) + const\n\\end {aligned} \\tag{7}</script><p>观察高斯分布的形式$p(x)=\\frac{1}{\\sqrt{2\\pi}s}e^{\\frac{-(x-\\mu)^2}{2s^2}}$于是有:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\log p(x) &= -\\log (\\sqrt{2\\pi}s) - \\frac{(x-\\mu)^2}{2s^2} \\\\\n&= -\\log (\\sqrt{2\\pi}s) -  \\frac{x^2}{2s^2}-\\frac{\\mu^2}{2s^2} + \\frac{x\\mu}{s^2}\n\\end{aligned} \\tag{8}</script><p>对比(7)和(8)式，可见实际上$q(u_k;m_k, s_k)$是一个高斯分布，于是可以令:</p>\n<script type=\"math/tex; mode=display\">\n\\frac{1}{2s_k^2}=\\frac{1}{2\\sigma^2} + \\sum_i \\frac{\\varphi_{ik}}{2}</script><p>可以解出来:</p>\n<script type=\"math/tex; mode=display\">\ns_k= \\frac{1}{\\sqrt{\\frac{1}{\\sigma^2}+\\sum_i \\varphi_{ik}}} \\tag{9}</script><p>同理可以令:</p>\n<script type=\"math/tex; mode=display\">\n\\frac{m_k}{s_k^2}=\\sum_i \\varphi_{ik}x_i \\tag{10}</script><p>把（9）带入即可解得:</p>\n<script type=\"math/tex; mode=display\">\nm_k=\\frac{\\sum_i \\varphi_{ik}x_i}{\\frac{1}{\\sigma^2}+\\sum_i \\varphi_{1k}} \\tag{11}</script><p>最后我们得到了所有参数的更新公式，总结求解过程为:</p>\n<ol>\n<li>随机初始化所有参数$\\mathbf \\varphi,  \\mathbf m, \\mathbf s$</li>\n<li>按照(6)式子更新每一个参数参数$\\varphi_i$</li>\n<li>按照(9)式更新每一个参数$s_k$</li>\n<li>按照(10)式更新每一个参数$m_k$</li>\n<li>按照(4)式计算ELBO,  如果ELBO收敛则结束，否则返回第1步</li>\n</ol>\n<h2 id=\"六、代码实现\"><a href=\"#六、代码实现\" class=\"headerlink\" title=\"六、代码实现\"></a>六、代码实现</h2><p>根据上述算法的描述，可以写出实现代码，但第5步可以不需要计算ELBO, 直接迭代n步之后结束即可，具体代码如下：</p>\n<pre><code class=\"lang-python\">def solve(x, k, sigma, ephco=20):\n    &quot;&quot;&quot;\n    x: 输入数据\n    k: 超参数k，c_i的维度，在业务CASE中等于用户数\n    sigma: 超参数，需要人工调整\n    &quot;&quot;&quot;\n    n = len(x)\n    phis = np.random.random([n, k])\n    mk = np.random.random([k])\n    sk = np.random.random([k])\n    for _ in range(epoch):\n        for i in range(n):\n            phi_i_k = []\n            for _k in range(k):\n                #根据公式(6)更新参数phi_ik\n                phi_i_k.append(np.exp(mk[_k]*x[i] - (sk[_k]**2 + mk[_k]**2)/2))\n            sum_phi = sum(phi_i_k)\n            phi_i_k = [phi/sum_phi for phi in phi_i_k]\n            phis[i] = phi_i_k\n        den = np.sum(phis, axis=0) + 1/(sigma**2)\n        #根据公式(10)更新m_k\n        mk = np.matmul(x, phis)/den\n        #根据公式(11)更新s_k\n        sk = np.sqrt(1/den)\n    return mk, sk, phis\n</code></pre>\n<p>输入第二节中生成的数据x和超参数后，求解得到$m=[-32.44, -20.15, -8.14, -7.89, 2.79, 3.15, 13.78, 14.72, 15.65, 26.58]$, 对比第二节的真实参数$u$十分接近。从图像上， 根据求解出来的参数$\\mathbf m, \\mathbf s, \\mathbf \\varphi$模拟采样数据，得到的数据分布也与真实数据分布十分接近(蓝色为真实数据，橙色为模拟采样数据)</p>\n<p><img src=\"1576417800040.png\" alt=\"1576417800040\"></p>\n"},{"title":"拍卖与博弈：计算广告中的底价问题","date":"2019-07-21T13:19:46.000Z","mathjax":true,"_content":"\n\n\n## 流量交易\n\n现代计算广告中，最广泛的流量交易模式为实时竞价模式，即Real-Time-Bidding(RTB)。实时竞价顾名思义，就是在流量到达时被放到交易市场进行公开的，实时的竞拍，参与竞拍的广告主赢得竞拍后，即可获得对这个流量的投放权，整个流程如图示。\n\n![RTB系统示意图](https://blog.fyber.com/wp-content/uploads/2015/02/RTB_Infographic.png)\n\n以新浪微博的信息流广告为例，当我们刷微博时，微博的信息流(或者timeline)中会夹杂着广告，假设微博将信息流的第4和第10位作为广告位，那么每次你刷新微博后，list中的第4和第10条微博总会是推广(广告)微博。于是当用户A进入微博的信息流界面时，除了从服务器请求微博内容之外，还会同时向RTB请求广告内容，这个请求称之为曝光请求。RTB接受到该曝光请求后，将此次曝光放入流量市场进行实时拍卖，诸多广告主的投放系统(DSP)接到拍卖的事件后，立即对该曝光请求进行出价，一般来说根据曝光质量和属性不同，各个广告主对其出价也不尽相同。例如信息流第4位的曝光出价就比信息流第10位出价高，因为排在前面的广告更能引起用户注意，再如篮球鞋销售商对男性微博用户的曝光请求出价要比女性微博用户的曝光出价要高，因为篮球鞋的受众群体主要是男性。在广告主出价完成后，RTB则向出价最高的广告主请求广告内容，并且将此内容返回到微博客户端，于是用户在刷微博时就看到了这个广告，完成了一次广告曝光。这整个请求、竞价、返回广告的过程会在毫秒级别内完成。\n\n## 第二高价和底价问题\n\n在RTB的流量竞拍中是按照**第二高价**来计费的，这意味着如果第$t$次曝光n个广告主对其出价分别为$b_1(t),b_2(t),b_3(t),...,b_n(t)$，且有$b_1(t)>b_2(t)>b_3(t)>...>b_n(t)$，那么广告主1竞价胜出，但是媒体方只会向广告主1收费$b_2$元。这种计费方式主要可以让广告主失去调价的动力，否则在广告主竞价胜出之后，会立即调低出价，以期望使用更低的价格拿到曝光，从而提高自身收益。但是从媒体方的角度来说，第二高价的机制存在着$\\delta = b_1(t)-b_2(t)$的利润空间没有充分利用，于是引出了底价机制。底价机制指的是RTB在竞价拍卖的过程中，设置一个最低价格$\\alpha$, 称之为底价。当$b_1(t)<\\alpha$时则RTB则拒绝售卖该流量，或者将流量导入其它交易市场售卖。当$b_1(t) \\ge \\alpha>b_2(t)$时，按照$\\alpha$向胜出的广告主收费，当$b_2(t) \\ge \\alpha$时，则按照$b_2(t)$向胜出的广告主收费。总结起来，在第$t$次竞价中，向竞价胜出的广告主收费$r(t)$如式(1)所示。\n$$\nr(t)=\\left\\{\\begin{array}{ll}{\\alpha,} & {b_{1}(t) \\geq \\alpha>b_{2}(t)} \\\\ {b_{2}(t),} & {b_{2}(t) \\geq \\alpha} \\\\ {0,} & {\\alpha>b_{1}(t)}\\end{array}\\right. \\tag{1}\n$$\n从$r(t)$的表达式中可以看到，当满足$b_1(t) \\ge \\alpha > b_2(t)$时，媒体放可以比原来的纯二价计费方式多赚$\\beta(t)=\\alpha-b_2(t)$，但也要注意到当$\\alpha > b_1(t)$时也存在损失$b_2(t)$的风险。于是一个很自然的想法就是：\n\n> 让$\\alpha$能自动调整，让$\\alpha$在$b_1(t)$较大时，$\\alpha$也能随之增大，反之则减小。 -- 原则[1]\n\n这就是动态底价的概念，我们重新把这个可以变化的底价定义为$\\alpha(t)$，表示在第$t$次竞价中的底价。式子(1)重新表述为式(2)。\n$$\nr^{\\prime}(t)=\\left\\{\\begin{array}{ll}{\\alpha(t),} & {b_{1}(t) \\geq \\alpha(t)>b_{2}(t)} \\\\ {b_{2}(t),} & {b_{2}(t) \\geq \\alpha(t)} \\\\ {0,} & {\\alpha(t)>b_{1}(t)}\\end{array}\\right. \\tag{2}\n$$\n目前动态底价的算法主要有三种:\n\n1. 基于贝叶斯推断的底价估计算法\n2. 基于均值统计的底价估计算法\n3. 基于经验的One-Shot底价调整算法\n\n下面逐一介绍这三个算法。\n\n\n\n## 基于贝叶斯推断的底价估计算法\n\n该算法首先假设在一次RTB竞价的过程中，最高出价$B_1$为满足对数高斯分布的随机变量，并且假设其方差已知(可以当成超参数来调)，而其均值的先验分布为高斯分布，即:\n$$\n\\begin{aligned} B_{1} & \\sim \\operatorname{lognorm}\\left(\\mu, \\sigma^{2}\\right) \\\\ \\mu(t) & \\sim \\mathcal{N}\\left(\\theta(t), \\delta^{2}(t)\\right) \\end{aligned} \\tag{3}\n$$\n假设$\\mu(t)$的分布在系统上线前已经由历史时刻$[0,t]$的数据拟合得到了$\\theta(t)$和$\\delta^2(t)$，当系统在线运行时，$t+1$竞拍结束后得到一个最高出价的样本$b_1(t+1)$，这样由于对数高斯分布和高斯分布为共轭分布，可以直接后验分布\n$$\n\\begin{aligned}\n\tp(\\theta(t) | b_1(t+1))=\\mathcal{N}\\left(\\theta(t+1) | \\theta(t), \\delta^{2}(t)\\right)\n\\end{aligned} \\tag{4}\n$$\n其中\n$$\n\\begin{aligned} \\theta(t+1) &=\\frac{\\theta(t) \\delta^{2}(t)+\\sigma^{2} b_{1}(t+1)}{\\sigma^{2}+\\delta^{2}(t)} \\\\ \\delta^{2}(t+1) &=\\frac{\\delta^{2}(t) \\sigma^{2}}{\\sigma^{2}+\\delta^{2}(t)} \\end{aligned} \\tag{5}\n$$\n这样根据最大后验估计的原则，我们可以使用$\\theta(t)$来作为$\\mu$的估计，并且根据式(3)可知，可以将$log(\\theta(t))$作为对$B_1$的估计。根据原则[1], 只要简单地设置:\n$$\n\\alpha(t+1) = log(\\theta(t+1)) \\tag{6}\n$$\n可以看到基于贝叶斯推断的方法首先估计了$b_1(t+1)$，然后通过设置$\\alpha(t+1)$逼近$b_1(t+1)$的方式来最大化本次曝光的收益。\n\n## 基于均值统计的底价估计算法\n\n均值估计的想法其实十分朴素：**本次曝光的收益应当不低于历史平均收益**。于是很直接的，使用$t-1$时刻的历史平均收益来作为$\\alpha(t)$的估计：\n$$\n\\alpha(t)=\\frac{1}{M} \\sum_{i=t-M}^{t-1} r(i) \\tag{7}\n$$\n当然，线上系统的运行环境是会发生改变的，比如说流量分布，竞争环境，等等。所以收益分布应当也不是一个静态的分布，并且当样本越靠近当前时刻，则越有可能采样于当前的收益分布，所以计算平均收益时，应当使用加权平均的方式来进行，并且设置离当前时刻越近的数据，权重就越高:\n$$\n\\alpha(t)=\\frac{1}{M} \\sum_{i=t-M}^{t-1} w(i, t) r(i) \\tag{8}\n$$\n其中$w(i,t)$的选择可以多种多样，只要满足**当前时刻越近的数据，权重就越高**的原则即可。\n\n## ONE-SHOT底价调整算法\n\nONE-SHOT其实是一个调整算法而不是一个估计算法。其工作的流程是:\n\n1. 给定一个初始底价$\\alpha(t)$\n2. 根据一定规则在$\\alpha(t)$的基础上调整得到$\\alpha(t+1)$\n\n初始底价可以根据经验直接指定，也可以通过式子(7)对历史数据统计给出。而调整的原则在于:\n\n> 当底价低于$b_1$时，则应当缓慢提高底价，当底价高于$b_1$时应当迅速降低底价  --原则[2]\n\n原则[2]提出的基本思想是：当底价低于$b_1$时，虽然此时收益并非是最大化的，但毕竟有$b_2$作为保证，收益不会太低，所以底价上涨探索最优的收费不必太过于急切，但如果底价高于$b1$时，收益将会直接变为0，所以需要快速降低底价，让$b_2$来保证收益。\n\n根据原则[2]，当然可以设置固定的小步伐$s_u$和大步伐$s_l$来调整底价。但是为了平滑和鲁棒性，可以根据式(9)来执行调整过程。\n$$\n\\left\\{\\begin{array}{ll}{\\alpha(t+1)=\\left(1-\\epsilon^{t} \\lambda_{h}\\right) a(t)} & {\\text { if } \\alpha(t)>b_{1}(t)} \\\\ {\\alpha(t+1)=\\left(1+\\epsilon^{t} \\lambda_{e}\\right) a(t)} & {\\text { if } b_{1}(t) \\geq \\alpha(t) \\geq b_{2}(t)} \\\\ {\\alpha(t+1)=\\left(1+\\epsilon^{t} \\lambda_{l}\\right) \\alpha(t)} & {\\text { if } b_{2}(t)>\\alpha(t)}\\end{array}\\right. \\tag{9}\n$$\n其中$\\epsilon \\in (0, 1]$且$\\lambda_h, \\lambda_e, \\lambda_l \\in [0, 1]$, $\\epsilon$是一个时间衰减系数，如果RTB只希望在启动后个某个时间段调整底价，并且最终收敛，则可以通过这个参数来调整。而$\\lambda_h$则用于调整当$\\alpha(t) > b_1(t)$时底价的降低速度。而同理$\\lambda_l$用来调整当$\\alpha(t) < b_2(t)$时底价的提升速度。$\\lambda_e$则用于调整探索最优收益的速度。从业务上来说，往往会设置$\\lambda_h>\\lambda_l>\\lambda_e$,即当前收益越高，调整速度越慢，这与原则[2]的基本思想是一致的。\n\n\n\n## 其他讨论\n\n上述三种底价算法里，基于贝叶斯推断的算法的数学理论是最完备的，但必须要考虑到这种算法存在**最高出价符合对数高斯分布**这个假设前提的。这个假设并非放之四海而皆准的，各个广告系统的业务不一样，符合的分布也不一样，需要选择合适的分布，才能做出好的效果。并且需要注意的是，该算法优化的是单次曝光收益，并没有从全局的视角来考虑底价问题，不一定在整体收益上是最高的。\n\n基于统计均值的算法是最朴素的，也是最容易实现的，不失为一个短平快的解决方案，它应当作为任何动态底价第一版本的最好选择，至少你能有一个Baseline去观察你的系统，判断动态底价对于你的广告系统来说是否是必要的，是否真的能提升收入。\n\n而ONE-SHOT算法虽然没有数学理论支撑，但它作为一种博弈思维的产物，有从业务和全局的视角去考虑底价问题，从直觉上来看是最值得尝试的一种。当然，我想ONE-SHOT算法应当还有许多改进的空间，比如$\\lambda_h, \\lambda_e,\\lambda_l$参数的值可以跟贝叶斯推断来动态调整的值，也可以通过反馈控制的方法来动态调整。\n\n但最终，无论如何，这里都没办法给哪一种算法的优劣性下一个断论，毕竟业务多种多样，只能认真做好A/B Test，好好调参，根据实际业务表现来选择算法了。\n\n","source":"_posts/拍卖与博弈-计算广告中的底价问题.md","raw":"---\ntitle: 拍卖与博弈：计算广告中的底价问题\ndate: 2019-07-21 13:19:46\ntags: [算法, 机器学习, 计算广告]\nmathjax: true\ncategories: [计算广告]\n---\n\n\n\n## 流量交易\n\n现代计算广告中，最广泛的流量交易模式为实时竞价模式，即Real-Time-Bidding(RTB)。实时竞价顾名思义，就是在流量到达时被放到交易市场进行公开的，实时的竞拍，参与竞拍的广告主赢得竞拍后，即可获得对这个流量的投放权，整个流程如图示。\n\n![RTB系统示意图](https://blog.fyber.com/wp-content/uploads/2015/02/RTB_Infographic.png)\n\n以新浪微博的信息流广告为例，当我们刷微博时，微博的信息流(或者timeline)中会夹杂着广告，假设微博将信息流的第4和第10位作为广告位，那么每次你刷新微博后，list中的第4和第10条微博总会是推广(广告)微博。于是当用户A进入微博的信息流界面时，除了从服务器请求微博内容之外，还会同时向RTB请求广告内容，这个请求称之为曝光请求。RTB接受到该曝光请求后，将此次曝光放入流量市场进行实时拍卖，诸多广告主的投放系统(DSP)接到拍卖的事件后，立即对该曝光请求进行出价，一般来说根据曝光质量和属性不同，各个广告主对其出价也不尽相同。例如信息流第4位的曝光出价就比信息流第10位出价高，因为排在前面的广告更能引起用户注意，再如篮球鞋销售商对男性微博用户的曝光请求出价要比女性微博用户的曝光出价要高，因为篮球鞋的受众群体主要是男性。在广告主出价完成后，RTB则向出价最高的广告主请求广告内容，并且将此内容返回到微博客户端，于是用户在刷微博时就看到了这个广告，完成了一次广告曝光。这整个请求、竞价、返回广告的过程会在毫秒级别内完成。\n\n## 第二高价和底价问题\n\n在RTB的流量竞拍中是按照**第二高价**来计费的，这意味着如果第$t$次曝光n个广告主对其出价分别为$b_1(t),b_2(t),b_3(t),...,b_n(t)$，且有$b_1(t)>b_2(t)>b_3(t)>...>b_n(t)$，那么广告主1竞价胜出，但是媒体方只会向广告主1收费$b_2$元。这种计费方式主要可以让广告主失去调价的动力，否则在广告主竞价胜出之后，会立即调低出价，以期望使用更低的价格拿到曝光，从而提高自身收益。但是从媒体方的角度来说，第二高价的机制存在着$\\delta = b_1(t)-b_2(t)$的利润空间没有充分利用，于是引出了底价机制。底价机制指的是RTB在竞价拍卖的过程中，设置一个最低价格$\\alpha$, 称之为底价。当$b_1(t)<\\alpha$时则RTB则拒绝售卖该流量，或者将流量导入其它交易市场售卖。当$b_1(t) \\ge \\alpha>b_2(t)$时，按照$\\alpha$向胜出的广告主收费，当$b_2(t) \\ge \\alpha$时，则按照$b_2(t)$向胜出的广告主收费。总结起来，在第$t$次竞价中，向竞价胜出的广告主收费$r(t)$如式(1)所示。\n$$\nr(t)=\\left\\{\\begin{array}{ll}{\\alpha,} & {b_{1}(t) \\geq \\alpha>b_{2}(t)} \\\\ {b_{2}(t),} & {b_{2}(t) \\geq \\alpha} \\\\ {0,} & {\\alpha>b_{1}(t)}\\end{array}\\right. \\tag{1}\n$$\n从$r(t)$的表达式中可以看到，当满足$b_1(t) \\ge \\alpha > b_2(t)$时，媒体放可以比原来的纯二价计费方式多赚$\\beta(t)=\\alpha-b_2(t)$，但也要注意到当$\\alpha > b_1(t)$时也存在损失$b_2(t)$的风险。于是一个很自然的想法就是：\n\n> 让$\\alpha$能自动调整，让$\\alpha$在$b_1(t)$较大时，$\\alpha$也能随之增大，反之则减小。 -- 原则[1]\n\n这就是动态底价的概念，我们重新把这个可以变化的底价定义为$\\alpha(t)$，表示在第$t$次竞价中的底价。式子(1)重新表述为式(2)。\n$$\nr^{\\prime}(t)=\\left\\{\\begin{array}{ll}{\\alpha(t),} & {b_{1}(t) \\geq \\alpha(t)>b_{2}(t)} \\\\ {b_{2}(t),} & {b_{2}(t) \\geq \\alpha(t)} \\\\ {0,} & {\\alpha(t)>b_{1}(t)}\\end{array}\\right. \\tag{2}\n$$\n目前动态底价的算法主要有三种:\n\n1. 基于贝叶斯推断的底价估计算法\n2. 基于均值统计的底价估计算法\n3. 基于经验的One-Shot底价调整算法\n\n下面逐一介绍这三个算法。\n\n\n\n## 基于贝叶斯推断的底价估计算法\n\n该算法首先假设在一次RTB竞价的过程中，最高出价$B_1$为满足对数高斯分布的随机变量，并且假设其方差已知(可以当成超参数来调)，而其均值的先验分布为高斯分布，即:\n$$\n\\begin{aligned} B_{1} & \\sim \\operatorname{lognorm}\\left(\\mu, \\sigma^{2}\\right) \\\\ \\mu(t) & \\sim \\mathcal{N}\\left(\\theta(t), \\delta^{2}(t)\\right) \\end{aligned} \\tag{3}\n$$\n假设$\\mu(t)$的分布在系统上线前已经由历史时刻$[0,t]$的数据拟合得到了$\\theta(t)$和$\\delta^2(t)$，当系统在线运行时，$t+1$竞拍结束后得到一个最高出价的样本$b_1(t+1)$，这样由于对数高斯分布和高斯分布为共轭分布，可以直接后验分布\n$$\n\\begin{aligned}\n\tp(\\theta(t) | b_1(t+1))=\\mathcal{N}\\left(\\theta(t+1) | \\theta(t), \\delta^{2}(t)\\right)\n\\end{aligned} \\tag{4}\n$$\n其中\n$$\n\\begin{aligned} \\theta(t+1) &=\\frac{\\theta(t) \\delta^{2}(t)+\\sigma^{2} b_{1}(t+1)}{\\sigma^{2}+\\delta^{2}(t)} \\\\ \\delta^{2}(t+1) &=\\frac{\\delta^{2}(t) \\sigma^{2}}{\\sigma^{2}+\\delta^{2}(t)} \\end{aligned} \\tag{5}\n$$\n这样根据最大后验估计的原则，我们可以使用$\\theta(t)$来作为$\\mu$的估计，并且根据式(3)可知，可以将$log(\\theta(t))$作为对$B_1$的估计。根据原则[1], 只要简单地设置:\n$$\n\\alpha(t+1) = log(\\theta(t+1)) \\tag{6}\n$$\n可以看到基于贝叶斯推断的方法首先估计了$b_1(t+1)$，然后通过设置$\\alpha(t+1)$逼近$b_1(t+1)$的方式来最大化本次曝光的收益。\n\n## 基于均值统计的底价估计算法\n\n均值估计的想法其实十分朴素：**本次曝光的收益应当不低于历史平均收益**。于是很直接的，使用$t-1$时刻的历史平均收益来作为$\\alpha(t)$的估计：\n$$\n\\alpha(t)=\\frac{1}{M} \\sum_{i=t-M}^{t-1} r(i) \\tag{7}\n$$\n当然，线上系统的运行环境是会发生改变的，比如说流量分布，竞争环境，等等。所以收益分布应当也不是一个静态的分布，并且当样本越靠近当前时刻，则越有可能采样于当前的收益分布，所以计算平均收益时，应当使用加权平均的方式来进行，并且设置离当前时刻越近的数据，权重就越高:\n$$\n\\alpha(t)=\\frac{1}{M} \\sum_{i=t-M}^{t-1} w(i, t) r(i) \\tag{8}\n$$\n其中$w(i,t)$的选择可以多种多样，只要满足**当前时刻越近的数据，权重就越高**的原则即可。\n\n## ONE-SHOT底价调整算法\n\nONE-SHOT其实是一个调整算法而不是一个估计算法。其工作的流程是:\n\n1. 给定一个初始底价$\\alpha(t)$\n2. 根据一定规则在$\\alpha(t)$的基础上调整得到$\\alpha(t+1)$\n\n初始底价可以根据经验直接指定，也可以通过式子(7)对历史数据统计给出。而调整的原则在于:\n\n> 当底价低于$b_1$时，则应当缓慢提高底价，当底价高于$b_1$时应当迅速降低底价  --原则[2]\n\n原则[2]提出的基本思想是：当底价低于$b_1$时，虽然此时收益并非是最大化的，但毕竟有$b_2$作为保证，收益不会太低，所以底价上涨探索最优的收费不必太过于急切，但如果底价高于$b1$时，收益将会直接变为0，所以需要快速降低底价，让$b_2$来保证收益。\n\n根据原则[2]，当然可以设置固定的小步伐$s_u$和大步伐$s_l$来调整底价。但是为了平滑和鲁棒性，可以根据式(9)来执行调整过程。\n$$\n\\left\\{\\begin{array}{ll}{\\alpha(t+1)=\\left(1-\\epsilon^{t} \\lambda_{h}\\right) a(t)} & {\\text { if } \\alpha(t)>b_{1}(t)} \\\\ {\\alpha(t+1)=\\left(1+\\epsilon^{t} \\lambda_{e}\\right) a(t)} & {\\text { if } b_{1}(t) \\geq \\alpha(t) \\geq b_{2}(t)} \\\\ {\\alpha(t+1)=\\left(1+\\epsilon^{t} \\lambda_{l}\\right) \\alpha(t)} & {\\text { if } b_{2}(t)>\\alpha(t)}\\end{array}\\right. \\tag{9}\n$$\n其中$\\epsilon \\in (0, 1]$且$\\lambda_h, \\lambda_e, \\lambda_l \\in [0, 1]$, $\\epsilon$是一个时间衰减系数，如果RTB只希望在启动后个某个时间段调整底价，并且最终收敛，则可以通过这个参数来调整。而$\\lambda_h$则用于调整当$\\alpha(t) > b_1(t)$时底价的降低速度。而同理$\\lambda_l$用来调整当$\\alpha(t) < b_2(t)$时底价的提升速度。$\\lambda_e$则用于调整探索最优收益的速度。从业务上来说，往往会设置$\\lambda_h>\\lambda_l>\\lambda_e$,即当前收益越高，调整速度越慢，这与原则[2]的基本思想是一致的。\n\n\n\n## 其他讨论\n\n上述三种底价算法里，基于贝叶斯推断的算法的数学理论是最完备的，但必须要考虑到这种算法存在**最高出价符合对数高斯分布**这个假设前提的。这个假设并非放之四海而皆准的，各个广告系统的业务不一样，符合的分布也不一样，需要选择合适的分布，才能做出好的效果。并且需要注意的是，该算法优化的是单次曝光收益，并没有从全局的视角来考虑底价问题，不一定在整体收益上是最高的。\n\n基于统计均值的算法是最朴素的，也是最容易实现的，不失为一个短平快的解决方案，它应当作为任何动态底价第一版本的最好选择，至少你能有一个Baseline去观察你的系统，判断动态底价对于你的广告系统来说是否是必要的，是否真的能提升收入。\n\n而ONE-SHOT算法虽然没有数学理论支撑，但它作为一种博弈思维的产物，有从业务和全局的视角去考虑底价问题，从直觉上来看是最值得尝试的一种。当然，我想ONE-SHOT算法应当还有许多改进的空间，比如$\\lambda_h, \\lambda_e,\\lambda_l$参数的值可以跟贝叶斯推断来动态调整的值，也可以通过反馈控制的方法来动态调整。\n\n但最终，无论如何，这里都没办法给哪一种算法的优劣性下一个断论，毕竟业务多种多样，只能认真做好A/B Test，好好调参，根据实际业务表现来选择算法了。\n\n","slug":"拍卖与博弈-计算广告中的底价问题","published":1,"updated":"2020-04-12T13:22:37.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8x40sis0003q69pmheup9dy","content":"<h2 id=\"流量交易\"><a href=\"#流量交易\" class=\"headerlink\" title=\"流量交易\"></a>流量交易</h2><p>现代计算广告中，最广泛的流量交易模式为实时竞价模式，即Real-Time-Bidding(RTB)。实时竞价顾名思义，就是在流量到达时被放到交易市场进行公开的，实时的竞拍，参与竞拍的广告主赢得竞拍后，即可获得对这个流量的投放权，整个流程如图示。</p>\n<p><img src=\"https://blog.fyber.com/wp-content/uploads/2015/02/RTB_Infographic.png\" alt=\"RTB系统示意图\"></p>\n<p>以新浪微博的信息流广告为例，当我们刷微博时，微博的信息流(或者timeline)中会夹杂着广告，假设微博将信息流的第4和第10位作为广告位，那么每次你刷新微博后，list中的第4和第10条微博总会是推广(广告)微博。于是当用户A进入微博的信息流界面时，除了从服务器请求微博内容之外，还会同时向RTB请求广告内容，这个请求称之为曝光请求。RTB接受到该曝光请求后，将此次曝光放入流量市场进行实时拍卖，诸多广告主的投放系统(DSP)接到拍卖的事件后，立即对该曝光请求进行出价，一般来说根据曝光质量和属性不同，各个广告主对其出价也不尽相同。例如信息流第4位的曝光出价就比信息流第10位出价高，因为排在前面的广告更能引起用户注意，再如篮球鞋销售商对男性微博用户的曝光请求出价要比女性微博用户的曝光出价要高，因为篮球鞋的受众群体主要是男性。在广告主出价完成后，RTB则向出价最高的广告主请求广告内容，并且将此内容返回到微博客户端，于是用户在刷微博时就看到了这个广告，完成了一次广告曝光。这整个请求、竞价、返回广告的过程会在毫秒级别内完成。</p>\n<h2 id=\"第二高价和底价问题\"><a href=\"#第二高价和底价问题\" class=\"headerlink\" title=\"第二高价和底价问题\"></a>第二高价和底价问题</h2><p>在RTB的流量竞拍中是按照<strong>第二高价</strong>来计费的，这意味着如果第$t$次曝光n个广告主对其出价分别为$b_1(t),b_2(t),b_3(t),…,b_n(t)$，且有$b_1(t)&gt;b_2(t)&gt;b_3(t)&gt;…&gt;b_n(t)$，那么广告主1竞价胜出，但是媒体方只会向广告主1收费$b_2$元。这种计费方式主要可以让广告主失去调价的动力，否则在广告主竞价胜出之后，会立即调低出价，以期望使用更低的价格拿到曝光，从而提高自身收益。但是从媒体方的角度来说，第二高价的机制存在着$\\delta = b_1(t)-b_2(t)$的利润空间没有充分利用，于是引出了底价机制。底价机制指的是RTB在竞价拍卖的过程中，设置一个最低价格$\\alpha$, 称之为底价。当$b_1(t)&lt;\\alpha$时则RTB则拒绝售卖该流量，或者将流量导入其它交易市场售卖。当$b_1(t) \\ge \\alpha&gt;b_2(t)$时，按照$\\alpha$向胜出的广告主收费，当$b_2(t) \\ge \\alpha$时，则按照$b_2(t)$向胜出的广告主收费。总结起来，在第$t$次竞价中，向竞价胜出的广告主收费$r(t)$如式(1)所示。</p>\n<script type=\"math/tex; mode=display\">\nr(t)=\\left\\{\\begin{array}{ll}{\\alpha,} & {b_{1}(t) \\geq \\alpha>b_{2}(t)} \\\\ {b_{2}(t),} & {b_{2}(t) \\geq \\alpha} \\\\ {0,} & {\\alpha>b_{1}(t)}\\end{array}\\right. \\tag{1}</script><p>从$r(t)$的表达式中可以看到，当满足$b_1(t) \\ge \\alpha &gt; b_2(t)$时，媒体放可以比原来的纯二价计费方式多赚$\\beta(t)=\\alpha-b_2(t)$，但也要注意到当$\\alpha &gt; b_1(t)$时也存在损失$b_2(t)$的风险。于是一个很自然的想法就是：</p>\n<blockquote>\n<p>让$\\alpha$能自动调整，让$\\alpha$在$b_1(t)$较大时，$\\alpha$也能随之增大，反之则减小。 — 原则[1]</p>\n</blockquote>\n<p>这就是动态底价的概念，我们重新把这个可以变化的底价定义为$\\alpha(t)$，表示在第$t$次竞价中的底价。式子(1)重新表述为式(2)。</p>\n<script type=\"math/tex; mode=display\">\nr^{\\prime}(t)=\\left\\{\\begin{array}{ll}{\\alpha(t),} & {b_{1}(t) \\geq \\alpha(t)>b_{2}(t)} \\\\ {b_{2}(t),} & {b_{2}(t) \\geq \\alpha(t)} \\\\ {0,} & {\\alpha(t)>b_{1}(t)}\\end{array}\\right. \\tag{2}</script><p>目前动态底价的算法主要有三种:</p>\n<ol>\n<li>基于贝叶斯推断的底价估计算法</li>\n<li>基于均值统计的底价估计算法</li>\n<li>基于经验的One-Shot底价调整算法</li>\n</ol>\n<p>下面逐一介绍这三个算法。</p>\n<h2 id=\"基于贝叶斯推断的底价估计算法\"><a href=\"#基于贝叶斯推断的底价估计算法\" class=\"headerlink\" title=\"基于贝叶斯推断的底价估计算法\"></a>基于贝叶斯推断的底价估计算法</h2><p>该算法首先假设在一次RTB竞价的过程中，最高出价$B_1$为满足对数高斯分布的随机变量，并且假设其方差已知(可以当成超参数来调)，而其均值的先验分布为高斯分布，即:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned} B_{1} & \\sim \\operatorname{lognorm}\\left(\\mu, \\sigma^{2}\\right) \\\\ \\mu(t) & \\sim \\mathcal{N}\\left(\\theta(t), \\delta^{2}(t)\\right) \\end{aligned} \\tag{3}</script><p>假设$\\mu(t)$的分布在系统上线前已经由历史时刻$[0,t]$的数据拟合得到了$\\theta(t)$和$\\delta^2(t)$，当系统在线运行时，$t+1$竞拍结束后得到一个最高出价的样本$b_1(t+1)$，这样由于对数高斯分布和高斯分布为共轭分布，可以直接后验分布</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n    p(\\theta(t) | b_1(t+1))=\\mathcal{N}\\left(\\theta(t+1) | \\theta(t), \\delta^{2}(t)\\right)\n\\end{aligned} \\tag{4}</script><p>其中</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned} \\theta(t+1) &=\\frac{\\theta(t) \\delta^{2}(t)+\\sigma^{2} b_{1}(t+1)}{\\sigma^{2}+\\delta^{2}(t)} \\\\ \\delta^{2}(t+1) &=\\frac{\\delta^{2}(t) \\sigma^{2}}{\\sigma^{2}+\\delta^{2}(t)} \\end{aligned} \\tag{5}</script><p>这样根据最大后验估计的原则，我们可以使用$\\theta(t)$来作为$\\mu$的估计，并且根据式(3)可知，可以将$log(\\theta(t))$作为对$B_1$的估计。根据原则[1], 只要简单地设置:</p>\n<script type=\"math/tex; mode=display\">\n\\alpha(t+1) = log(\\theta(t+1)) \\tag{6}</script><p>可以看到基于贝叶斯推断的方法首先估计了$b_1(t+1)$，然后通过设置$\\alpha(t+1)$逼近$b_1(t+1)$的方式来最大化本次曝光的收益。</p>\n<h2 id=\"基于均值统计的底价估计算法\"><a href=\"#基于均值统计的底价估计算法\" class=\"headerlink\" title=\"基于均值统计的底价估计算法\"></a>基于均值统计的底价估计算法</h2><p>均值估计的想法其实十分朴素：<strong>本次曝光的收益应当不低于历史平均收益</strong>。于是很直接的，使用$t-1$时刻的历史平均收益来作为$\\alpha(t)$的估计：</p>\n<script type=\"math/tex; mode=display\">\n\\alpha(t)=\\frac{1}{M} \\sum_{i=t-M}^{t-1} r(i) \\tag{7}</script><p>当然，线上系统的运行环境是会发生改变的，比如说流量分布，竞争环境，等等。所以收益分布应当也不是一个静态的分布，并且当样本越靠近当前时刻，则越有可能采样于当前的收益分布，所以计算平均收益时，应当使用加权平均的方式来进行，并且设置离当前时刻越近的数据，权重就越高:</p>\n<script type=\"math/tex; mode=display\">\n\\alpha(t)=\\frac{1}{M} \\sum_{i=t-M}^{t-1} w(i, t) r(i) \\tag{8}</script><p>其中$w(i,t)$的选择可以多种多样，只要满足<strong>当前时刻越近的数据，权重就越高</strong>的原则即可。</p>\n<h2 id=\"ONE-SHOT底价调整算法\"><a href=\"#ONE-SHOT底价调整算法\" class=\"headerlink\" title=\"ONE-SHOT底价调整算法\"></a>ONE-SHOT底价调整算法</h2><p>ONE-SHOT其实是一个调整算法而不是一个估计算法。其工作的流程是:</p>\n<ol>\n<li>给定一个初始底价$\\alpha(t)$</li>\n<li>根据一定规则在$\\alpha(t)$的基础上调整得到$\\alpha(t+1)$</li>\n</ol>\n<p>初始底价可以根据经验直接指定，也可以通过式子(7)对历史数据统计给出。而调整的原则在于:</p>\n<blockquote>\n<p>当底价低于$b_1$时，则应当缓慢提高底价，当底价高于$b_1$时应当迅速降低底价  —原则[2]</p>\n</blockquote>\n<p>原则[2]提出的基本思想是：当底价低于$b_1$时，虽然此时收益并非是最大化的，但毕竟有$b_2$作为保证，收益不会太低，所以底价上涨探索最优的收费不必太过于急切，但如果底价高于$b1$时，收益将会直接变为0，所以需要快速降低底价，让$b_2$来保证收益。</p>\n<p>根据原则[2]，当然可以设置固定的小步伐$s_u$和大步伐$s_l$来调整底价。但是为了平滑和鲁棒性，可以根据式(9)来执行调整过程。</p>\n<script type=\"math/tex; mode=display\">\n\\left\\{\\begin{array}{ll}{\\alpha(t+1)=\\left(1-\\epsilon^{t} \\lambda_{h}\\right) a(t)} & {\\text { if } \\alpha(t)>b_{1}(t)} \\\\ {\\alpha(t+1)=\\left(1+\\epsilon^{t} \\lambda_{e}\\right) a(t)} & {\\text { if } b_{1}(t) \\geq \\alpha(t) \\geq b_{2}(t)} \\\\ {\\alpha(t+1)=\\left(1+\\epsilon^{t} \\lambda_{l}\\right) \\alpha(t)} & {\\text { if } b_{2}(t)>\\alpha(t)}\\end{array}\\right. \\tag{9}</script><p>其中$\\epsilon \\in (0, 1]$且$\\lambda_h, \\lambda_e, \\lambda_l \\in [0, 1]$, $\\epsilon$是一个时间衰减系数，如果RTB只希望在启动后个某个时间段调整底价，并且最终收敛，则可以通过这个参数来调整。而$\\lambda_h$则用于调整当$\\alpha(t) &gt; b_1(t)$时底价的降低速度。而同理$\\lambda_l$用来调整当$\\alpha(t) &lt; b_2(t)$时底价的提升速度。$\\lambda_e$则用于调整探索最优收益的速度。从业务上来说，往往会设置$\\lambda_h&gt;\\lambda_l&gt;\\lambda_e$,即当前收益越高，调整速度越慢，这与原则[2]的基本思想是一致的。</p>\n<h2 id=\"其他讨论\"><a href=\"#其他讨论\" class=\"headerlink\" title=\"其他讨论\"></a>其他讨论</h2><p>上述三种底价算法里，基于贝叶斯推断的算法的数学理论是最完备的，但必须要考虑到这种算法存在<strong>最高出价符合对数高斯分布</strong>这个假设前提的。这个假设并非放之四海而皆准的，各个广告系统的业务不一样，符合的分布也不一样，需要选择合适的分布，才能做出好的效果。并且需要注意的是，该算法优化的是单次曝光收益，并没有从全局的视角来考虑底价问题，不一定在整体收益上是最高的。</p>\n<p>基于统计均值的算法是最朴素的，也是最容易实现的，不失为一个短平快的解决方案，它应当作为任何动态底价第一版本的最好选择，至少你能有一个Baseline去观察你的系统，判断动态底价对于你的广告系统来说是否是必要的，是否真的能提升收入。</p>\n<p>而ONE-SHOT算法虽然没有数学理论支撑，但它作为一种博弈思维的产物，有从业务和全局的视角去考虑底价问题，从直觉上来看是最值得尝试的一种。当然，我想ONE-SHOT算法应当还有许多改进的空间，比如$\\lambda_h, \\lambda_e,\\lambda_l$参数的值可以跟贝叶斯推断来动态调整的值，也可以通过反馈控制的方法来动态调整。</p>\n<p>但最终，无论如何，这里都没办法给哪一种算法的优劣性下一个断论，毕竟业务多种多样，只能认真做好A/B Test，好好调参，根据实际业务表现来选择算法了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"流量交易\"><a href=\"#流量交易\" class=\"headerlink\" title=\"流量交易\"></a>流量交易</h2><p>现代计算广告中，最广泛的流量交易模式为实时竞价模式，即Real-Time-Bidding(RTB)。实时竞价顾名思义，就是在流量到达时被放到交易市场进行公开的，实时的竞拍，参与竞拍的广告主赢得竞拍后，即可获得对这个流量的投放权，整个流程如图示。</p>\n<p><img src=\"https://blog.fyber.com/wp-content/uploads/2015/02/RTB_Infographic.png\" alt=\"RTB系统示意图\"></p>\n<p>以新浪微博的信息流广告为例，当我们刷微博时，微博的信息流(或者timeline)中会夹杂着广告，假设微博将信息流的第4和第10位作为广告位，那么每次你刷新微博后，list中的第4和第10条微博总会是推广(广告)微博。于是当用户A进入微博的信息流界面时，除了从服务器请求微博内容之外，还会同时向RTB请求广告内容，这个请求称之为曝光请求。RTB接受到该曝光请求后，将此次曝光放入流量市场进行实时拍卖，诸多广告主的投放系统(DSP)接到拍卖的事件后，立即对该曝光请求进行出价，一般来说根据曝光质量和属性不同，各个广告主对其出价也不尽相同。例如信息流第4位的曝光出价就比信息流第10位出价高，因为排在前面的广告更能引起用户注意，再如篮球鞋销售商对男性微博用户的曝光请求出价要比女性微博用户的曝光出价要高，因为篮球鞋的受众群体主要是男性。在广告主出价完成后，RTB则向出价最高的广告主请求广告内容，并且将此内容返回到微博客户端，于是用户在刷微博时就看到了这个广告，完成了一次广告曝光。这整个请求、竞价、返回广告的过程会在毫秒级别内完成。</p>\n<h2 id=\"第二高价和底价问题\"><a href=\"#第二高价和底价问题\" class=\"headerlink\" title=\"第二高价和底价问题\"></a>第二高价和底价问题</h2><p>在RTB的流量竞拍中是按照<strong>第二高价</strong>来计费的，这意味着如果第$t$次曝光n个广告主对其出价分别为$b_1(t),b_2(t),b_3(t),…,b_n(t)$，且有$b_1(t)&gt;b_2(t)&gt;b_3(t)&gt;…&gt;b_n(t)$，那么广告主1竞价胜出，但是媒体方只会向广告主1收费$b_2$元。这种计费方式主要可以让广告主失去调价的动力，否则在广告主竞价胜出之后，会立即调低出价，以期望使用更低的价格拿到曝光，从而提高自身收益。但是从媒体方的角度来说，第二高价的机制存在着$\\delta = b_1(t)-b_2(t)$的利润空间没有充分利用，于是引出了底价机制。底价机制指的是RTB在竞价拍卖的过程中，设置一个最低价格$\\alpha$, 称之为底价。当$b_1(t)&lt;\\alpha$时则RTB则拒绝售卖该流量，或者将流量导入其它交易市场售卖。当$b_1(t) \\ge \\alpha&gt;b_2(t)$时，按照$\\alpha$向胜出的广告主收费，当$b_2(t) \\ge \\alpha$时，则按照$b_2(t)$向胜出的广告主收费。总结起来，在第$t$次竞价中，向竞价胜出的广告主收费$r(t)$如式(1)所示。</p>\n<script type=\"math/tex; mode=display\">\nr(t)=\\left\\{\\begin{array}{ll}{\\alpha,} & {b_{1}(t) \\geq \\alpha>b_{2}(t)} \\\\ {b_{2}(t),} & {b_{2}(t) \\geq \\alpha} \\\\ {0,} & {\\alpha>b_{1}(t)}\\end{array}\\right. \\tag{1}</script><p>从$r(t)$的表达式中可以看到，当满足$b_1(t) \\ge \\alpha &gt; b_2(t)$时，媒体放可以比原来的纯二价计费方式多赚$\\beta(t)=\\alpha-b_2(t)$，但也要注意到当$\\alpha &gt; b_1(t)$时也存在损失$b_2(t)$的风险。于是一个很自然的想法就是：</p>\n<blockquote>\n<p>让$\\alpha$能自动调整，让$\\alpha$在$b_1(t)$较大时，$\\alpha$也能随之增大，反之则减小。 — 原则[1]</p>\n</blockquote>\n<p>这就是动态底价的概念，我们重新把这个可以变化的底价定义为$\\alpha(t)$，表示在第$t$次竞价中的底价。式子(1)重新表述为式(2)。</p>\n<script type=\"math/tex; mode=display\">\nr^{\\prime}(t)=\\left\\{\\begin{array}{ll}{\\alpha(t),} & {b_{1}(t) \\geq \\alpha(t)>b_{2}(t)} \\\\ {b_{2}(t),} & {b_{2}(t) \\geq \\alpha(t)} \\\\ {0,} & {\\alpha(t)>b_{1}(t)}\\end{array}\\right. \\tag{2}</script><p>目前动态底价的算法主要有三种:</p>\n<ol>\n<li>基于贝叶斯推断的底价估计算法</li>\n<li>基于均值统计的底价估计算法</li>\n<li>基于经验的One-Shot底价调整算法</li>\n</ol>\n<p>下面逐一介绍这三个算法。</p>\n<h2 id=\"基于贝叶斯推断的底价估计算法\"><a href=\"#基于贝叶斯推断的底价估计算法\" class=\"headerlink\" title=\"基于贝叶斯推断的底价估计算法\"></a>基于贝叶斯推断的底价估计算法</h2><p>该算法首先假设在一次RTB竞价的过程中，最高出价$B_1$为满足对数高斯分布的随机变量，并且假设其方差已知(可以当成超参数来调)，而其均值的先验分布为高斯分布，即:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned} B_{1} & \\sim \\operatorname{lognorm}\\left(\\mu, \\sigma^{2}\\right) \\\\ \\mu(t) & \\sim \\mathcal{N}\\left(\\theta(t), \\delta^{2}(t)\\right) \\end{aligned} \\tag{3}</script><p>假设$\\mu(t)$的分布在系统上线前已经由历史时刻$[0,t]$的数据拟合得到了$\\theta(t)$和$\\delta^2(t)$，当系统在线运行时，$t+1$竞拍结束后得到一个最高出价的样本$b_1(t+1)$，这样由于对数高斯分布和高斯分布为共轭分布，可以直接后验分布</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n    p(\\theta(t) | b_1(t+1))=\\mathcal{N}\\left(\\theta(t+1) | \\theta(t), \\delta^{2}(t)\\right)\n\\end{aligned} \\tag{4}</script><p>其中</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned} \\theta(t+1) &=\\frac{\\theta(t) \\delta^{2}(t)+\\sigma^{2} b_{1}(t+1)}{\\sigma^{2}+\\delta^{2}(t)} \\\\ \\delta^{2}(t+1) &=\\frac{\\delta^{2}(t) \\sigma^{2}}{\\sigma^{2}+\\delta^{2}(t)} \\end{aligned} \\tag{5}</script><p>这样根据最大后验估计的原则，我们可以使用$\\theta(t)$来作为$\\mu$的估计，并且根据式(3)可知，可以将$log(\\theta(t))$作为对$B_1$的估计。根据原则[1], 只要简单地设置:</p>\n<script type=\"math/tex; mode=display\">\n\\alpha(t+1) = log(\\theta(t+1)) \\tag{6}</script><p>可以看到基于贝叶斯推断的方法首先估计了$b_1(t+1)$，然后通过设置$\\alpha(t+1)$逼近$b_1(t+1)$的方式来最大化本次曝光的收益。</p>\n<h2 id=\"基于均值统计的底价估计算法\"><a href=\"#基于均值统计的底价估计算法\" class=\"headerlink\" title=\"基于均值统计的底价估计算法\"></a>基于均值统计的底价估计算法</h2><p>均值估计的想法其实十分朴素：<strong>本次曝光的收益应当不低于历史平均收益</strong>。于是很直接的，使用$t-1$时刻的历史平均收益来作为$\\alpha(t)$的估计：</p>\n<script type=\"math/tex; mode=display\">\n\\alpha(t)=\\frac{1}{M} \\sum_{i=t-M}^{t-1} r(i) \\tag{7}</script><p>当然，线上系统的运行环境是会发生改变的，比如说流量分布，竞争环境，等等。所以收益分布应当也不是一个静态的分布，并且当样本越靠近当前时刻，则越有可能采样于当前的收益分布，所以计算平均收益时，应当使用加权平均的方式来进行，并且设置离当前时刻越近的数据，权重就越高:</p>\n<script type=\"math/tex; mode=display\">\n\\alpha(t)=\\frac{1}{M} \\sum_{i=t-M}^{t-1} w(i, t) r(i) \\tag{8}</script><p>其中$w(i,t)$的选择可以多种多样，只要满足<strong>当前时刻越近的数据，权重就越高</strong>的原则即可。</p>\n<h2 id=\"ONE-SHOT底价调整算法\"><a href=\"#ONE-SHOT底价调整算法\" class=\"headerlink\" title=\"ONE-SHOT底价调整算法\"></a>ONE-SHOT底价调整算法</h2><p>ONE-SHOT其实是一个调整算法而不是一个估计算法。其工作的流程是:</p>\n<ol>\n<li>给定一个初始底价$\\alpha(t)$</li>\n<li>根据一定规则在$\\alpha(t)$的基础上调整得到$\\alpha(t+1)$</li>\n</ol>\n<p>初始底价可以根据经验直接指定，也可以通过式子(7)对历史数据统计给出。而调整的原则在于:</p>\n<blockquote>\n<p>当底价低于$b_1$时，则应当缓慢提高底价，当底价高于$b_1$时应当迅速降低底价  —原则[2]</p>\n</blockquote>\n<p>原则[2]提出的基本思想是：当底价低于$b_1$时，虽然此时收益并非是最大化的，但毕竟有$b_2$作为保证，收益不会太低，所以底价上涨探索最优的收费不必太过于急切，但如果底价高于$b1$时，收益将会直接变为0，所以需要快速降低底价，让$b_2$来保证收益。</p>\n<p>根据原则[2]，当然可以设置固定的小步伐$s_u$和大步伐$s_l$来调整底价。但是为了平滑和鲁棒性，可以根据式(9)来执行调整过程。</p>\n<script type=\"math/tex; mode=display\">\n\\left\\{\\begin{array}{ll}{\\alpha(t+1)=\\left(1-\\epsilon^{t} \\lambda_{h}\\right) a(t)} & {\\text { if } \\alpha(t)>b_{1}(t)} \\\\ {\\alpha(t+1)=\\left(1+\\epsilon^{t} \\lambda_{e}\\right) a(t)} & {\\text { if } b_{1}(t) \\geq \\alpha(t) \\geq b_{2}(t)} \\\\ {\\alpha(t+1)=\\left(1+\\epsilon^{t} \\lambda_{l}\\right) \\alpha(t)} & {\\text { if } b_{2}(t)>\\alpha(t)}\\end{array}\\right. \\tag{9}</script><p>其中$\\epsilon \\in (0, 1]$且$\\lambda_h, \\lambda_e, \\lambda_l \\in [0, 1]$, $\\epsilon$是一个时间衰减系数，如果RTB只希望在启动后个某个时间段调整底价，并且最终收敛，则可以通过这个参数来调整。而$\\lambda_h$则用于调整当$\\alpha(t) &gt; b_1(t)$时底价的降低速度。而同理$\\lambda_l$用来调整当$\\alpha(t) &lt; b_2(t)$时底价的提升速度。$\\lambda_e$则用于调整探索最优收益的速度。从业务上来说，往往会设置$\\lambda_h&gt;\\lambda_l&gt;\\lambda_e$,即当前收益越高，调整速度越慢，这与原则[2]的基本思想是一致的。</p>\n<h2 id=\"其他讨论\"><a href=\"#其他讨论\" class=\"headerlink\" title=\"其他讨论\"></a>其他讨论</h2><p>上述三种底价算法里，基于贝叶斯推断的算法的数学理论是最完备的，但必须要考虑到这种算法存在<strong>最高出价符合对数高斯分布</strong>这个假设前提的。这个假设并非放之四海而皆准的，各个广告系统的业务不一样，符合的分布也不一样，需要选择合适的分布，才能做出好的效果。并且需要注意的是，该算法优化的是单次曝光收益，并没有从全局的视角来考虑底价问题，不一定在整体收益上是最高的。</p>\n<p>基于统计均值的算法是最朴素的，也是最容易实现的，不失为一个短平快的解决方案，它应当作为任何动态底价第一版本的最好选择，至少你能有一个Baseline去观察你的系统，判断动态底价对于你的广告系统来说是否是必要的，是否真的能提升收入。</p>\n<p>而ONE-SHOT算法虽然没有数学理论支撑，但它作为一种博弈思维的产物，有从业务和全局的视角去考虑底价问题，从直觉上来看是最值得尝试的一种。当然，我想ONE-SHOT算法应当还有许多改进的空间，比如$\\lambda_h, \\lambda_e,\\lambda_l$参数的值可以跟贝叶斯推断来动态调整的值，也可以通过反馈控制的方法来动态调整。</p>\n<p>但最终，无论如何，这里都没办法给哪一种算法的优劣性下一个断论，毕竟业务多种多样，只能认真做好A/B Test，好好调参，根据实际业务表现来选择算法了。</p>\n"},{"title":"策略梯度与A2C算法","date":"2019-08-24T19:44:15.000Z","mathjax":true,"typora-root-url":"TRPO-使策略梯度单调递增的杀器","_content":"\n\n\n## 从Q learning到策略梯度\n\n在解决`MDP`问题的算法中，`Value Base`类算法的思路将关注点放在价值函数上，传统的`Q Learning`等算法是一个很好的例子。`Q Learning`通过与环境的交互，不断学习逼近`(状态, 行为)`价值函数$Q(s_t, a_t)$，而策略本身即选取使得在特定状态下价值函数最大的动作，即$a_t = \\mathop{\\arg\\min}_{a}Q(s_t, a)$ ， 具体算法如图1所示。\n\n![Q Learning算法](1566647970040.png)\n\n其中$Q(S, A) \\leftarrow Q(S, A)+\\alpha\\left[R+\\gamma \\max _{a} Q\\left(S^{\\prime}, a\\right)-Q(S, A)\\right]$一步即时序差分法的价值函数逼近过程，具体原理详见。\n\nQ learning算法已经能解决许多问题，但最致命的一点是: 在确定环境$s_t$下，策略选择的行动总是确定的，这对于很多场景来说，并不适用。例如玩剪刀石头布的时候，如果出拳的策略是一定的话，就很容易被对手察觉并击破。同时，Q learning也无法解决状态重名的问题。具体地说，状态重名是指在两个现实中的状态，在建模中表现出来的`state`是一样的，也就是$s_t$向量的每个维度都相等。如下图中格子世界的例子，如果状态被建模成二维向量，维度分别表示左右是否有墙阻挡，那么图中两个灰色格子的状态向量是一样的，于是他们在Q learning中学习到的策略会选择一样的行动，但矛盾的是: **如果选择向左走，对于第一个格子就是一次失败的决策。如果选择向右走，对于第二个格子来说就是一次失败的决策**。特别是如果使用$\\epsilon-greedy$策略时，很可能在第一个灰格子会不停选择向左的行动，直到一次$\\epsilon$概率的事件发生时，才有可能选择一次随机行为，从而有机会跳出这个坏处境。这时候还不如直接使用随机策略管用。\n\n![格子世界](1566648579995.png)\n\n针对上述种种缺点，策略梯度法应运而生。\n\n首先，我们需要明确的是，强化学习的最终目的是最大化价值函数。Q learning算法的思路比较绕，Q learning并没有直接去最大化价值函数，而是思考: 在给定状态$s_t$下，做出动作$a_t$会得到什么样的回报？ 得到答案之后，每次都贪婪地选择回报最大的那个动作。 可是为什么我们不直接思考: 在给定状态下，做出什么样的动作，才能让回报最大化？ 策略梯度就是这样一个直接的算法。\n\n具体地说，策略梯度算法将策略建模成为$\\pi_{\\theta}(s,a)$，表示在$s$状态下选择$a$动作的概率，其中$\\theta$为参数。并且将负回报函数作为损失函数，应用梯度下降法将期望奖励最大化。定义为\n\n$$J(\\theta)=\\sum_{s} d(s) \\sum_{a} \\pi_{\\theta}(s, a) \\mathcal{R}(s,a) \\tag{1}$$\n\n这样，(1)式对参数$\\theta$求梯度得到\n\n$$\\begin{aligned} \\nabla_{\\theta} J(\\theta) &=\\sum_{\\mathbf{s} \\in S} d(s) \\sum_{a \\in A} \\pi_{\\theta}(s, a) \\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) \\mathcal{R}_{s, a} \\\\ &=\\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) \\mathcal{R}(s,a)\\right] \\end{aligned}  \\tag{2}$$\n\n式子(2)的期望通过均值代替得到\n\n$$\\nabla_{\\theta}J(\\theta)=\\frac{1}{N}\\sum{\\nabla_{\\theta}\\log\\pi_{\\theta}(s, a)\\mathcal{R}(s,a)}   \\tag{3}$$\n\n于是我们得到了蒙特卡洛策略梯度算法\n\n![蒙特卡洛策略梯度](1566661134557.png)\n\n## AC算法\n\n从式子(3)来看蒙特卡洛策略梯度算法在策略梯度更新的过程中，考虑的是即时奖励$v_t$，而即时奖励具有较大噪声，为了得到更稳定的表现，可以使用长期回报来替代即时奖励。具体如式(4):\n\n$$ \\begin{aligned} \\nabla_{\\theta} J(\\theta) &=\\sum_{\\mathbf{s} \\in S} d(s) \\sum_{a \\in A} \\pi_{\\theta}(s, a) \\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) G_{s,a} \\end{aligned}   \\tag{4} $$\n\n其中$G_{s,a}=\\sum\\lambda^n\\mathcal{R}_{n}$定义为(s,a)的长期回报, 根据Q函数的定义$Q(s, a)=\\mathbb{E}[G_{s,a}|s,a]$,于是式子(4)使用长期回报期望$Q(s, a)$直接替代长期回报得到式(5)\n\n$$\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) Q(s,a)\\right] \\tag{5} $$\n\n于是根据(5)式我们可以得到$\\Delta \\theta=\\nabla_{\\theta}\\log \\pi_{\\theta}(s, a) Q(s,a)$，用这种方式更新参数的就是Actor-Critic算法，简称AC算法。其中Critic就是$Q(s,a)$，本质上就是梯度权值，也可以说是评价梯度的重要性。假设我们使用的Q函数是一个简单的线性函数$Q_w(s,w)=\\phi(s,a)^Tw$，那么AC算法具体的过程可以给出如下图。\n\n![1566668496252](1566668496252.png)\n\n## A2C算法\n\nAC算法使用的Q函数是一个随机初始化的函数，需要在交互中学习逼近真正的$\\hat{Q}$，这意味着我们在梯度更新中引入了噪声，或者说方差。为了解决这个问题，A2C引入了Baseline的概念。具体地说是通过在(5)式中引入一个Baseline函数$\\mathcal{B}$得到(6)式子\n\n$$\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left\\{\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)\\left[ Q(s,a)-\\mathcal{B}\\right]\\right\\} \\tag{6}$$\n\n且要求(5)式与(6)相等(期望不变)但方差更低。事实上只要$\\mathcal{B}$ 只与s相关而与a无关，即$\\mathcal{B}(s)$就可以达到期望不变的目的。简单地将(6)式子展开即可得到这个结论\n\n$$\\begin{aligned} \\nabla_{\\theta}J(\\theta) & = \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]-\\mathbb{E}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)\\mathcal{B}(s)\\right] \\\\ &=  \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]-\\sum_{s\\in S}d^{\\pi_{\\theta}(s)} \\mathcal{B}(s)  \\nabla_{\\theta} \\sum_{a\\in A}\\log\\pi_{\\theta}(s,a)  \\\\ &= \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]   \\end{aligned}  $$\n\n第二个等号交换了求导与求和的顺序，并且将与a无关的$\\mathcal B(s)$提到求和符号外，于是根据定义$\\sum_{a \\in A}\\pi_{\\theta}(s,a)=1$，而常数的梯度等于0。于是现在对于函数$\\mathcal B(s)$只剩下**让方差更低**这一约束了。首先来看方差\n\n$$\\begin{aligned} Var(X) = \\mathbb E \\left[ (X - \\overline X)^2 \\right] =\\mathbb E (X^2)-[E(\\overline X)]^2 \\end{aligned}$$\n\n接下来我们让方差对函数$\\mathcal B(s)$的导数为0\n\n$$\\begin{aligned} \\frac{\\partial Var(X)}{\\partial \\mathcal B (s)} &= \\frac{\\partial Var(X)}{\\partial X} \\cdot \\frac{\\partial X}{ \\mathcal B(s) } \\\\ &= \\mathbb 2E[X \\cdot \\frac{\\partial X}{\\partial \\mathcal B(s)}] \\\\ &= 0\\end{aligned}$$\n\n然后带入$X=\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)\\left[ Q(s,a)-\\mathcal{B}(s)\\right]$得到\n\n$$\\begin{aligned} & \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2[Q(s,a)-\\mathcal B(s)]  \\\\ &= \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2Q(s,a) -   \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\mathcal B(s)  \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2\\\\ &= 0 \\end{aligned} \\tag{7}$$\n\n解得\n\n$$\\mathcal B(s) = \\frac{\\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2Q(s,a)}{\\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2}  \\tag{8}$$\n\n式(7)给出了使得方差最小时得$\\mathcal B(s)$，但也可以看到其计算复杂度十分高。事实上我们可以在计算复杂度和噪声指标上做权衡。从式子(7)中其实我们可以看到只要$\\mathcal B (s)$逼近$Q(s,a)$且与a无关，即可得到一个接近最优解得方案。可以非常直觉地想到取状态价值函数$V(s)=\\mathbb E[G_{s,a}|s]$作为$\\mathcal B(s)$，即\n\n$$\\mathcal B(s)=V(s) \\tag{9}$$\n\n\n\n最后，令$A(s,a)=Q(s,a)-V(s)$为优势函数(动作a相对平均表现的优势)，可以得到A2C算法的梯度公式\n\n$$\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)A(s,a)\\right] \\tag{10}$$\n\n在工程实现上，我们并不需要维持两套参数去分别交互逼近$Q(s,a)$和V(s)。具体地说，我们可以使用$\\delta^A=r+\\lambda V(s')-V(s)$来替代$\\delta =r+\\lambda Q(s',a')-Q(s,a)$，因为根据定义$\\mathbb E(\\delta)=\\delta^A$。并且恰好$\\delta^A$就是$A(s,a)$的无偏估计，这是因为根据Q函数的定义有$ \\mathbb E[r+\\lambda V(s')|s,a] = Q(s,a)$。所以实际上实现A2C算法的时候，只需要维持一套参数用于估计$V(s)$，并且做梯度下降更新参数的时候可以使用\n\n$$\\Delta \\theta=\\alpha\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)(r+\\lambda V(s')-V(s))  \\tag{11}$$","source":"_posts/策略梯度与A2C算法.md","raw":"---\ntitle: '策略梯度与A2C算法'\ndate: 2019-08-24 19:44:15\ntags: [算法, 机器学习, 计算广告]\nmathjax: true\ncategories: [强化学习]\ntypora-root-url: TRPO-使策略梯度单调递增的杀器\n---\n\n\n\n## 从Q learning到策略梯度\n\n在解决`MDP`问题的算法中，`Value Base`类算法的思路将关注点放在价值函数上，传统的`Q Learning`等算法是一个很好的例子。`Q Learning`通过与环境的交互，不断学习逼近`(状态, 行为)`价值函数$Q(s_t, a_t)$，而策略本身即选取使得在特定状态下价值函数最大的动作，即$a_t = \\mathop{\\arg\\min}_{a}Q(s_t, a)$ ， 具体算法如图1所示。\n\n![Q Learning算法](1566647970040.png)\n\n其中$Q(S, A) \\leftarrow Q(S, A)+\\alpha\\left[R+\\gamma \\max _{a} Q\\left(S^{\\prime}, a\\right)-Q(S, A)\\right]$一步即时序差分法的价值函数逼近过程，具体原理详见。\n\nQ learning算法已经能解决许多问题，但最致命的一点是: 在确定环境$s_t$下，策略选择的行动总是确定的，这对于很多场景来说，并不适用。例如玩剪刀石头布的时候，如果出拳的策略是一定的话，就很容易被对手察觉并击破。同时，Q learning也无法解决状态重名的问题。具体地说，状态重名是指在两个现实中的状态，在建模中表现出来的`state`是一样的，也就是$s_t$向量的每个维度都相等。如下图中格子世界的例子，如果状态被建模成二维向量，维度分别表示左右是否有墙阻挡，那么图中两个灰色格子的状态向量是一样的，于是他们在Q learning中学习到的策略会选择一样的行动，但矛盾的是: **如果选择向左走，对于第一个格子就是一次失败的决策。如果选择向右走，对于第二个格子来说就是一次失败的决策**。特别是如果使用$\\epsilon-greedy$策略时，很可能在第一个灰格子会不停选择向左的行动，直到一次$\\epsilon$概率的事件发生时，才有可能选择一次随机行为，从而有机会跳出这个坏处境。这时候还不如直接使用随机策略管用。\n\n![格子世界](1566648579995.png)\n\n针对上述种种缺点，策略梯度法应运而生。\n\n首先，我们需要明确的是，强化学习的最终目的是最大化价值函数。Q learning算法的思路比较绕，Q learning并没有直接去最大化价值函数，而是思考: 在给定状态$s_t$下，做出动作$a_t$会得到什么样的回报？ 得到答案之后，每次都贪婪地选择回报最大的那个动作。 可是为什么我们不直接思考: 在给定状态下，做出什么样的动作，才能让回报最大化？ 策略梯度就是这样一个直接的算法。\n\n具体地说，策略梯度算法将策略建模成为$\\pi_{\\theta}(s,a)$，表示在$s$状态下选择$a$动作的概率，其中$\\theta$为参数。并且将负回报函数作为损失函数，应用梯度下降法将期望奖励最大化。定义为\n\n$$J(\\theta)=\\sum_{s} d(s) \\sum_{a} \\pi_{\\theta}(s, a) \\mathcal{R}(s,a) \\tag{1}$$\n\n这样，(1)式对参数$\\theta$求梯度得到\n\n$$\\begin{aligned} \\nabla_{\\theta} J(\\theta) &=\\sum_{\\mathbf{s} \\in S} d(s) \\sum_{a \\in A} \\pi_{\\theta}(s, a) \\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) \\mathcal{R}_{s, a} \\\\ &=\\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) \\mathcal{R}(s,a)\\right] \\end{aligned}  \\tag{2}$$\n\n式子(2)的期望通过均值代替得到\n\n$$\\nabla_{\\theta}J(\\theta)=\\frac{1}{N}\\sum{\\nabla_{\\theta}\\log\\pi_{\\theta}(s, a)\\mathcal{R}(s,a)}   \\tag{3}$$\n\n于是我们得到了蒙特卡洛策略梯度算法\n\n![蒙特卡洛策略梯度](1566661134557.png)\n\n## AC算法\n\n从式子(3)来看蒙特卡洛策略梯度算法在策略梯度更新的过程中，考虑的是即时奖励$v_t$，而即时奖励具有较大噪声，为了得到更稳定的表现，可以使用长期回报来替代即时奖励。具体如式(4):\n\n$$ \\begin{aligned} \\nabla_{\\theta} J(\\theta) &=\\sum_{\\mathbf{s} \\in S} d(s) \\sum_{a \\in A} \\pi_{\\theta}(s, a) \\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) G_{s,a} \\end{aligned}   \\tag{4} $$\n\n其中$G_{s,a}=\\sum\\lambda^n\\mathcal{R}_{n}$定义为(s,a)的长期回报, 根据Q函数的定义$Q(s, a)=\\mathbb{E}[G_{s,a}|s,a]$,于是式子(4)使用长期回报期望$Q(s, a)$直接替代长期回报得到式(5)\n\n$$\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) Q(s,a)\\right] \\tag{5} $$\n\n于是根据(5)式我们可以得到$\\Delta \\theta=\\nabla_{\\theta}\\log \\pi_{\\theta}(s, a) Q(s,a)$，用这种方式更新参数的就是Actor-Critic算法，简称AC算法。其中Critic就是$Q(s,a)$，本质上就是梯度权值，也可以说是评价梯度的重要性。假设我们使用的Q函数是一个简单的线性函数$Q_w(s,w)=\\phi(s,a)^Tw$，那么AC算法具体的过程可以给出如下图。\n\n![1566668496252](1566668496252.png)\n\n## A2C算法\n\nAC算法使用的Q函数是一个随机初始化的函数，需要在交互中学习逼近真正的$\\hat{Q}$，这意味着我们在梯度更新中引入了噪声，或者说方差。为了解决这个问题，A2C引入了Baseline的概念。具体地说是通过在(5)式中引入一个Baseline函数$\\mathcal{B}$得到(6)式子\n\n$$\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left\\{\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)\\left[ Q(s,a)-\\mathcal{B}\\right]\\right\\} \\tag{6}$$\n\n且要求(5)式与(6)相等(期望不变)但方差更低。事实上只要$\\mathcal{B}$ 只与s相关而与a无关，即$\\mathcal{B}(s)$就可以达到期望不变的目的。简单地将(6)式子展开即可得到这个结论\n\n$$\\begin{aligned} \\nabla_{\\theta}J(\\theta) & = \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]-\\mathbb{E}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)\\mathcal{B}(s)\\right] \\\\ &=  \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]-\\sum_{s\\in S}d^{\\pi_{\\theta}(s)} \\mathcal{B}(s)  \\nabla_{\\theta} \\sum_{a\\in A}\\log\\pi_{\\theta}(s,a)  \\\\ &= \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]   \\end{aligned}  $$\n\n第二个等号交换了求导与求和的顺序，并且将与a无关的$\\mathcal B(s)$提到求和符号外，于是根据定义$\\sum_{a \\in A}\\pi_{\\theta}(s,a)=1$，而常数的梯度等于0。于是现在对于函数$\\mathcal B(s)$只剩下**让方差更低**这一约束了。首先来看方差\n\n$$\\begin{aligned} Var(X) = \\mathbb E \\left[ (X - \\overline X)^2 \\right] =\\mathbb E (X^2)-[E(\\overline X)]^2 \\end{aligned}$$\n\n接下来我们让方差对函数$\\mathcal B(s)$的导数为0\n\n$$\\begin{aligned} \\frac{\\partial Var(X)}{\\partial \\mathcal B (s)} &= \\frac{\\partial Var(X)}{\\partial X} \\cdot \\frac{\\partial X}{ \\mathcal B(s) } \\\\ &= \\mathbb 2E[X \\cdot \\frac{\\partial X}{\\partial \\mathcal B(s)}] \\\\ &= 0\\end{aligned}$$\n\n然后带入$X=\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)\\left[ Q(s,a)-\\mathcal{B}(s)\\right]$得到\n\n$$\\begin{aligned} & \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2[Q(s,a)-\\mathcal B(s)]  \\\\ &= \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2Q(s,a) -   \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\mathcal B(s)  \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2\\\\ &= 0 \\end{aligned} \\tag{7}$$\n\n解得\n\n$$\\mathcal B(s) = \\frac{\\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2Q(s,a)}{\\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2}  \\tag{8}$$\n\n式(7)给出了使得方差最小时得$\\mathcal B(s)$，但也可以看到其计算复杂度十分高。事实上我们可以在计算复杂度和噪声指标上做权衡。从式子(7)中其实我们可以看到只要$\\mathcal B (s)$逼近$Q(s,a)$且与a无关，即可得到一个接近最优解得方案。可以非常直觉地想到取状态价值函数$V(s)=\\mathbb E[G_{s,a}|s]$作为$\\mathcal B(s)$，即\n\n$$\\mathcal B(s)=V(s) \\tag{9}$$\n\n\n\n最后，令$A(s,a)=Q(s,a)-V(s)$为优势函数(动作a相对平均表现的优势)，可以得到A2C算法的梯度公式\n\n$$\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)A(s,a)\\right] \\tag{10}$$\n\n在工程实现上，我们并不需要维持两套参数去分别交互逼近$Q(s,a)$和V(s)。具体地说，我们可以使用$\\delta^A=r+\\lambda V(s')-V(s)$来替代$\\delta =r+\\lambda Q(s',a')-Q(s,a)$，因为根据定义$\\mathbb E(\\delta)=\\delta^A$。并且恰好$\\delta^A$就是$A(s,a)$的无偏估计，这是因为根据Q函数的定义有$ \\mathbb E[r+\\lambda V(s')|s,a] = Q(s,a)$。所以实际上实现A2C算法的时候，只需要维持一套参数用于估计$V(s)$，并且做梯度下降更新参数的时候可以使用\n\n$$\\Delta \\theta=\\alpha\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)(r+\\lambda V(s')-V(s))  \\tag{11}$$","slug":"策略梯度与A2C算法","published":1,"updated":"2020-04-12T13:22:37.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8x40sit0004q69pgi2myfd3","content":"<h2 id=\"从Q-learning到策略梯度\"><a href=\"#从Q-learning到策略梯度\" class=\"headerlink\" title=\"从Q learning到策略梯度\"></a>从Q learning到策略梯度</h2><p>在解决<code>MDP</code>问题的算法中，<code>Value Base</code>类算法的思路将关注点放在价值函数上，传统的<code>Q Learning</code>等算法是一个很好的例子。<code>Q Learning</code>通过与环境的交互，不断学习逼近<code>(状态, 行为)</code>价值函数$Q(s_t, a_t)$，而策略本身即选取使得在特定状态下价值函数最大的动作，即$a_t = \\mathop{\\arg\\min}_{a}Q(s_t, a)$ ， 具体算法如图1所示。</p>\n<p><img src=\"1566647970040.png\" alt=\"Q Learning算法\"></p>\n<p>其中$Q(S, A) \\leftarrow Q(S, A)+\\alpha\\left[R+\\gamma \\max _{a} Q\\left(S^{\\prime}, a\\right)-Q(S, A)\\right]$一步即时序差分法的价值函数逼近过程，具体原理详见。</p>\n<p>Q learning算法已经能解决许多问题，但最致命的一点是: 在确定环境$s_t$下，策略选择的行动总是确定的，这对于很多场景来说，并不适用。例如玩剪刀石头布的时候，如果出拳的策略是一定的话，就很容易被对手察觉并击破。同时，Q learning也无法解决状态重名的问题。具体地说，状态重名是指在两个现实中的状态，在建模中表现出来的<code>state</code>是一样的，也就是$s_t$向量的每个维度都相等。如下图中格子世界的例子，如果状态被建模成二维向量，维度分别表示左右是否有墙阻挡，那么图中两个灰色格子的状态向量是一样的，于是他们在Q learning中学习到的策略会选择一样的行动，但矛盾的是: <strong>如果选择向左走，对于第一个格子就是一次失败的决策。如果选择向右走，对于第二个格子来说就是一次失败的决策</strong>。特别是如果使用$\\epsilon-greedy$策略时，很可能在第一个灰格子会不停选择向左的行动，直到一次$\\epsilon$概率的事件发生时，才有可能选择一次随机行为，从而有机会跳出这个坏处境。这时候还不如直接使用随机策略管用。</p>\n<p><img src=\"1566648579995.png\" alt=\"格子世界\"></p>\n<p>针对上述种种缺点，策略梯度法应运而生。</p>\n<p>首先，我们需要明确的是，强化学习的最终目的是最大化价值函数。Q learning算法的思路比较绕，Q learning并没有直接去最大化价值函数，而是思考: 在给定状态$s_t$下，做出动作$a_t$会得到什么样的回报？ 得到答案之后，每次都贪婪地选择回报最大的那个动作。 可是为什么我们不直接思考: 在给定状态下，做出什么样的动作，才能让回报最大化？ 策略梯度就是这样一个直接的算法。</p>\n<p>具体地说，策略梯度算法将策略建模成为$\\pi_{\\theta}(s,a)$，表示在$s$状态下选择$a$动作的概率，其中$\\theta$为参数。并且将负回报函数作为损失函数，应用梯度下降法将期望奖励最大化。定义为</p>\n<script type=\"math/tex; mode=display\">J(\\theta)=\\sum_{s} d(s) \\sum_{a} \\pi_{\\theta}(s, a) \\mathcal{R}(s,a) \\tag{1}</script><p>这样，(1)式对参数$\\theta$求梯度得到</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} \\nabla_{\\theta} J(\\theta) &=\\sum_{\\mathbf{s} \\in S} d(s) \\sum_{a \\in A} \\pi_{\\theta}(s, a) \\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) \\mathcal{R}_{s, a} \\\\ &=\\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) \\mathcal{R}(s,a)\\right] \\end{aligned}  \\tag{2}</script><p>式子(2)的期望通过均值代替得到</p>\n<script type=\"math/tex; mode=display\">\\nabla_{\\theta}J(\\theta)=\\frac{1}{N}\\sum{\\nabla_{\\theta}\\log\\pi_{\\theta}(s, a)\\mathcal{R}(s,a)}   \\tag{3}</script><p>于是我们得到了蒙特卡洛策略梯度算法</p>\n<p><img src=\"1566661134557.png\" alt=\"蒙特卡洛策略梯度\"></p>\n<h2 id=\"AC算法\"><a href=\"#AC算法\" class=\"headerlink\" title=\"AC算法\"></a>AC算法</h2><p>从式子(3)来看蒙特卡洛策略梯度算法在策略梯度更新的过程中，考虑的是即时奖励$v_t$，而即时奖励具有较大噪声，为了得到更稳定的表现，可以使用长期回报来替代即时奖励。具体如式(4):</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} \\nabla_{\\theta} J(\\theta) &=\\sum_{\\mathbf{s} \\in S} d(s) \\sum_{a \\in A} \\pi_{\\theta}(s, a) \\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) G_{s,a} \\end{aligned}   \\tag{4}</script><p>其中$G_{s,a}=\\sum\\lambda^n\\mathcal{R}_{n}$定义为(s,a)的长期回报, 根据Q函数的定义$Q(s, a)=\\mathbb{E}[G_{s,a}|s,a]$,于是式子(4)使用长期回报期望$Q(s, a)$直接替代长期回报得到式(5)</p>\n<script type=\"math/tex; mode=display\">\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) Q(s,a)\\right] \\tag{5}</script><p>于是根据(5)式我们可以得到$\\Delta \\theta=\\nabla_{\\theta}\\log \\pi_{\\theta}(s, a) Q(s,a)$，用这种方式更新参数的就是Actor-Critic算法，简称AC算法。其中Critic就是$Q(s,a)$，本质上就是梯度权值，也可以说是评价梯度的重要性。假设我们使用的Q函数是一个简单的线性函数$Q_w(s,w)=\\phi(s,a)^Tw$，那么AC算法具体的过程可以给出如下图。</p>\n<p><img src=\"1566668496252.png\" alt=\"1566668496252\"></p>\n<h2 id=\"A2C算法\"><a href=\"#A2C算法\" class=\"headerlink\" title=\"A2C算法\"></a>A2C算法</h2><p>AC算法使用的Q函数是一个随机初始化的函数，需要在交互中学习逼近真正的$\\hat{Q}$，这意味着我们在梯度更新中引入了噪声，或者说方差。为了解决这个问题，A2C引入了Baseline的概念。具体地说是通过在(5)式中引入一个Baseline函数$\\mathcal{B}$得到(6)式子</p>\n<script type=\"math/tex; mode=display\">\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left\\{\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)\\left[ Q(s,a)-\\mathcal{B}\\right]\\right\\} \\tag{6}</script><p>且要求(5)式与(6)相等(期望不变)但方差更低。事实上只要$\\mathcal{B}$ 只与s相关而与a无关，即$\\mathcal{B}(s)$就可以达到期望不变的目的。简单地将(6)式子展开即可得到这个结论</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} \\nabla_{\\theta}J(\\theta) & = \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]-\\mathbb{E}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)\\mathcal{B}(s)\\right] \\\\ &=  \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]-\\sum_{s\\in S}d^{\\pi_{\\theta}(s)} \\mathcal{B}(s)  \\nabla_{\\theta} \\sum_{a\\in A}\\log\\pi_{\\theta}(s,a)  \\\\ &= \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]   \\end{aligned}</script><p>第二个等号交换了求导与求和的顺序，并且将与a无关的$\\mathcal B(s)$提到求和符号外，于是根据定义$\\sum_{a \\in A}\\pi_{\\theta}(s,a)=1$，而常数的梯度等于0。于是现在对于函数$\\mathcal B(s)$只剩下<strong>让方差更低</strong>这一约束了。首先来看方差</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} Var(X) = \\mathbb E \\left[ (X - \\overline X)^2 \\right] =\\mathbb E (X^2)-[E(\\overline X)]^2 \\end{aligned}</script><p>接下来我们让方差对函数$\\mathcal B(s)$的导数为0</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} \\frac{\\partial Var(X)}{\\partial \\mathcal B (s)} &= \\frac{\\partial Var(X)}{\\partial X} \\cdot \\frac{\\partial X}{ \\mathcal B(s) } \\\\ &= \\mathbb 2E[X \\cdot \\frac{\\partial X}{\\partial \\mathcal B(s)}] \\\\ &= 0\\end{aligned}</script><p>然后带入$X=\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)\\left[ Q(s,a)-\\mathcal{B}(s)\\right]$得到</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} & \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2[Q(s,a)-\\mathcal B(s)]  \\\\ &= \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2Q(s,a) -   \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\mathcal B(s)  \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2\\\\ &= 0 \\end{aligned} \\tag{7}</script><p>解得</p>\n<script type=\"math/tex; mode=display\">\\mathcal B(s) = \\frac{\\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2Q(s,a)}{\\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2}  \\tag{8}</script><p>式(7)给出了使得方差最小时得$\\mathcal B(s)$，但也可以看到其计算复杂度十分高。事实上我们可以在计算复杂度和噪声指标上做权衡。从式子(7)中其实我们可以看到只要$\\mathcal B (s)$逼近$Q(s,a)$且与a无关，即可得到一个接近最优解得方案。可以非常直觉地想到取状态价值函数$V(s)=\\mathbb E[G_{s,a}|s]$作为$\\mathcal B(s)$，即</p>\n<script type=\"math/tex; mode=display\">\\mathcal B(s)=V(s) \\tag{9}</script><p>最后，令$A(s,a)=Q(s,a)-V(s)$为优势函数(动作a相对平均表现的优势)，可以得到A2C算法的梯度公式</p>\n<script type=\"math/tex; mode=display\">\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)A(s,a)\\right] \\tag{10}</script><p>在工程实现上，我们并不需要维持两套参数去分别交互逼近$Q(s,a)$和V(s)。具体地说，我们可以使用$\\delta^A=r+\\lambda V(s’)-V(s)$来替代$\\delta =r+\\lambda Q(s’,a’)-Q(s,a)$，因为根据定义$\\mathbb E(\\delta)=\\delta^A$。并且恰好$\\delta^A$就是$A(s,a)$的无偏估计，这是因为根据Q函数的定义有$ \\mathbb E[r+\\lambda V(s’)|s,a] = Q(s,a)$。所以实际上实现A2C算法的时候，只需要维持一套参数用于估计$V(s)$，并且做梯度下降更新参数的时候可以使用</p>\n<script type=\"math/tex; mode=display\">\\Delta \\theta=\\alpha\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)(r+\\lambda V(s')-V(s))  \\tag{11}</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"从Q-learning到策略梯度\"><a href=\"#从Q-learning到策略梯度\" class=\"headerlink\" title=\"从Q learning到策略梯度\"></a>从Q learning到策略梯度</h2><p>在解决<code>MDP</code>问题的算法中，<code>Value Base</code>类算法的思路将关注点放在价值函数上，传统的<code>Q Learning</code>等算法是一个很好的例子。<code>Q Learning</code>通过与环境的交互，不断学习逼近<code>(状态, 行为)</code>价值函数$Q(s_t, a_t)$，而策略本身即选取使得在特定状态下价值函数最大的动作，即$a_t = \\mathop{\\arg\\min}_{a}Q(s_t, a)$ ， 具体算法如图1所示。</p>\n<p><img src=\"1566647970040.png\" alt=\"Q Learning算法\"></p>\n<p>其中$Q(S, A) \\leftarrow Q(S, A)+\\alpha\\left[R+\\gamma \\max _{a} Q\\left(S^{\\prime}, a\\right)-Q(S, A)\\right]$一步即时序差分法的价值函数逼近过程，具体原理详见。</p>\n<p>Q learning算法已经能解决许多问题，但最致命的一点是: 在确定环境$s_t$下，策略选择的行动总是确定的，这对于很多场景来说，并不适用。例如玩剪刀石头布的时候，如果出拳的策略是一定的话，就很容易被对手察觉并击破。同时，Q learning也无法解决状态重名的问题。具体地说，状态重名是指在两个现实中的状态，在建模中表现出来的<code>state</code>是一样的，也就是$s_t$向量的每个维度都相等。如下图中格子世界的例子，如果状态被建模成二维向量，维度分别表示左右是否有墙阻挡，那么图中两个灰色格子的状态向量是一样的，于是他们在Q learning中学习到的策略会选择一样的行动，但矛盾的是: <strong>如果选择向左走，对于第一个格子就是一次失败的决策。如果选择向右走，对于第二个格子来说就是一次失败的决策</strong>。特别是如果使用$\\epsilon-greedy$策略时，很可能在第一个灰格子会不停选择向左的行动，直到一次$\\epsilon$概率的事件发生时，才有可能选择一次随机行为，从而有机会跳出这个坏处境。这时候还不如直接使用随机策略管用。</p>\n<p><img src=\"1566648579995.png\" alt=\"格子世界\"></p>\n<p>针对上述种种缺点，策略梯度法应运而生。</p>\n<p>首先，我们需要明确的是，强化学习的最终目的是最大化价值函数。Q learning算法的思路比较绕，Q learning并没有直接去最大化价值函数，而是思考: 在给定状态$s_t$下，做出动作$a_t$会得到什么样的回报？ 得到答案之后，每次都贪婪地选择回报最大的那个动作。 可是为什么我们不直接思考: 在给定状态下，做出什么样的动作，才能让回报最大化？ 策略梯度就是这样一个直接的算法。</p>\n<p>具体地说，策略梯度算法将策略建模成为$\\pi_{\\theta}(s,a)$，表示在$s$状态下选择$a$动作的概率，其中$\\theta$为参数。并且将负回报函数作为损失函数，应用梯度下降法将期望奖励最大化。定义为</p>\n<script type=\"math/tex; mode=display\">J(\\theta)=\\sum_{s} d(s) \\sum_{a} \\pi_{\\theta}(s, a) \\mathcal{R}(s,a) \\tag{1}</script><p>这样，(1)式对参数$\\theta$求梯度得到</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} \\nabla_{\\theta} J(\\theta) &=\\sum_{\\mathbf{s} \\in S} d(s) \\sum_{a \\in A} \\pi_{\\theta}(s, a) \\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) \\mathcal{R}_{s, a} \\\\ &=\\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) \\mathcal{R}(s,a)\\right] \\end{aligned}  \\tag{2}</script><p>式子(2)的期望通过均值代替得到</p>\n<script type=\"math/tex; mode=display\">\\nabla_{\\theta}J(\\theta)=\\frac{1}{N}\\sum{\\nabla_{\\theta}\\log\\pi_{\\theta}(s, a)\\mathcal{R}(s,a)}   \\tag{3}</script><p>于是我们得到了蒙特卡洛策略梯度算法</p>\n<p><img src=\"1566661134557.png\" alt=\"蒙特卡洛策略梯度\"></p>\n<h2 id=\"AC算法\"><a href=\"#AC算法\" class=\"headerlink\" title=\"AC算法\"></a>AC算法</h2><p>从式子(3)来看蒙特卡洛策略梯度算法在策略梯度更新的过程中，考虑的是即时奖励$v_t$，而即时奖励具有较大噪声，为了得到更稳定的表现，可以使用长期回报来替代即时奖励。具体如式(4):</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} \\nabla_{\\theta} J(\\theta) &=\\sum_{\\mathbf{s} \\in S} d(s) \\sum_{a \\in A} \\pi_{\\theta}(s, a) \\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) G_{s,a} \\end{aligned}   \\tag{4}</script><p>其中$G_{s,a}=\\sum\\lambda^n\\mathcal{R}_{n}$定义为(s,a)的长期回报, 根据Q函数的定义$Q(s, a)=\\mathbb{E}[G_{s,a}|s,a]$,于是式子(4)使用长期回报期望$Q(s, a)$直接替代长期回报得到式(5)</p>\n<script type=\"math/tex; mode=display\">\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a) Q(s,a)\\right] \\tag{5}</script><p>于是根据(5)式我们可以得到$\\Delta \\theta=\\nabla_{\\theta}\\log \\pi_{\\theta}(s, a) Q(s,a)$，用这种方式更新参数的就是Actor-Critic算法，简称AC算法。其中Critic就是$Q(s,a)$，本质上就是梯度权值，也可以说是评价梯度的重要性。假设我们使用的Q函数是一个简单的线性函数$Q_w(s,w)=\\phi(s,a)^Tw$，那么AC算法具体的过程可以给出如下图。</p>\n<p><img src=\"1566668496252.png\" alt=\"1566668496252\"></p>\n<h2 id=\"A2C算法\"><a href=\"#A2C算法\" class=\"headerlink\" title=\"A2C算法\"></a>A2C算法</h2><p>AC算法使用的Q函数是一个随机初始化的函数，需要在交互中学习逼近真正的$\\hat{Q}$，这意味着我们在梯度更新中引入了噪声，或者说方差。为了解决这个问题，A2C引入了Baseline的概念。具体地说是通过在(5)式中引入一个Baseline函数$\\mathcal{B}$得到(6)式子</p>\n<script type=\"math/tex; mode=display\">\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left\\{\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)\\left[ Q(s,a)-\\mathcal{B}\\right]\\right\\} \\tag{6}</script><p>且要求(5)式与(6)相等(期望不变)但方差更低。事实上只要$\\mathcal{B}$ 只与s相关而与a无关，即$\\mathcal{B}(s)$就可以达到期望不变的目的。简单地将(6)式子展开即可得到这个结论</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} \\nabla_{\\theta}J(\\theta) & = \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]-\\mathbb{E}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)\\mathcal{B}(s)\\right] \\\\ &=  \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]-\\sum_{s\\in S}d^{\\pi_{\\theta}(s)} \\mathcal{B}(s)  \\nabla_{\\theta} \\sum_{a\\in A}\\log\\pi_{\\theta}(s,a)  \\\\ &= \\mathbb{E}_{\\theta}\\left[\\nabla_{\\theta}\\log\\pi_{\\theta}Q(s,a)\\right]   \\end{aligned}</script><p>第二个等号交换了求导与求和的顺序，并且将与a无关的$\\mathcal B(s)$提到求和符号外，于是根据定义$\\sum_{a \\in A}\\pi_{\\theta}(s,a)=1$，而常数的梯度等于0。于是现在对于函数$\\mathcal B(s)$只剩下<strong>让方差更低</strong>这一约束了。首先来看方差</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} Var(X) = \\mathbb E \\left[ (X - \\overline X)^2 \\right] =\\mathbb E (X^2)-[E(\\overline X)]^2 \\end{aligned}</script><p>接下来我们让方差对函数$\\mathcal B(s)$的导数为0</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} \\frac{\\partial Var(X)}{\\partial \\mathcal B (s)} &= \\frac{\\partial Var(X)}{\\partial X} \\cdot \\frac{\\partial X}{ \\mathcal B(s) } \\\\ &= \\mathbb 2E[X \\cdot \\frac{\\partial X}{\\partial \\mathcal B(s)}] \\\\ &= 0\\end{aligned}</script><p>然后带入$X=\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)\\left[ Q(s,a)-\\mathcal{B}(s)\\right]$得到</p>\n<script type=\"math/tex; mode=display\">\\begin{aligned} & \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2[Q(s,a)-\\mathcal B(s)]  \\\\ &= \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2Q(s,a) -   \\sum_{s \\in S}d^{\\pi_{\\theta}}(s) \\mathcal B(s)  \\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2\\\\ &= 0 \\end{aligned} \\tag{7}</script><p>解得</p>\n<script type=\"math/tex; mode=display\">\\mathcal B(s) = \\frac{\\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2Q(s,a)}{\\sum_{a \\in A} [\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)]^2}  \\tag{8}</script><p>式(7)给出了使得方差最小时得$\\mathcal B(s)$，但也可以看到其计算复杂度十分高。事实上我们可以在计算复杂度和噪声指标上做权衡。从式子(7)中其实我们可以看到只要$\\mathcal B (s)$逼近$Q(s,a)$且与a无关，即可得到一个接近最优解得方案。可以非常直觉地想到取状态价值函数$V(s)=\\mathbb E[G_{s,a}|s]$作为$\\mathcal B(s)$，即</p>\n<script type=\"math/tex; mode=display\">\\mathcal B(s)=V(s) \\tag{9}</script><p>最后，令$A(s,a)=Q(s,a)-V(s)$为优势函数(动作a相对平均表现的优势)，可以得到A2C算法的梯度公式</p>\n<script type=\"math/tex; mode=display\">\\nabla_{\\theta}J(\\theta) = \\mathbb{E}_{\\pi_{\\theta}}\\left[\\nabla_{\\theta} \\log \\pi_{\\theta}(s, a)A(s,a)\\right] \\tag{10}</script><p>在工程实现上，我们并不需要维持两套参数去分别交互逼近$Q(s,a)$和V(s)。具体地说，我们可以使用$\\delta^A=r+\\lambda V(s’)-V(s)$来替代$\\delta =r+\\lambda Q(s’,a’)-Q(s,a)$，因为根据定义$\\mathbb E(\\delta)=\\delta^A$。并且恰好$\\delta^A$就是$A(s,a)$的无偏估计，这是因为根据Q函数的定义有$ \\mathbb E[r+\\lambda V(s’)|s,a] = Q(s,a)$。所以实际上实现A2C算法的时候，只需要维持一套参数用于估计$V(s)$，并且做梯度下降更新参数的时候可以使用</p>\n<script type=\"math/tex; mode=display\">\\Delta \\theta=\\alpha\\nabla_{\\theta}\\log\\pi_{\\theta}(s,a)(r+\\lambda V(s')-V(s))  \\tag{11}</script>"},{"title":"让机器读懂文章-pLSA模型推导及实现","date":"2019-07-12T02:09:57.000Z","mathjax":true,"_content":"\n## 概述\n人类读懂文章是一个很自然的行为，当我们读完一篇《背影》的时候，我们就可以知道这篇文章在写些什么，也就是我们说获得了这篇文章的相关知识。有了这些知识，我们就可以回答一些问题，例如:\n\n1. 问：这篇文章写的主要内容是什么呢？\n    答： 亲情、送别\n2. 问：有类似《背影》这样的文章可以推荐的吗？\n    答：龙应台-《送别》\n\n虽然上面的问答对任务对人类来说十分简单，但对于机器来说却并不容易。机器对自然语言(中文文本)的理解实际上并不是非常简单的事情，因为自然语言本身是一个高层抽象的概念，而机器只擅长处理量化的知识，例如说让机器记住向量$\\vec x=[1, 2, 3]$和$\\vec y=[4, 5, 6]$是十分容易的事情，而且可以轻易知道$\\vec x$和$\\vec y$的相似程度，这只需要计算其记录即可，于是我们对于向量来说就可以完成上面的问题2了。\n\n让我们重新揣摩一下人类读懂文章的过程，实际上我们并不需要背熟每一个字词，而是阅读完成之后再总结出这篇文章主要在写什么，也就是文章的主题。为了让机器能理解文章，我们也需要把这些主题量化出来，形成类似$\\overrightarrow {topic}=['亲情': 0.5, '送别': 0.5]$的向量，这种能量化文章主题的模型，也就叫做**主题模型**了。\n\n在主题模型方面前人们已经做了很多工作，并且取得了非常不错的成效，其中影响较大的是一类模型叫做**隐语义模型**，而这类模型里面**概率隐语义分析**也就是本文所述的pLSA则是应用最成功的模型之一，同样成功的模型还有**隐含狄利克雷分布**，也就是大名鼎鼎的LDA主题模型，不过LDA与pLSA的思想一脉相承，只不过做了贝叶斯改造而已。\n\n\n## pLSA模型\n\n事实上pLSA是在对我们写一篇文章的行为建模，我们先揣摩朱自清先生写《背影》的行为。首先我朱先生敲定了今天要写一篇《背影》，然后他开始构思了这篇文章的主题为：亲情、送别，并且朱先生认为这两部分的内容都几乎同等重要，也就是: $['亲情': 0.5, '送别': 0.5]$，朱先生开始动笔，于是当朱先生写下\n\n> 我买几个橘子去，你就在此地，不要走动。\n\n实际上是朱先生先前构思好的亲情、父子、送别这三个中心思想在影响着朱先生写下了这段话。于是在这三个中心思想的影响下，朱先生写完了《背影》里面的所有词，而我们读者所谓的**理解**《背影》，实际上就是从我们看到的《背影》的所有词，推断出了朱先生构思的主题: $['亲情': 0.5, '送别': 0.5]$。而pLSA则只是用数学化的形式描述这个过程, 这样一个形式化的过程在pLSA的眼里是这样的：\n\n1.  从分布$p(d_m)$上采样选择了一篇文章$d_m$\n2. 对于文章$d_m$每一个词，从分布$p(z_k|d_m)$上采样一个生成一个主题$z_k$\n3. 从分布$p(w_n|z_k)$上采样生成了一个词$w_n$\n\n这个模型可以用plate notation更加简洁地描述：\n\n![pLSA模型](plsa.png)\n\n图中的阴影部分的变量$d$和$w$对应着文章和文章的所有词，表示可观测的变量，$z$是观测不到的主题，我们称之为隐变量，两个框框左下角的$N$和$M$则分别表示$N$和$M$词独立重复试验。这个图所表达的文章生成过程跟上面的文字表述是一致的。\n\n这样写文章的模型是符合直觉的，但仔细推敲总觉得过于机械生硬，这样的机械式过程能写得出朱先生《背影》那样优秀的文章吗? \n> 如果无限多个猴子任意敲打打字机键，最终会写出大英博物馆的所有藏书 -- 爱丁顿无限猴子理论\n\n一件小概率的事件在多次试验中必然发生，这就是为什么随机敲打键盘的猴子也能作的原因，于是上面问题答案自然是肯定的，pLSA这样合乎直觉的模型当然要比一只茫无目的敲打键盘的猴子更加具备写作天赋。\n\n我们读者需要阅读根据文章和文章的所有内容去推断文章的主题，而pLSA眼里则是根据可观测变量$w$和可观测变量$d$去推断隐变量$z$。我们可以通过海量的文章去解算出模型中的参数，也就是上文中的$p(z_k|p_m)$和$p(w_n|z_k)$两个分布，我们称之为**文章主题分布**和**主题词分布**。 而$p(z_k|d_m)$这个分布实际上就是文章$d_m$的主题分布，也就是我们前文所说的$['亲情': 0.5, '送别': 0.5]$这样的文章主题，这个分布就是我们就获取到关于文章的知识，它量化说明了文章$d_m$在说什么内容。至于模型参数解算的过程，这没什么不可以理解的，正如我定义了一个$y$的产生过程过$y=ax+b$, 当我拿到足够多的样本$y_0=0, y_1=1, y_2=2,....y_n=n$之后，实际上我可以将他们组成方程组解出合理的参数$a$、$b$和$x$来。\n\n行文至此，我们且对pLSA的求解按下不表，先来实际感受一下pLSA的作用。这里选择格林童话中的十几篇童话作为语料训练pLSA，然后分别从5个主题分布中取出的top3词语：\n\n| topic-1 |  topic-2 | topic-3 | topic-4 | topic-5 |\n|--|--|--|--|--|\n| wrong |  birds | morning | soldier | good |\n| issue |  fox | met | king | gave |\n| faith |  horse | wood | castle | great |\n\n可以看到pLSA是可以正确推导出来主题分布的。\n\n## pLSA的EM算法推导\n\npLSA是一种含隐变量的生成模型，也就是概率化地描述了样本数据(文章)的生成并且包含隐藏变量的模型，对于这种模型可用MCMC或EM算法来求解。本文讲解的是pLSA的EM算法求解，这里并不打算讲解EM的具体推导，而是直接利用EM算法的结论来对pLSA模型求解，关于EM算法的内容读者可以自己网上搜罗一下资料，或者待我抽空再写一篇关于EM算法的文章。\n在开始推导之前，我们先假设词库大小为$j$, 每篇文章都由词库中的词$w_j$构成。然后定义模型参数:\n$$\n\\begin{aligned}\n\\theta_{mk}=p(z_k|d_m) \\\\\n\\psi_{kj} = p(w_j|z_k)\n\\end{aligned} \\tag{1}\n$$\n根据EM算法的求解步骤，我们先根据plate notation写出联合分布:\n$$\n\tp(\\bf w, \\bf z, \\bf d) = \\prod_m p(d_m) \\prod_n p(w_{mn}|z_{mn})p(z_{mn}|d_m) \\tag{2}\n$$\n其中$d_m$表示第$m$篇文章， $w_{mn}$表示第$m$篇文章中的第$n$个词，$z_{mn}$表示第$m$篇文章中第$n$个词对应的主题。然后我们令给定模型参数下的主题后验证分布为：\n$$\n\tQ(\\bf z; \\bf \\theta, \\bf \\psi) = p(\\bf z|\\bf d, \\bf w; \\bf \\theta, \\bf \\psi) \\tag{3}\n$$\n于是可以启动EM算法当中的求期望步骤：\n$$\n\\sum_{\\bf z} {Q(\\bf z)lnp(\\bf w, \\bf z, \\bf w)} = \\sum_mlnp(d_m) \\sum_n \\sum_kq(z_{mnk})ln[p(w_{mn}|z_k)p(z_k|d_m)] \\tag{4}\n$$\n其中$q(z_{mnk})$表示在给定参数下的主题验分布，这里有:\n$$\nq(z_{mnk}) = p(z_k|d_m, w_n; \\theta_{mk}, \\psi_{kj}) = \\frac {p(d_m)\\theta_{mk}\\psi_{kn}}{\\sum_kp(d_m)\\theta_{mk}\\psi_{kn}} \\tag{5}\n$$\n\n由于文章中总会出现许多重复词，例如文章$d_m$中第1个词和第$5$个词是一样的，那么就会有$w_{m1}=w_{m5}=w_j$那么对于式子$(4)$中$\\sum_n \\sum_kq(z_{mnk})ln[p(w_{mn}|z_k)p(z_k|d_m)]$这部分，我们可以将文章$d_m$中重复出现的词对应的项合并成为$\\sum_j n_{mj}\\sum_kq(z_{mjk})ln[p(w_j|z_k)p(z_k|d_m)]$, 其中$n_{mj}$为文章$d_m$中词$w_j$出现的次数。于是我们重写式子$(4)$为：\n$$\n\\sum_{\\bf z} {Q(\\bf z)lnp(\\bf w, \\bf z, \\bf w)} = \\sum_mlnp(d_m) \\sum_j n_{mj}\\sum_kq(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) \\tag{6}\n$$\n我们的目标是最大化式子$(6)$, 并且因为参数$\\bf \\theta$和$\\bf \\psi$是概率分布，所以有要约束$\\sum_k\\theta_{km}=1$和$\\sum_j{\\psi_{kj}} = 1$, 并且由于$p(d_m)$这个先验证分布可以设置为常数，这样我们去除与优化无关的常数项和增加了约束之后，就可以得到整个带约束的优化目标:\n\n$$\n\\begin{aligned}\n\t\\max \\limits_{\\theta_{mk}, \\psi_{kj}}   \\quad & \\sum_m \\sum_j n_{mj}\\sum_kq(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) \\\\\n\t\\bf{s.t.} \\quad & \\sum_{k}\\theta_{mk}=1, m=1,2,3,...,M \\\\\n\t& \\sum_{j} \\psi_{kj} = 1, k=1,2,3,...,K\n\\end{aligned} \\tag{7}\n$$\n\n这个带约束的优化目标直接使用拉格朗日乘子法：\n$$\n\tL(\\bf \\theta, \\bf \\psi, \\bf \\lambda, \\bf \\alpha) = \\sum_m \\sum_j n_{mj} \\sum_k  q(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) + \\sum_m {\\lambda_m} (1-\\sum_k\\theta_{mk}) + \\sum_k \\alpha_{k} (1-\\sum_j {\\psi_{kj}}) \\tag{8}\n$$\n于是可以对参数$\\theta_{mk}$求导并令其为0:\n$$\n\\frac{ \\partial L(\\bf \\theta, \\bf \\psi, \\bf \\lambda, \\bf \\alpha)}{\\partial \\theta_{mk}} = \\frac{ \\sum_jn_{mj}q(z_{mjk})}{\\theta_{mk}} - \\lambda_m = 0 \\\\\n \\lambda_m \\theta_{mk} ={ \\sum_jn_{mj}q(z_{mjk})}  \\tag{9}\n$$\n式子(9)左右两边对$k$求和得到:\n$$\n\\lambda_m \\sum_k \\theta_{mk} = \\sum_j{n_{mj}} \\sum_{z}q(z_{mjk}) \\\\\n\\lambda_m = \\sum_j {n_{mj}} = N_m \\tag{10}\n$$\n上述式子(10)中$N_m$表示文章$d_m$的总词数，将式子$(10)$代回式(9)可以得到:\n$$\n\\theta_{mk} = \\frac {\\sum_j n_{mj}q(z_{mjk})}{N_m} \\tag{11}\n$$\n同样地我们对参数$\\psi_{kj}$故技重施:\n$$\n\\frac {\\partial L(\\bf \\theta, \\bf \\psi,\\bf \\lambda, \\bf \\alpha)}{\\partial \\psi_{kj}} = \\frac{\\sum_m n_{mj}q(z_{mjk})}{\\psi_{kj}} - \\alpha_k = 0 \\\\\n\\alpha_k \\psi_{kj} = \\sum_m n_{mj}q(z_{mjk}) \\tag{12}\n$$\n式子(12)左右两边对$j$求和得到:\n$$\n\\alpha_k \\sum_{j} \\psi_{kj} = \\sum_m \\sum_j n_{mj} q(z_{mjk}) \\\\\n\\alpha_k = \\sum_m \\sum_j n_{mj} q(z_{mjk}) \\tag{13}\n$$\n将式子代回$(12)$得到：\n$$\n\\psi_{kj} = \\frac { \\sum_m n_{mj}q(z_{mjk})}{ \\sum_m \\sum_j n_{mj} q(z_{mjk})} \\tag{14}\n$$\n至此，pLSA参数求解完毕。根据参数更新的规则，我们设在EM算法迭代运行的过程中，第$i$轮的参数为$\\theta_{mk}^i$和$\\psi_{kj}^i$。于是整个pLSA的EM算法可以归纳为：\n\n1.  随机初始化参数$\\theta_{mk}^0$和$\\psi_{kj}^0$\n2. 开始第$i\\in[1, 2, 3...n]$轮迭代:\n\ta. 求$q(z_{mjk})=\\frac {p(d_m)\\theta_{mk}^{i-1}\\psi_{kj}^{i-1}}{\\sum_kp(d_m)\\theta_{mk}^{i-1}\\psi_{kj}^{i-1}}$\n\tb. 更新参数\n\t$$\n\t\t\\theta_{mk}^i = \\frac {\\sum_j n_{mj}q(z_{mjk})}{N_m} \\\\\n\t\t\\psi_{kj}^i = \\frac { \\sum_m n_{mj}q(z_{mjk})}{ \\sum_m \\sum_j n_{mj} q(z_{mjk})}\n\t$$\n\tc. 若参数收敛，则退出迭代，否则返回`a`继续迭代\n3. 输出模型参数$\\bf \\theta$和$\\bf \\psi$\n\n## pLSA的实现\n从上边的式子来看pLSA是相对比较容易实现的，但是高效地实现还需要一些技巧。首先看式(14)的分母，存在一个二阶求和的过程，如果语料库中有`1000`篇文档，`10000`个词，那么就要进行一千万次运算，这样显然必须要用并行批量计算的方式来加速，在实现上我们会将涉及的所有运算都转换为矩阵运算，这样就可以通过成熟的GPU库来加速运算。其次再看内存消耗问题，$q(z_{mjk})$总共需要储存`m*j*k`个参数，如果有`1000`篇文档`10000`个词和`50`个主题，那么$q(z_{mjk})$将有`5亿`个元素，这在内存消耗上是不可接受的，在实现上我们只会在批量计算$\\theta_{mk}$和$\\psi_{kj}$参数时用到的部分$q(z_{mjk})$批量计算出来，并且一旦使用完毕立即丢弃。具体代码就不在这里贴了，完整的demo见[pLSA实现](https://github.com/EmbolismSoil/pLSA)\n\n## 总结\npLSA是概率隐语义主题模型中相对简单的一种，推导和实现都相对简单，回头看上面的算法过程，实际上只需要简单地计数迭代而已，所以pLSA非常适合在线学习。其实并非pLSA有此特点，事实上大多数生成模型都一样适合在线学习。不过pLSA的缺点也是非常明显的，**pLSA将文章建模时没有考虑文章词序**，也就是我们随机将一篇文章词打散，对于pLSA来说，其联合概率$p(\\bf w, \\bf z, \\bf d)$是不变的,这一点回头看式子$(2)$就知道。这意味着\"谁是你爸爸\"和\"你爸爸是谁\"这两句话在pLSA眼里看来是一样的，这种情况在短文本场景中尤其常见。但幸运的是，在长文本领域，*有研表究明，汉字的序顺并不能影阅响读*。不过pLSA近年来正在逐渐被更新颖复杂的LDA代替，但相对LDA来说pLSA结构简单，容易做大规模并行化，所以时至今日，pLSA在大规模文本挖掘领域依旧光耀夺目。\n\n最后，向Thomas Hofmann先生致敬，感谢先生为我们带来如此精妙的pLSA主题模型。\n\n## 参考文献\n[1] [ Probabilistic Latent Semantic Analysis](https://arxiv.org/pdf/1301.6705.pdf)\n[2] [Tutorial on Probablistic Latent Semantic Analysis](https://arxiv.org/pdf/1212.3900.pdf)","source":"_posts/让机器读懂文章-pLSA模型推导及实现.md","raw":"---\ntitle: 让机器读懂文章-pLSA模型推导及实现\ndate: 2019-07-12 02:09:57\ntags: [自然语言处理, 算法, 机器学习]\nmathjax: true\ncategories: [自然语言处理]\n---\n\n## 概述\n人类读懂文章是一个很自然的行为，当我们读完一篇《背影》的时候，我们就可以知道这篇文章在写些什么，也就是我们说获得了这篇文章的相关知识。有了这些知识，我们就可以回答一些问题，例如:\n\n1. 问：这篇文章写的主要内容是什么呢？\n    答： 亲情、送别\n2. 问：有类似《背影》这样的文章可以推荐的吗？\n    答：龙应台-《送别》\n\n虽然上面的问答对任务对人类来说十分简单，但对于机器来说却并不容易。机器对自然语言(中文文本)的理解实际上并不是非常简单的事情，因为自然语言本身是一个高层抽象的概念，而机器只擅长处理量化的知识，例如说让机器记住向量$\\vec x=[1, 2, 3]$和$\\vec y=[4, 5, 6]$是十分容易的事情，而且可以轻易知道$\\vec x$和$\\vec y$的相似程度，这只需要计算其记录即可，于是我们对于向量来说就可以完成上面的问题2了。\n\n让我们重新揣摩一下人类读懂文章的过程，实际上我们并不需要背熟每一个字词，而是阅读完成之后再总结出这篇文章主要在写什么，也就是文章的主题。为了让机器能理解文章，我们也需要把这些主题量化出来，形成类似$\\overrightarrow {topic}=['亲情': 0.5, '送别': 0.5]$的向量，这种能量化文章主题的模型，也就叫做**主题模型**了。\n\n在主题模型方面前人们已经做了很多工作，并且取得了非常不错的成效，其中影响较大的是一类模型叫做**隐语义模型**，而这类模型里面**概率隐语义分析**也就是本文所述的pLSA则是应用最成功的模型之一，同样成功的模型还有**隐含狄利克雷分布**，也就是大名鼎鼎的LDA主题模型，不过LDA与pLSA的思想一脉相承，只不过做了贝叶斯改造而已。\n\n\n## pLSA模型\n\n事实上pLSA是在对我们写一篇文章的行为建模，我们先揣摩朱自清先生写《背影》的行为。首先我朱先生敲定了今天要写一篇《背影》，然后他开始构思了这篇文章的主题为：亲情、送别，并且朱先生认为这两部分的内容都几乎同等重要，也就是: $['亲情': 0.5, '送别': 0.5]$，朱先生开始动笔，于是当朱先生写下\n\n> 我买几个橘子去，你就在此地，不要走动。\n\n实际上是朱先生先前构思好的亲情、父子、送别这三个中心思想在影响着朱先生写下了这段话。于是在这三个中心思想的影响下，朱先生写完了《背影》里面的所有词，而我们读者所谓的**理解**《背影》，实际上就是从我们看到的《背影》的所有词，推断出了朱先生构思的主题: $['亲情': 0.5, '送别': 0.5]$。而pLSA则只是用数学化的形式描述这个过程, 这样一个形式化的过程在pLSA的眼里是这样的：\n\n1.  从分布$p(d_m)$上采样选择了一篇文章$d_m$\n2. 对于文章$d_m$每一个词，从分布$p(z_k|d_m)$上采样一个生成一个主题$z_k$\n3. 从分布$p(w_n|z_k)$上采样生成了一个词$w_n$\n\n这个模型可以用plate notation更加简洁地描述：\n\n![pLSA模型](plsa.png)\n\n图中的阴影部分的变量$d$和$w$对应着文章和文章的所有词，表示可观测的变量，$z$是观测不到的主题，我们称之为隐变量，两个框框左下角的$N$和$M$则分别表示$N$和$M$词独立重复试验。这个图所表达的文章生成过程跟上面的文字表述是一致的。\n\n这样写文章的模型是符合直觉的，但仔细推敲总觉得过于机械生硬，这样的机械式过程能写得出朱先生《背影》那样优秀的文章吗? \n> 如果无限多个猴子任意敲打打字机键，最终会写出大英博物馆的所有藏书 -- 爱丁顿无限猴子理论\n\n一件小概率的事件在多次试验中必然发生，这就是为什么随机敲打键盘的猴子也能作的原因，于是上面问题答案自然是肯定的，pLSA这样合乎直觉的模型当然要比一只茫无目的敲打键盘的猴子更加具备写作天赋。\n\n我们读者需要阅读根据文章和文章的所有内容去推断文章的主题，而pLSA眼里则是根据可观测变量$w$和可观测变量$d$去推断隐变量$z$。我们可以通过海量的文章去解算出模型中的参数，也就是上文中的$p(z_k|p_m)$和$p(w_n|z_k)$两个分布，我们称之为**文章主题分布**和**主题词分布**。 而$p(z_k|d_m)$这个分布实际上就是文章$d_m$的主题分布，也就是我们前文所说的$['亲情': 0.5, '送别': 0.5]$这样的文章主题，这个分布就是我们就获取到关于文章的知识，它量化说明了文章$d_m$在说什么内容。至于模型参数解算的过程，这没什么不可以理解的，正如我定义了一个$y$的产生过程过$y=ax+b$, 当我拿到足够多的样本$y_0=0, y_1=1, y_2=2,....y_n=n$之后，实际上我可以将他们组成方程组解出合理的参数$a$、$b$和$x$来。\n\n行文至此，我们且对pLSA的求解按下不表，先来实际感受一下pLSA的作用。这里选择格林童话中的十几篇童话作为语料训练pLSA，然后分别从5个主题分布中取出的top3词语：\n\n| topic-1 |  topic-2 | topic-3 | topic-4 | topic-5 |\n|--|--|--|--|--|\n| wrong |  birds | morning | soldier | good |\n| issue |  fox | met | king | gave |\n| faith |  horse | wood | castle | great |\n\n可以看到pLSA是可以正确推导出来主题分布的。\n\n## pLSA的EM算法推导\n\npLSA是一种含隐变量的生成模型，也就是概率化地描述了样本数据(文章)的生成并且包含隐藏变量的模型，对于这种模型可用MCMC或EM算法来求解。本文讲解的是pLSA的EM算法求解，这里并不打算讲解EM的具体推导，而是直接利用EM算法的结论来对pLSA模型求解，关于EM算法的内容读者可以自己网上搜罗一下资料，或者待我抽空再写一篇关于EM算法的文章。\n在开始推导之前，我们先假设词库大小为$j$, 每篇文章都由词库中的词$w_j$构成。然后定义模型参数:\n$$\n\\begin{aligned}\n\\theta_{mk}=p(z_k|d_m) \\\\\n\\psi_{kj} = p(w_j|z_k)\n\\end{aligned} \\tag{1}\n$$\n根据EM算法的求解步骤，我们先根据plate notation写出联合分布:\n$$\n\tp(\\bf w, \\bf z, \\bf d) = \\prod_m p(d_m) \\prod_n p(w_{mn}|z_{mn})p(z_{mn}|d_m) \\tag{2}\n$$\n其中$d_m$表示第$m$篇文章， $w_{mn}$表示第$m$篇文章中的第$n$个词，$z_{mn}$表示第$m$篇文章中第$n$个词对应的主题。然后我们令给定模型参数下的主题后验证分布为：\n$$\n\tQ(\\bf z; \\bf \\theta, \\bf \\psi) = p(\\bf z|\\bf d, \\bf w; \\bf \\theta, \\bf \\psi) \\tag{3}\n$$\n于是可以启动EM算法当中的求期望步骤：\n$$\n\\sum_{\\bf z} {Q(\\bf z)lnp(\\bf w, \\bf z, \\bf w)} = \\sum_mlnp(d_m) \\sum_n \\sum_kq(z_{mnk})ln[p(w_{mn}|z_k)p(z_k|d_m)] \\tag{4}\n$$\n其中$q(z_{mnk})$表示在给定参数下的主题验分布，这里有:\n$$\nq(z_{mnk}) = p(z_k|d_m, w_n; \\theta_{mk}, \\psi_{kj}) = \\frac {p(d_m)\\theta_{mk}\\psi_{kn}}{\\sum_kp(d_m)\\theta_{mk}\\psi_{kn}} \\tag{5}\n$$\n\n由于文章中总会出现许多重复词，例如文章$d_m$中第1个词和第$5$个词是一样的，那么就会有$w_{m1}=w_{m5}=w_j$那么对于式子$(4)$中$\\sum_n \\sum_kq(z_{mnk})ln[p(w_{mn}|z_k)p(z_k|d_m)]$这部分，我们可以将文章$d_m$中重复出现的词对应的项合并成为$\\sum_j n_{mj}\\sum_kq(z_{mjk})ln[p(w_j|z_k)p(z_k|d_m)]$, 其中$n_{mj}$为文章$d_m$中词$w_j$出现的次数。于是我们重写式子$(4)$为：\n$$\n\\sum_{\\bf z} {Q(\\bf z)lnp(\\bf w, \\bf z, \\bf w)} = \\sum_mlnp(d_m) \\sum_j n_{mj}\\sum_kq(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) \\tag{6}\n$$\n我们的目标是最大化式子$(6)$, 并且因为参数$\\bf \\theta$和$\\bf \\psi$是概率分布，所以有要约束$\\sum_k\\theta_{km}=1$和$\\sum_j{\\psi_{kj}} = 1$, 并且由于$p(d_m)$这个先验证分布可以设置为常数，这样我们去除与优化无关的常数项和增加了约束之后，就可以得到整个带约束的优化目标:\n\n$$\n\\begin{aligned}\n\t\\max \\limits_{\\theta_{mk}, \\psi_{kj}}   \\quad & \\sum_m \\sum_j n_{mj}\\sum_kq(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) \\\\\n\t\\bf{s.t.} \\quad & \\sum_{k}\\theta_{mk}=1, m=1,2,3,...,M \\\\\n\t& \\sum_{j} \\psi_{kj} = 1, k=1,2,3,...,K\n\\end{aligned} \\tag{7}\n$$\n\n这个带约束的优化目标直接使用拉格朗日乘子法：\n$$\n\tL(\\bf \\theta, \\bf \\psi, \\bf \\lambda, \\bf \\alpha) = \\sum_m \\sum_j n_{mj} \\sum_k  q(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) + \\sum_m {\\lambda_m} (1-\\sum_k\\theta_{mk}) + \\sum_k \\alpha_{k} (1-\\sum_j {\\psi_{kj}}) \\tag{8}\n$$\n于是可以对参数$\\theta_{mk}$求导并令其为0:\n$$\n\\frac{ \\partial L(\\bf \\theta, \\bf \\psi, \\bf \\lambda, \\bf \\alpha)}{\\partial \\theta_{mk}} = \\frac{ \\sum_jn_{mj}q(z_{mjk})}{\\theta_{mk}} - \\lambda_m = 0 \\\\\n \\lambda_m \\theta_{mk} ={ \\sum_jn_{mj}q(z_{mjk})}  \\tag{9}\n$$\n式子(9)左右两边对$k$求和得到:\n$$\n\\lambda_m \\sum_k \\theta_{mk} = \\sum_j{n_{mj}} \\sum_{z}q(z_{mjk}) \\\\\n\\lambda_m = \\sum_j {n_{mj}} = N_m \\tag{10}\n$$\n上述式子(10)中$N_m$表示文章$d_m$的总词数，将式子$(10)$代回式(9)可以得到:\n$$\n\\theta_{mk} = \\frac {\\sum_j n_{mj}q(z_{mjk})}{N_m} \\tag{11}\n$$\n同样地我们对参数$\\psi_{kj}$故技重施:\n$$\n\\frac {\\partial L(\\bf \\theta, \\bf \\psi,\\bf \\lambda, \\bf \\alpha)}{\\partial \\psi_{kj}} = \\frac{\\sum_m n_{mj}q(z_{mjk})}{\\psi_{kj}} - \\alpha_k = 0 \\\\\n\\alpha_k \\psi_{kj} = \\sum_m n_{mj}q(z_{mjk}) \\tag{12}\n$$\n式子(12)左右两边对$j$求和得到:\n$$\n\\alpha_k \\sum_{j} \\psi_{kj} = \\sum_m \\sum_j n_{mj} q(z_{mjk}) \\\\\n\\alpha_k = \\sum_m \\sum_j n_{mj} q(z_{mjk}) \\tag{13}\n$$\n将式子代回$(12)$得到：\n$$\n\\psi_{kj} = \\frac { \\sum_m n_{mj}q(z_{mjk})}{ \\sum_m \\sum_j n_{mj} q(z_{mjk})} \\tag{14}\n$$\n至此，pLSA参数求解完毕。根据参数更新的规则，我们设在EM算法迭代运行的过程中，第$i$轮的参数为$\\theta_{mk}^i$和$\\psi_{kj}^i$。于是整个pLSA的EM算法可以归纳为：\n\n1.  随机初始化参数$\\theta_{mk}^0$和$\\psi_{kj}^0$\n2. 开始第$i\\in[1, 2, 3...n]$轮迭代:\n\ta. 求$q(z_{mjk})=\\frac {p(d_m)\\theta_{mk}^{i-1}\\psi_{kj}^{i-1}}{\\sum_kp(d_m)\\theta_{mk}^{i-1}\\psi_{kj}^{i-1}}$\n\tb. 更新参数\n\t$$\n\t\t\\theta_{mk}^i = \\frac {\\sum_j n_{mj}q(z_{mjk})}{N_m} \\\\\n\t\t\\psi_{kj}^i = \\frac { \\sum_m n_{mj}q(z_{mjk})}{ \\sum_m \\sum_j n_{mj} q(z_{mjk})}\n\t$$\n\tc. 若参数收敛，则退出迭代，否则返回`a`继续迭代\n3. 输出模型参数$\\bf \\theta$和$\\bf \\psi$\n\n## pLSA的实现\n从上边的式子来看pLSA是相对比较容易实现的，但是高效地实现还需要一些技巧。首先看式(14)的分母，存在一个二阶求和的过程，如果语料库中有`1000`篇文档，`10000`个词，那么就要进行一千万次运算，这样显然必须要用并行批量计算的方式来加速，在实现上我们会将涉及的所有运算都转换为矩阵运算，这样就可以通过成熟的GPU库来加速运算。其次再看内存消耗问题，$q(z_{mjk})$总共需要储存`m*j*k`个参数，如果有`1000`篇文档`10000`个词和`50`个主题，那么$q(z_{mjk})$将有`5亿`个元素，这在内存消耗上是不可接受的，在实现上我们只会在批量计算$\\theta_{mk}$和$\\psi_{kj}$参数时用到的部分$q(z_{mjk})$批量计算出来，并且一旦使用完毕立即丢弃。具体代码就不在这里贴了，完整的demo见[pLSA实现](https://github.com/EmbolismSoil/pLSA)\n\n## 总结\npLSA是概率隐语义主题模型中相对简单的一种，推导和实现都相对简单，回头看上面的算法过程，实际上只需要简单地计数迭代而已，所以pLSA非常适合在线学习。其实并非pLSA有此特点，事实上大多数生成模型都一样适合在线学习。不过pLSA的缺点也是非常明显的，**pLSA将文章建模时没有考虑文章词序**，也就是我们随机将一篇文章词打散，对于pLSA来说，其联合概率$p(\\bf w, \\bf z, \\bf d)$是不变的,这一点回头看式子$(2)$就知道。这意味着\"谁是你爸爸\"和\"你爸爸是谁\"这两句话在pLSA眼里看来是一样的，这种情况在短文本场景中尤其常见。但幸运的是，在长文本领域，*有研表究明，汉字的序顺并不能影阅响读*。不过pLSA近年来正在逐渐被更新颖复杂的LDA代替，但相对LDA来说pLSA结构简单，容易做大规模并行化，所以时至今日，pLSA在大规模文本挖掘领域依旧光耀夺目。\n\n最后，向Thomas Hofmann先生致敬，感谢先生为我们带来如此精妙的pLSA主题模型。\n\n## 参考文献\n[1] [ Probabilistic Latent Semantic Analysis](https://arxiv.org/pdf/1301.6705.pdf)\n[2] [Tutorial on Probablistic Latent Semantic Analysis](https://arxiv.org/pdf/1212.3900.pdf)","slug":"让机器读懂文章-pLSA模型推导及实现","published":1,"updated":"2020-04-12T13:22:37.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8x40siu0005q69paw2qz1jm","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>人类读懂文章是一个很自然的行为，当我们读完一篇《背影》的时候，我们就可以知道这篇文章在写些什么，也就是我们说获得了这篇文章的相关知识。有了这些知识，我们就可以回答一些问题，例如:</p>\n<ol>\n<li>问：这篇文章写的主要内容是什么呢？<br> 答： 亲情、送别</li>\n<li>问：有类似《背影》这样的文章可以推荐的吗？<br> 答：龙应台-《送别》</li>\n</ol>\n<p>虽然上面的问答对任务对人类来说十分简单，但对于机器来说却并不容易。机器对自然语言(中文文本)的理解实际上并不是非常简单的事情，因为自然语言本身是一个高层抽象的概念，而机器只擅长处理量化的知识，例如说让机器记住向量$\\vec x=[1, 2, 3]$和$\\vec y=[4, 5, 6]$是十分容易的事情，而且可以轻易知道$\\vec x$和$\\vec y$的相似程度，这只需要计算其记录即可，于是我们对于向量来说就可以完成上面的问题2了。</p>\n<p>让我们重新揣摩一下人类读懂文章的过程，实际上我们并不需要背熟每一个字词，而是阅读完成之后再总结出这篇文章主要在写什么，也就是文章的主题。为了让机器能理解文章，我们也需要把这些主题量化出来，形成类似$\\overrightarrow {topic}=[‘亲情’: 0.5, ‘送别’: 0.5]$的向量，这种能量化文章主题的模型，也就叫做<strong>主题模型</strong>了。</p>\n<p>在主题模型方面前人们已经做了很多工作，并且取得了非常不错的成效，其中影响较大的是一类模型叫做<strong>隐语义模型</strong>，而这类模型里面<strong>概率隐语义分析</strong>也就是本文所述的pLSA则是应用最成功的模型之一，同样成功的模型还有<strong>隐含狄利克雷分布</strong>，也就是大名鼎鼎的LDA主题模型，不过LDA与pLSA的思想一脉相承，只不过做了贝叶斯改造而已。</p>\n<h2 id=\"pLSA模型\"><a href=\"#pLSA模型\" class=\"headerlink\" title=\"pLSA模型\"></a>pLSA模型</h2><p>事实上pLSA是在对我们写一篇文章的行为建模，我们先揣摩朱自清先生写《背影》的行为。首先我朱先生敲定了今天要写一篇《背影》，然后他开始构思了这篇文章的主题为：亲情、送别，并且朱先生认为这两部分的内容都几乎同等重要，也就是: $[‘亲情’: 0.5, ‘送别’: 0.5]$，朱先生开始动笔，于是当朱先生写下</p>\n<blockquote>\n<p>我买几个橘子去，你就在此地，不要走动。</p>\n</blockquote>\n<p>实际上是朱先生先前构思好的亲情、父子、送别这三个中心思想在影响着朱先生写下了这段话。于是在这三个中心思想的影响下，朱先生写完了《背影》里面的所有词，而我们读者所谓的<strong>理解</strong>《背影》，实际上就是从我们看到的《背影》的所有词，推断出了朱先生构思的主题: $[‘亲情’: 0.5, ‘送别’: 0.5]$。而pLSA则只是用数学化的形式描述这个过程, 这样一个形式化的过程在pLSA的眼里是这样的：</p>\n<ol>\n<li>从分布$p(d_m)$上采样选择了一篇文章$d_m$</li>\n<li>对于文章$d_m$每一个词，从分布$p(z_k|d_m)$上采样一个生成一个主题$z_k$</li>\n<li>从分布$p(w_n|z_k)$上采样生成了一个词$w_n$</li>\n</ol>\n<p>这个模型可以用plate notation更加简洁地描述：</p>\n<p><img src=\"plsa.png\" alt=\"pLSA模型\"></p>\n<p>图中的阴影部分的变量$d$和$w$对应着文章和文章的所有词，表示可观测的变量，$z$是观测不到的主题，我们称之为隐变量，两个框框左下角的$N$和$M$则分别表示$N$和$M$词独立重复试验。这个图所表达的文章生成过程跟上面的文字表述是一致的。</p>\n<p>这样写文章的模型是符合直觉的，但仔细推敲总觉得过于机械生硬，这样的机械式过程能写得出朱先生《背影》那样优秀的文章吗? </p>\n<blockquote>\n<p>如果无限多个猴子任意敲打打字机键，最终会写出大英博物馆的所有藏书 — 爱丁顿无限猴子理论</p>\n</blockquote>\n<p>一件小概率的事件在多次试验中必然发生，这就是为什么随机敲打键盘的猴子也能作的原因，于是上面问题答案自然是肯定的，pLSA这样合乎直觉的模型当然要比一只茫无目的敲打键盘的猴子更加具备写作天赋。</p>\n<p>我们读者需要阅读根据文章和文章的所有内容去推断文章的主题，而pLSA眼里则是根据可观测变量$w$和可观测变量$d$去推断隐变量$z$。我们可以通过海量的文章去解算出模型中的参数，也就是上文中的$p(z_k|p_m)$和$p(w_n|z_k)$两个分布，我们称之为<strong>文章主题分布</strong>和<strong>主题词分布</strong>。 而$p(z_k|d_m)$这个分布实际上就是文章$d_m$的主题分布，也就是我们前文所说的$[‘亲情’: 0.5, ‘送别’: 0.5]$这样的文章主题，这个分布就是我们就获取到关于文章的知识，它量化说明了文章$d_m$在说什么内容。至于模型参数解算的过程，这没什么不可以理解的，正如我定义了一个$y$的产生过程过$y=ax+b$, 当我拿到足够多的样本$y_0=0, y_1=1, y_2=2,….y_n=n$之后，实际上我可以将他们组成方程组解出合理的参数$a$、$b$和$x$来。</p>\n<p>行文至此，我们且对pLSA的求解按下不表，先来实际感受一下pLSA的作用。这里选择格林童话中的十几篇童话作为语料训练pLSA，然后分别从5个主题分布中取出的top3词语：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>topic-1</th>\n<th>topic-2</th>\n<th>topic-3</th>\n<th>topic-4</th>\n<th>topic-5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>wrong</td>\n<td>birds</td>\n<td>morning</td>\n<td>soldier</td>\n<td>good</td>\n</tr>\n<tr>\n<td>issue</td>\n<td>fox</td>\n<td>met</td>\n<td>king</td>\n<td>gave</td>\n</tr>\n<tr>\n<td>faith</td>\n<td>horse</td>\n<td>wood</td>\n<td>castle</td>\n<td>great</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>可以看到pLSA是可以正确推导出来主题分布的。</p>\n<h2 id=\"pLSA的EM算法推导\"><a href=\"#pLSA的EM算法推导\" class=\"headerlink\" title=\"pLSA的EM算法推导\"></a>pLSA的EM算法推导</h2><p>pLSA是一种含隐变量的生成模型，也就是概率化地描述了样本数据(文章)的生成并且包含隐藏变量的模型，对于这种模型可用MCMC或EM算法来求解。本文讲解的是pLSA的EM算法求解，这里并不打算讲解EM的具体推导，而是直接利用EM算法的结论来对pLSA模型求解，关于EM算法的内容读者可以自己网上搜罗一下资料，或者待我抽空再写一篇关于EM算法的文章。<br>在开始推导之前，我们先假设词库大小为$j$, 每篇文章都由词库中的词$w_j$构成。然后定义模型参数:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\theta_{mk}=p(z_k|d_m) \\\\\n\\psi_{kj} = p(w_j|z_k)\n\\end{aligned} \\tag{1}</script><p>根据EM算法的求解步骤，我们先根据plate notation写出联合分布:</p>\n<script type=\"math/tex; mode=display\">\n    p(\\bf w, \\bf z, \\bf d) = \\prod_m p(d_m) \\prod_n p(w_{mn}|z_{mn})p(z_{mn}|d_m) \\tag{2}</script><p>其中$d_m$表示第$m$篇文章， $w_{mn}$表示第$m$篇文章中的第$n$个词，$z_{mn}$表示第$m$篇文章中第$n$个词对应的主题。然后我们令给定模型参数下的主题后验证分布为：</p>\n<script type=\"math/tex; mode=display\">\n    Q(\\bf z; \\bf \\theta, \\bf \\psi) = p(\\bf z|\\bf d, \\bf w; \\bf \\theta, \\bf \\psi) \\tag{3}</script><p>于是可以启动EM算法当中的求期望步骤：</p>\n<script type=\"math/tex; mode=display\">\n\\sum_{\\bf z} {Q(\\bf z)lnp(\\bf w, \\bf z, \\bf w)} = \\sum_mlnp(d_m) \\sum_n \\sum_kq(z_{mnk})ln[p(w_{mn}|z_k)p(z_k|d_m)] \\tag{4}</script><p>其中$q(z_{mnk})$表示在给定参数下的主题验分布，这里有:</p>\n<script type=\"math/tex; mode=display\">\nq(z_{mnk}) = p(z_k|d_m, w_n; \\theta_{mk}, \\psi_{kj}) = \\frac {p(d_m)\\theta_{mk}\\psi_{kn}}{\\sum_kp(d_m)\\theta_{mk}\\psi_{kn}} \\tag{5}</script><p>由于文章中总会出现许多重复词，例如文章$d_m$中第1个词和第$5$个词是一样的，那么就会有$w_{m1}=w_{m5}=w_j$那么对于式子$(4)$中$\\sum_n \\sum_kq(z_{mnk})ln[p(w_{mn}|z_k)p(z_k|d_m)]$这部分，我们可以将文章$d_m$中重复出现的词对应的项合并成为$\\sum_j n_{mj}\\sum_kq(z_{mjk})ln[p(w_j|z_k)p(z_k|d_m)]$, 其中$n_{mj}$为文章$d_m$中词$w_j$出现的次数。于是我们重写式子$(4)$为：</p>\n<script type=\"math/tex; mode=display\">\n\\sum_{\\bf z} {Q(\\bf z)lnp(\\bf w, \\bf z, \\bf w)} = \\sum_mlnp(d_m) \\sum_j n_{mj}\\sum_kq(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) \\tag{6}</script><p>我们的目标是最大化式子$(6)$, 并且因为参数$\\bf \\theta$和$\\bf \\psi$是概率分布，所以有要约束$\\sum_k\\theta_{km}=1$和$\\sum_j{\\psi_{kj}} = 1$, 并且由于$p(d_m)$这个先验证分布可以设置为常数，这样我们去除与优化无关的常数项和增加了约束之后，就可以得到整个带约束的优化目标:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n    \\max \\limits_{\\theta_{mk}, \\psi_{kj}}   \\quad & \\sum_m \\sum_j n_{mj}\\sum_kq(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) \\\\\n    \\bf{s.t.} \\quad & \\sum_{k}\\theta_{mk}=1, m=1,2,3,...,M \\\\\n    & \\sum_{j} \\psi_{kj} = 1, k=1,2,3,...,K\n\\end{aligned} \\tag{7}</script><p>这个带约束的优化目标直接使用拉格朗日乘子法：</p>\n<script type=\"math/tex; mode=display\">\n    L(\\bf \\theta, \\bf \\psi, \\bf \\lambda, \\bf \\alpha) = \\sum_m \\sum_j n_{mj} \\sum_k  q(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) + \\sum_m {\\lambda_m} (1-\\sum_k\\theta_{mk}) + \\sum_k \\alpha_{k} (1-\\sum_j {\\psi_{kj}}) \\tag{8}</script><p>于是可以对参数$\\theta_{mk}$求导并令其为0:</p>\n<script type=\"math/tex; mode=display\">\n\\frac{ \\partial L(\\bf \\theta, \\bf \\psi, \\bf \\lambda, \\bf \\alpha)}{\\partial \\theta_{mk}} = \\frac{ \\sum_jn_{mj}q(z_{mjk})}{\\theta_{mk}} - \\lambda_m = 0 \\\\\n \\lambda_m \\theta_{mk} ={ \\sum_jn_{mj}q(z_{mjk})}  \\tag{9}</script><p>式子(9)左右两边对$k$求和得到:</p>\n<script type=\"math/tex; mode=display\">\n\\lambda_m \\sum_k \\theta_{mk} = \\sum_j{n_{mj}} \\sum_{z}q(z_{mjk}) \\\\\n\\lambda_m = \\sum_j {n_{mj}} = N_m \\tag{10}</script><p>上述式子(10)中$N_m$表示文章$d_m$的总词数，将式子$(10)$代回式(9)可以得到:</p>\n<script type=\"math/tex; mode=display\">\n\\theta_{mk} = \\frac {\\sum_j n_{mj}q(z_{mjk})}{N_m} \\tag{11}</script><p>同样地我们对参数$\\psi_{kj}$故技重施:</p>\n<script type=\"math/tex; mode=display\">\n\\frac {\\partial L(\\bf \\theta, \\bf \\psi,\\bf \\lambda, \\bf \\alpha)}{\\partial \\psi_{kj}} = \\frac{\\sum_m n_{mj}q(z_{mjk})}{\\psi_{kj}} - \\alpha_k = 0 \\\\\n\\alpha_k \\psi_{kj} = \\sum_m n_{mj}q(z_{mjk}) \\tag{12}</script><p>式子(12)左右两边对$j$求和得到:</p>\n<script type=\"math/tex; mode=display\">\n\\alpha_k \\sum_{j} \\psi_{kj} = \\sum_m \\sum_j n_{mj} q(z_{mjk}) \\\\\n\\alpha_k = \\sum_m \\sum_j n_{mj} q(z_{mjk}) \\tag{13}</script><p>将式子代回$(12)$得到：</p>\n<script type=\"math/tex; mode=display\">\n\\psi_{kj} = \\frac { \\sum_m n_{mj}q(z_{mjk})}{ \\sum_m \\sum_j n_{mj} q(z_{mjk})} \\tag{14}</script><p>至此，pLSA参数求解完毕。根据参数更新的规则，我们设在EM算法迭代运行的过程中，第$i$轮的参数为$\\theta_{mk}^i$和$\\psi_{kj}^i$。于是整个pLSA的EM算法可以归纳为：</p>\n<ol>\n<li>随机初始化参数$\\theta_{mk}^0$和$\\psi_{kj}^0$</li>\n<li>开始第$i\\in[1, 2, 3…n]$轮迭代:<br> a. 求$q(z_{mjk})=\\frac {p(d_m)\\theta_{mk}^{i-1}\\psi_{kj}^{i-1}}{\\sum_kp(d_m)\\theta_{mk}^{i-1}\\psi_{kj}^{i-1}}$<br> b. 更新参数<script type=\"math/tex; mode=display\">\n     \\theta_{mk}^i = \\frac {\\sum_j n_{mj}q(z_{mjk})}{N_m} \\\\\n     \\psi_{kj}^i = \\frac { \\sum_m n_{mj}q(z_{mjk})}{ \\sum_m \\sum_j n_{mj} q(z_{mjk})}</script> c. 若参数收敛，则退出迭代，否则返回<code>a</code>继续迭代</li>\n<li>输出模型参数$\\bf \\theta$和$\\bf \\psi$</li>\n</ol>\n<h2 id=\"pLSA的实现\"><a href=\"#pLSA的实现\" class=\"headerlink\" title=\"pLSA的实现\"></a>pLSA的实现</h2><p>从上边的式子来看pLSA是相对比较容易实现的，但是高效地实现还需要一些技巧。首先看式(14)的分母，存在一个二阶求和的过程，如果语料库中有<code>1000</code>篇文档，<code>10000</code>个词，那么就要进行一千万次运算，这样显然必须要用并行批量计算的方式来加速，在实现上我们会将涉及的所有运算都转换为矩阵运算，这样就可以通过成熟的GPU库来加速运算。其次再看内存消耗问题，$q(z_{mjk})$总共需要储存<code>m*j*k</code>个参数，如果有<code>1000</code>篇文档<code>10000</code>个词和<code>50</code>个主题，那么$q(z_{mjk})$将有<code>5亿</code>个元素，这在内存消耗上是不可接受的，在实现上我们只会在批量计算$\\theta_{mk}$和$\\psi_{kj}$参数时用到的部分$q(z_{mjk})$批量计算出来，并且一旦使用完毕立即丢弃。具体代码就不在这里贴了，完整的demo见<a href=\"https://github.com/EmbolismSoil/pLSA\" target=\"_blank\" rel=\"noopener\">pLSA实现</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>pLSA是概率隐语义主题模型中相对简单的一种，推导和实现都相对简单，回头看上面的算法过程，实际上只需要简单地计数迭代而已，所以pLSA非常适合在线学习。其实并非pLSA有此特点，事实上大多数生成模型都一样适合在线学习。不过pLSA的缺点也是非常明显的，<strong>pLSA将文章建模时没有考虑文章词序</strong>，也就是我们随机将一篇文章词打散，对于pLSA来说，其联合概率$p(\\bf w, \\bf z, \\bf d)$是不变的,这一点回头看式子$(2)$就知道。这意味着”谁是你爸爸”和”你爸爸是谁”这两句话在pLSA眼里看来是一样的，这种情况在短文本场景中尤其常见。但幸运的是，在长文本领域，<em>有研表究明，汉字的序顺并不能影阅响读</em>。不过pLSA近年来正在逐渐被更新颖复杂的LDA代替，但相对LDA来说pLSA结构简单，容易做大规模并行化，所以时至今日，pLSA在大规模文本挖掘领域依旧光耀夺目。</p>\n<p>最后，向Thomas Hofmann先生致敬，感谢先生为我们带来如此精妙的pLSA主题模型。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>[1] <a href=\"https://arxiv.org/pdf/1301.6705.pdf\" target=\"_blank\" rel=\"noopener\"> Probabilistic Latent Semantic Analysis</a><br>[2] <a href=\"https://arxiv.org/pdf/1212.3900.pdf\" target=\"_blank\" rel=\"noopener\">Tutorial on Probablistic Latent Semantic Analysis</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>人类读懂文章是一个很自然的行为，当我们读完一篇《背影》的时候，我们就可以知道这篇文章在写些什么，也就是我们说获得了这篇文章的相关知识。有了这些知识，我们就可以回答一些问题，例如:</p>\n<ol>\n<li>问：这篇文章写的主要内容是什么呢？<br> 答： 亲情、送别</li>\n<li>问：有类似《背影》这样的文章可以推荐的吗？<br> 答：龙应台-《送别》</li>\n</ol>\n<p>虽然上面的问答对任务对人类来说十分简单，但对于机器来说却并不容易。机器对自然语言(中文文本)的理解实际上并不是非常简单的事情，因为自然语言本身是一个高层抽象的概念，而机器只擅长处理量化的知识，例如说让机器记住向量$\\vec x=[1, 2, 3]$和$\\vec y=[4, 5, 6]$是十分容易的事情，而且可以轻易知道$\\vec x$和$\\vec y$的相似程度，这只需要计算其记录即可，于是我们对于向量来说就可以完成上面的问题2了。</p>\n<p>让我们重新揣摩一下人类读懂文章的过程，实际上我们并不需要背熟每一个字词，而是阅读完成之后再总结出这篇文章主要在写什么，也就是文章的主题。为了让机器能理解文章，我们也需要把这些主题量化出来，形成类似$\\overrightarrow {topic}=[‘亲情’: 0.5, ‘送别’: 0.5]$的向量，这种能量化文章主题的模型，也就叫做<strong>主题模型</strong>了。</p>\n<p>在主题模型方面前人们已经做了很多工作，并且取得了非常不错的成效，其中影响较大的是一类模型叫做<strong>隐语义模型</strong>，而这类模型里面<strong>概率隐语义分析</strong>也就是本文所述的pLSA则是应用最成功的模型之一，同样成功的模型还有<strong>隐含狄利克雷分布</strong>，也就是大名鼎鼎的LDA主题模型，不过LDA与pLSA的思想一脉相承，只不过做了贝叶斯改造而已。</p>\n<h2 id=\"pLSA模型\"><a href=\"#pLSA模型\" class=\"headerlink\" title=\"pLSA模型\"></a>pLSA模型</h2><p>事实上pLSA是在对我们写一篇文章的行为建模，我们先揣摩朱自清先生写《背影》的行为。首先我朱先生敲定了今天要写一篇《背影》，然后他开始构思了这篇文章的主题为：亲情、送别，并且朱先生认为这两部分的内容都几乎同等重要，也就是: $[‘亲情’: 0.5, ‘送别’: 0.5]$，朱先生开始动笔，于是当朱先生写下</p>\n<blockquote>\n<p>我买几个橘子去，你就在此地，不要走动。</p>\n</blockquote>\n<p>实际上是朱先生先前构思好的亲情、父子、送别这三个中心思想在影响着朱先生写下了这段话。于是在这三个中心思想的影响下，朱先生写完了《背影》里面的所有词，而我们读者所谓的<strong>理解</strong>《背影》，实际上就是从我们看到的《背影》的所有词，推断出了朱先生构思的主题: $[‘亲情’: 0.5, ‘送别’: 0.5]$。而pLSA则只是用数学化的形式描述这个过程, 这样一个形式化的过程在pLSA的眼里是这样的：</p>\n<ol>\n<li>从分布$p(d_m)$上采样选择了一篇文章$d_m$</li>\n<li>对于文章$d_m$每一个词，从分布$p(z_k|d_m)$上采样一个生成一个主题$z_k$</li>\n<li>从分布$p(w_n|z_k)$上采样生成了一个词$w_n$</li>\n</ol>\n<p>这个模型可以用plate notation更加简洁地描述：</p>\n<p><img src=\"plsa.png\" alt=\"pLSA模型\"></p>\n<p>图中的阴影部分的变量$d$和$w$对应着文章和文章的所有词，表示可观测的变量，$z$是观测不到的主题，我们称之为隐变量，两个框框左下角的$N$和$M$则分别表示$N$和$M$词独立重复试验。这个图所表达的文章生成过程跟上面的文字表述是一致的。</p>\n<p>这样写文章的模型是符合直觉的，但仔细推敲总觉得过于机械生硬，这样的机械式过程能写得出朱先生《背影》那样优秀的文章吗? </p>\n<blockquote>\n<p>如果无限多个猴子任意敲打打字机键，最终会写出大英博物馆的所有藏书 — 爱丁顿无限猴子理论</p>\n</blockquote>\n<p>一件小概率的事件在多次试验中必然发生，这就是为什么随机敲打键盘的猴子也能作的原因，于是上面问题答案自然是肯定的，pLSA这样合乎直觉的模型当然要比一只茫无目的敲打键盘的猴子更加具备写作天赋。</p>\n<p>我们读者需要阅读根据文章和文章的所有内容去推断文章的主题，而pLSA眼里则是根据可观测变量$w$和可观测变量$d$去推断隐变量$z$。我们可以通过海量的文章去解算出模型中的参数，也就是上文中的$p(z_k|p_m)$和$p(w_n|z_k)$两个分布，我们称之为<strong>文章主题分布</strong>和<strong>主题词分布</strong>。 而$p(z_k|d_m)$这个分布实际上就是文章$d_m$的主题分布，也就是我们前文所说的$[‘亲情’: 0.5, ‘送别’: 0.5]$这样的文章主题，这个分布就是我们就获取到关于文章的知识，它量化说明了文章$d_m$在说什么内容。至于模型参数解算的过程，这没什么不可以理解的，正如我定义了一个$y$的产生过程过$y=ax+b$, 当我拿到足够多的样本$y_0=0, y_1=1, y_2=2,….y_n=n$之后，实际上我可以将他们组成方程组解出合理的参数$a$、$b$和$x$来。</p>\n<p>行文至此，我们且对pLSA的求解按下不表，先来实际感受一下pLSA的作用。这里选择格林童话中的十几篇童话作为语料训练pLSA，然后分别从5个主题分布中取出的top3词语：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>topic-1</th>\n<th>topic-2</th>\n<th>topic-3</th>\n<th>topic-4</th>\n<th>topic-5</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>wrong</td>\n<td>birds</td>\n<td>morning</td>\n<td>soldier</td>\n<td>good</td>\n</tr>\n<tr>\n<td>issue</td>\n<td>fox</td>\n<td>met</td>\n<td>king</td>\n<td>gave</td>\n</tr>\n<tr>\n<td>faith</td>\n<td>horse</td>\n<td>wood</td>\n<td>castle</td>\n<td>great</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>可以看到pLSA是可以正确推导出来主题分布的。</p>\n<h2 id=\"pLSA的EM算法推导\"><a href=\"#pLSA的EM算法推导\" class=\"headerlink\" title=\"pLSA的EM算法推导\"></a>pLSA的EM算法推导</h2><p>pLSA是一种含隐变量的生成模型，也就是概率化地描述了样本数据(文章)的生成并且包含隐藏变量的模型，对于这种模型可用MCMC或EM算法来求解。本文讲解的是pLSA的EM算法求解，这里并不打算讲解EM的具体推导，而是直接利用EM算法的结论来对pLSA模型求解，关于EM算法的内容读者可以自己网上搜罗一下资料，或者待我抽空再写一篇关于EM算法的文章。<br>在开始推导之前，我们先假设词库大小为$j$, 每篇文章都由词库中的词$w_j$构成。然后定义模型参数:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n\\theta_{mk}=p(z_k|d_m) \\\\\n\\psi_{kj} = p(w_j|z_k)\n\\end{aligned} \\tag{1}</script><p>根据EM算法的求解步骤，我们先根据plate notation写出联合分布:</p>\n<script type=\"math/tex; mode=display\">\n    p(\\bf w, \\bf z, \\bf d) = \\prod_m p(d_m) \\prod_n p(w_{mn}|z_{mn})p(z_{mn}|d_m) \\tag{2}</script><p>其中$d_m$表示第$m$篇文章， $w_{mn}$表示第$m$篇文章中的第$n$个词，$z_{mn}$表示第$m$篇文章中第$n$个词对应的主题。然后我们令给定模型参数下的主题后验证分布为：</p>\n<script type=\"math/tex; mode=display\">\n    Q(\\bf z; \\bf \\theta, \\bf \\psi) = p(\\bf z|\\bf d, \\bf w; \\bf \\theta, \\bf \\psi) \\tag{3}</script><p>于是可以启动EM算法当中的求期望步骤：</p>\n<script type=\"math/tex; mode=display\">\n\\sum_{\\bf z} {Q(\\bf z)lnp(\\bf w, \\bf z, \\bf w)} = \\sum_mlnp(d_m) \\sum_n \\sum_kq(z_{mnk})ln[p(w_{mn}|z_k)p(z_k|d_m)] \\tag{4}</script><p>其中$q(z_{mnk})$表示在给定参数下的主题验分布，这里有:</p>\n<script type=\"math/tex; mode=display\">\nq(z_{mnk}) = p(z_k|d_m, w_n; \\theta_{mk}, \\psi_{kj}) = \\frac {p(d_m)\\theta_{mk}\\psi_{kn}}{\\sum_kp(d_m)\\theta_{mk}\\psi_{kn}} \\tag{5}</script><p>由于文章中总会出现许多重复词，例如文章$d_m$中第1个词和第$5$个词是一样的，那么就会有$w_{m1}=w_{m5}=w_j$那么对于式子$(4)$中$\\sum_n \\sum_kq(z_{mnk})ln[p(w_{mn}|z_k)p(z_k|d_m)]$这部分，我们可以将文章$d_m$中重复出现的词对应的项合并成为$\\sum_j n_{mj}\\sum_kq(z_{mjk})ln[p(w_j|z_k)p(z_k|d_m)]$, 其中$n_{mj}$为文章$d_m$中词$w_j$出现的次数。于是我们重写式子$(4)$为：</p>\n<script type=\"math/tex; mode=display\">\n\\sum_{\\bf z} {Q(\\bf z)lnp(\\bf w, \\bf z, \\bf w)} = \\sum_mlnp(d_m) \\sum_j n_{mj}\\sum_kq(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) \\tag{6}</script><p>我们的目标是最大化式子$(6)$, 并且因为参数$\\bf \\theta$和$\\bf \\psi$是概率分布，所以有要约束$\\sum_k\\theta_{km}=1$和$\\sum_j{\\psi_{kj}} = 1$, 并且由于$p(d_m)$这个先验证分布可以设置为常数，这样我们去除与优化无关的常数项和增加了约束之后，就可以得到整个带约束的优化目标:</p>\n<script type=\"math/tex; mode=display\">\n\\begin{aligned}\n    \\max \\limits_{\\theta_{mk}, \\psi_{kj}}   \\quad & \\sum_m \\sum_j n_{mj}\\sum_kq(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) \\\\\n    \\bf{s.t.} \\quad & \\sum_{k}\\theta_{mk}=1, m=1,2,3,...,M \\\\\n    & \\sum_{j} \\psi_{kj} = 1, k=1,2,3,...,K\n\\end{aligned} \\tag{7}</script><p>这个带约束的优化目标直接使用拉格朗日乘子法：</p>\n<script type=\"math/tex; mode=display\">\n    L(\\bf \\theta, \\bf \\psi, \\bf \\lambda, \\bf \\alpha) = \\sum_m \\sum_j n_{mj} \\sum_k  q(z_{mjk})ln(\\theta_{mk}\\psi_{kj}) + \\sum_m {\\lambda_m} (1-\\sum_k\\theta_{mk}) + \\sum_k \\alpha_{k} (1-\\sum_j {\\psi_{kj}}) \\tag{8}</script><p>于是可以对参数$\\theta_{mk}$求导并令其为0:</p>\n<script type=\"math/tex; mode=display\">\n\\frac{ \\partial L(\\bf \\theta, \\bf \\psi, \\bf \\lambda, \\bf \\alpha)}{\\partial \\theta_{mk}} = \\frac{ \\sum_jn_{mj}q(z_{mjk})}{\\theta_{mk}} - \\lambda_m = 0 \\\\\n \\lambda_m \\theta_{mk} ={ \\sum_jn_{mj}q(z_{mjk})}  \\tag{9}</script><p>式子(9)左右两边对$k$求和得到:</p>\n<script type=\"math/tex; mode=display\">\n\\lambda_m \\sum_k \\theta_{mk} = \\sum_j{n_{mj}} \\sum_{z}q(z_{mjk}) \\\\\n\\lambda_m = \\sum_j {n_{mj}} = N_m \\tag{10}</script><p>上述式子(10)中$N_m$表示文章$d_m$的总词数，将式子$(10)$代回式(9)可以得到:</p>\n<script type=\"math/tex; mode=display\">\n\\theta_{mk} = \\frac {\\sum_j n_{mj}q(z_{mjk})}{N_m} \\tag{11}</script><p>同样地我们对参数$\\psi_{kj}$故技重施:</p>\n<script type=\"math/tex; mode=display\">\n\\frac {\\partial L(\\bf \\theta, \\bf \\psi,\\bf \\lambda, \\bf \\alpha)}{\\partial \\psi_{kj}} = \\frac{\\sum_m n_{mj}q(z_{mjk})}{\\psi_{kj}} - \\alpha_k = 0 \\\\\n\\alpha_k \\psi_{kj} = \\sum_m n_{mj}q(z_{mjk}) \\tag{12}</script><p>式子(12)左右两边对$j$求和得到:</p>\n<script type=\"math/tex; mode=display\">\n\\alpha_k \\sum_{j} \\psi_{kj} = \\sum_m \\sum_j n_{mj} q(z_{mjk}) \\\\\n\\alpha_k = \\sum_m \\sum_j n_{mj} q(z_{mjk}) \\tag{13}</script><p>将式子代回$(12)$得到：</p>\n<script type=\"math/tex; mode=display\">\n\\psi_{kj} = \\frac { \\sum_m n_{mj}q(z_{mjk})}{ \\sum_m \\sum_j n_{mj} q(z_{mjk})} \\tag{14}</script><p>至此，pLSA参数求解完毕。根据参数更新的规则，我们设在EM算法迭代运行的过程中，第$i$轮的参数为$\\theta_{mk}^i$和$\\psi_{kj}^i$。于是整个pLSA的EM算法可以归纳为：</p>\n<ol>\n<li>随机初始化参数$\\theta_{mk}^0$和$\\psi_{kj}^0$</li>\n<li>开始第$i\\in[1, 2, 3…n]$轮迭代:<br> a. 求$q(z_{mjk})=\\frac {p(d_m)\\theta_{mk}^{i-1}\\psi_{kj}^{i-1}}{\\sum_kp(d_m)\\theta_{mk}^{i-1}\\psi_{kj}^{i-1}}$<br> b. 更新参数<script type=\"math/tex; mode=display\">\n     \\theta_{mk}^i = \\frac {\\sum_j n_{mj}q(z_{mjk})}{N_m} \\\\\n     \\psi_{kj}^i = \\frac { \\sum_m n_{mj}q(z_{mjk})}{ \\sum_m \\sum_j n_{mj} q(z_{mjk})}</script> c. 若参数收敛，则退出迭代，否则返回<code>a</code>继续迭代</li>\n<li>输出模型参数$\\bf \\theta$和$\\bf \\psi$</li>\n</ol>\n<h2 id=\"pLSA的实现\"><a href=\"#pLSA的实现\" class=\"headerlink\" title=\"pLSA的实现\"></a>pLSA的实现</h2><p>从上边的式子来看pLSA是相对比较容易实现的，但是高效地实现还需要一些技巧。首先看式(14)的分母，存在一个二阶求和的过程，如果语料库中有<code>1000</code>篇文档，<code>10000</code>个词，那么就要进行一千万次运算，这样显然必须要用并行批量计算的方式来加速，在实现上我们会将涉及的所有运算都转换为矩阵运算，这样就可以通过成熟的GPU库来加速运算。其次再看内存消耗问题，$q(z_{mjk})$总共需要储存<code>m*j*k</code>个参数，如果有<code>1000</code>篇文档<code>10000</code>个词和<code>50</code>个主题，那么$q(z_{mjk})$将有<code>5亿</code>个元素，这在内存消耗上是不可接受的，在实现上我们只会在批量计算$\\theta_{mk}$和$\\psi_{kj}$参数时用到的部分$q(z_{mjk})$批量计算出来，并且一旦使用完毕立即丢弃。具体代码就不在这里贴了，完整的demo见<a href=\"https://github.com/EmbolismSoil/pLSA\" target=\"_blank\" rel=\"noopener\">pLSA实现</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>pLSA是概率隐语义主题模型中相对简单的一种，推导和实现都相对简单，回头看上面的算法过程，实际上只需要简单地计数迭代而已，所以pLSA非常适合在线学习。其实并非pLSA有此特点，事实上大多数生成模型都一样适合在线学习。不过pLSA的缺点也是非常明显的，<strong>pLSA将文章建模时没有考虑文章词序</strong>，也就是我们随机将一篇文章词打散，对于pLSA来说，其联合概率$p(\\bf w, \\bf z, \\bf d)$是不变的,这一点回头看式子$(2)$就知道。这意味着”谁是你爸爸”和”你爸爸是谁”这两句话在pLSA眼里看来是一样的，这种情况在短文本场景中尤其常见。但幸运的是，在长文本领域，<em>有研表究明，汉字的序顺并不能影阅响读</em>。不过pLSA近年来正在逐渐被更新颖复杂的LDA代替，但相对LDA来说pLSA结构简单，容易做大规模并行化，所以时至今日，pLSA在大规模文本挖掘领域依旧光耀夺目。</p>\n<p>最后，向Thomas Hofmann先生致敬，感谢先生为我们带来如此精妙的pLSA主题模型。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p>[1] <a href=\"https://arxiv.org/pdf/1301.6705.pdf\" target=\"_blank\" rel=\"noopener\"> Probabilistic Latent Semantic Analysis</a><br>[2] <a href=\"https://arxiv.org/pdf/1212.3900.pdf\" target=\"_blank\" rel=\"noopener\">Tutorial on Probablistic Latent Semantic Analysis</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/策略梯度与A2C算法/1566647970040.png","slug":"1566647970040.png","post":"ck8x40sit0004q69pgi2myfd3","modified":0,"renderable":0},{"_id":"source/_posts/在Qt中实现数字音频均衡器/filter.png","slug":"filter.png","post":"ck8x40siq0001q69pe2nhfv6k","modified":0,"renderable":0},{"_id":"source/_posts/让机器读懂文章-pLSA模型推导及实现/plsa.png","slug":"plsa.png","post":"ck8x40siu0005q69paw2qz1jm","modified":0,"renderable":0},{"_id":"source/_posts/平均场变分推断：以混合高斯模型为例/1576379999606.png","slug":"1576379999606.png","post":"ck8x40sir0002q69pfofxgv6d","modified":0,"renderable":0},{"_id":"source/_posts/平均场变分推断：以混合高斯模型为例/1576397186643.png","slug":"1576397186643.png","post":"ck8x40sir0002q69pfofxgv6d","modified":0,"renderable":0},{"_id":"source/_posts/平均场变分推断：以混合高斯模型为例/1576398403713.png","slug":"1576398403713.png","post":"ck8x40sir0002q69pfofxgv6d","modified":0,"renderable":0},{"_id":"source/_posts/平均场变分推断：以混合高斯模型为例/1576417611798.png","slug":"1576417611798.png","post":"ck8x40sir0002q69pfofxgv6d","modified":0,"renderable":0},{"_id":"source/_posts/平均场变分推断：以混合高斯模型为例/1576417800040.png","slug":"1576417800040.png","post":"ck8x40sir0002q69pfofxgv6d","modified":0,"renderable":0},{"_id":"source/_posts/策略梯度与A2C算法/1566648579995.png","slug":"1566648579995.png","post":"ck8x40sit0004q69pgi2myfd3","modified":0,"renderable":0},{"_id":"source/_posts/策略梯度与A2C算法/1566661030761.png","slug":"1566661030761.png","post":"ck8x40sit0004q69pgi2myfd3","modified":0,"renderable":0},{"_id":"source/_posts/策略梯度与A2C算法/1566661039603.png","slug":"1566661039603.png","post":"ck8x40sit0004q69pgi2myfd3","modified":0,"renderable":0},{"_id":"source/_posts/策略梯度与A2C算法/1566661134557.png","slug":"1566661134557.png","post":"ck8x40sit0004q69pgi2myfd3","modified":0,"renderable":0},{"_id":"source/_posts/策略梯度与A2C算法/1566668496252.png","slug":"1566668496252.png","post":"ck8x40sit0004q69pgi2myfd3","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck8x40sin0000q69p7u79mph2","category_id":"ck8x40sjj0006q69p29tkzv2d","_id":"ck8x40sk6000tq69p9gpvsshn"},{"post_id":"ck8x40siq0001q69pe2nhfv6k","category_id":"ck8x40sjo0008q69p00tzjf7o","_id":"ck8x40sk6000vq69p45067x3j"},{"post_id":"ck8x40sir0002q69pfofxgv6d","category_id":"ck8x40sjj0006q69p29tkzv2d","_id":"ck8x40sk6000xq69pf7mzco1k"},{"post_id":"ck8x40sis0003q69pmheup9dy","category_id":"ck8x40sjq000cq69p8s696jpr","_id":"ck8x40sk6000zq69pqidvwy61"},{"post_id":"ck8x40sit0004q69pgi2myfd3","category_id":"ck8x40sjr000eq69pkkvgeelo","_id":"ck8x40sk70011q69p0apofpkd"},{"post_id":"ck8x40siu0005q69paw2qz1jm","category_id":"ck8x40sjr000gq69px10bvpz6","_id":"ck8x40sk70013q69pjg373sge"}],"PostTag":[{"post_id":"ck8x40sin0000q69p7u79mph2","tag_id":"ck8x40sjm0007q69pa19h78iz","_id":"ck8x40sk5000sq69p46lch7je"},{"post_id":"ck8x40sin0000q69p7u79mph2","tag_id":"ck8x40sjo0009q69phva07ter","_id":"ck8x40sk6000uq69pyw3k84rc"},{"post_id":"ck8x40siq0001q69pe2nhfv6k","tag_id":"ck8x40sjp000bq69p6gr0aogp","_id":"ck8x40sk6000wq69pxclh42sp"},{"post_id":"ck8x40siq0001q69pe2nhfv6k","tag_id":"ck8x40sjq000dq69p62kchvaa","_id":"ck8x40sk6000yq69pk39at5zk"},{"post_id":"ck8x40siq0001q69pe2nhfv6k","tag_id":"ck8x40sjr000fq69pg5475lsb","_id":"ck8x40sk70010q69ppv9fqnjt"},{"post_id":"ck8x40sir0002q69pfofxgv6d","tag_id":"ck8x40sjo0009q69phva07ter","_id":"ck8x40sk70012q69p7odetf6j"},{"post_id":"ck8x40sir0002q69pfofxgv6d","tag_id":"ck8x40sjm0007q69pa19h78iz","_id":"ck8x40sk70014q69ptgea62jb"},{"post_id":"ck8x40sis0003q69pmheup9dy","tag_id":"ck8x40sjo0009q69phva07ter","_id":"ck8x40sk80015q69piy5wsl99"},{"post_id":"ck8x40sis0003q69pmheup9dy","tag_id":"ck8x40sjm0007q69pa19h78iz","_id":"ck8x40sk80016q69p5jgr18nx"},{"post_id":"ck8x40sis0003q69pmheup9dy","tag_id":"ck8x40sju000lq69pozw31kxl","_id":"ck8x40sk90017q69pmere4p4h"},{"post_id":"ck8x40sit0004q69pgi2myfd3","tag_id":"ck8x40sjo0009q69phva07ter","_id":"ck8x40sk90018q69pfemn78y3"},{"post_id":"ck8x40sit0004q69pgi2myfd3","tag_id":"ck8x40sjm0007q69pa19h78iz","_id":"ck8x40sk90019q69pczr7jd31"},{"post_id":"ck8x40sit0004q69pgi2myfd3","tag_id":"ck8x40sju000lq69pozw31kxl","_id":"ck8x40sk9001aq69pq3k88tmp"},{"post_id":"ck8x40siu0005q69paw2qz1jm","tag_id":"ck8x40sjv000pq69pn7j6vpna","_id":"ck8x40sk9001bq69p44puh6n6"},{"post_id":"ck8x40siu0005q69paw2qz1jm","tag_id":"ck8x40sjo0009q69phva07ter","_id":"ck8x40sk9001cq69pd9cvc8t3"},{"post_id":"ck8x40siu0005q69paw2qz1jm","tag_id":"ck8x40sjm0007q69pa19h78iz","_id":"ck8x40sk9001dq69pc57r50li"}],"Tag":[{"name":"机器学习","_id":"ck8x40sjm0007q69pa19h78iz"},{"name":"算法","_id":"ck8x40sjo0009q69phva07ter"},{"name":"C++","_id":"ck8x40sjp000bq69p6gr0aogp"},{"name":"Qt","_id":"ck8x40sjq000dq69p62kchvaa"},{"name":"音频算法","_id":"ck8x40sjr000fq69pg5475lsb"},{"name":"计算广告","_id":"ck8x40sju000lq69pozw31kxl"},{"name":"自然语言处理","_id":"ck8x40sjv000pq69pn7j6vpna"}]}}